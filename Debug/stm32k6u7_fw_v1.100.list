
stm32k6u7_fw_v1.100.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054d4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a4  08005594  08005594  00015594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005938  08005938  00020118  2**0
                  CONTENTS
  4 .ARM          00000000  08005938  08005938  00020118  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005938  08005938  00020118  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005938  08005938  00015938  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800593c  0800593c  0001593c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000118  20000000  08005940  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000860  20000118  08005a58  00020118  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000978  08005a58  00020978  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020118  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b636  00000000  00000000  00020140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000262b  00000000  00000000  0002b776  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009f8  00000000  00000000  0002dda8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008a0  00000000  00000000  0002e7a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015026  00000000  00000000  0002f040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000133db  00000000  00000000  00044066  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006b1c5  00000000  00000000  00057441  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c2606  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002838  00000000  00000000  000c2658  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000118 	.word	0x20000118
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800557c 	.word	0x0800557c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000011c 	.word	0x2000011c
 8000104:	0800557c 	.word	0x0800557c

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <apInit>:
bool Update_Modbus_MAP_From_Flash(uint8_t *info_data, uint8_t size);



void apInit(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
  //uint8_t cli_flag_buf[2];
  //uint8_t buf[FLASH_BUF_SIZE];


  uartOpen(_DEF_UART1); //debugging port PA9|PA10
 8000238:	2000      	movs	r0, #0
 800023a:	f000 fc83 	bl	8000b44 <uartOpen>
  uartOpen(_DEF_UART2); //rs485 communicaation port PA2|PA3
 800023e:	2001      	movs	r0, #1
 8000240:	f000 fc80 	bl	8000b44 <uartOpen>
  uartPrintf(_DEF_UART1, "_DEF_UART1 OK..\r\n");
 8000244:	4b03      	ldr	r3, [pc, #12]	; (8000254 <apInit+0x20>)
 8000246:	0019      	movs	r1, r3
 8000248:	2000      	movs	r0, #0
 800024a:	f000 fea5 	bl	8000f98 <uartPrintf>
  /*
  else
  {
    Update_Flash_From_Modbus_MAP(buf, FLASH_BUF_SIZE);
  }*/
}
 800024e:	46c0      	nop			; (mov r8, r8)
 8000250:	46bd      	mov	sp, r7
 8000252:	bd80      	pop	{r7, pc}
 8000254:	08005594 	.word	0x08005594

08000258 <apMain>:

void apMain(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0

  ap_time = millis();
 800025c:	f000 f928 	bl	80004b0 <millis>
 8000260:	0002      	movs	r2, r0
 8000262:	4b12      	ldr	r3, [pc, #72]	; (80002ac <apMain+0x54>)
 8000264:	601a      	str	r2, [r3, #0]
  ap_State = INIT_STATE;
 8000266:	4b12      	ldr	r3, [pc, #72]	; (80002b0 <apMain+0x58>)
 8000268:	2200      	movs	r2, #0
 800026a:	701a      	strb	r2, [r3, #0]
  while(1)
  {
     switch (ap_State)
 800026c:	4b10      	ldr	r3, [pc, #64]	; (80002b0 <apMain+0x58>)
 800026e:	781b      	ldrb	r3, [r3, #0]
 8000270:	2b03      	cmp	r3, #3
 8000272:	d019      	beq.n	80002a8 <apMain+0x50>
 8000274:	dc13      	bgt.n	800029e <apMain+0x46>
 8000276:	2b02      	cmp	r3, #2
 8000278:	d00e      	beq.n	8000298 <apMain+0x40>
 800027a:	dc10      	bgt.n	800029e <apMain+0x46>
 800027c:	2b00      	cmp	r3, #0
 800027e:	d002      	beq.n	8000286 <apMain+0x2e>
 8000280:	2b01      	cmp	r3, #1
 8000282:	d003      	beq.n	800028c <apMain+0x34>
 8000284:	e00b      	b.n	800029e <apMain+0x46>
     {
                 case INIT_STATE:
                   InitStateHandler();
 8000286:	f000 f849 	bl	800031c <InitStateHandler>
                     break;
 800028a:	e00e      	b.n	80002aa <apMain+0x52>

                 case MODE_STATE:
                   ModeStateHandler(ap_time);
 800028c:	4b07      	ldr	r3, [pc, #28]	; (80002ac <apMain+0x54>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	0018      	movs	r0, r3
 8000292:	f000 f857 	bl	8000344 <ModeStateHandler>
                     break;
 8000296:	e008      	b.n	80002aa <apMain+0x52>

                 case MODBUS_DATA_STATE:
                   ModbusDataStateHandler();
 8000298:	f000 f886 	bl	80003a8 <ModbusDataStateHandler>
                     break;
 800029c:	e005      	b.n	80002aa <apMain+0x52>
                 case CLE_STATE:
                   //CLEStateHandler();
                     break;

                 default:
                     printf("please check your State.\n");
 800029e:	4b05      	ldr	r3, [pc, #20]	; (80002b4 <apMain+0x5c>)
 80002a0:	0018      	movs	r0, r3
 80002a2:	f004 f917 	bl	80044d4 <puts>
                     break;
 80002a6:	e000      	b.n	80002aa <apMain+0x52>
                     break;
 80002a8:	46c0      	nop			; (mov r8, r8)
     switch (ap_State)
 80002aa:	e7df      	b.n	800026c <apMain+0x14>
 80002ac:	20000138 	.word	0x20000138
 80002b0:	20000134 	.word	0x20000134
 80002b4:	080055a8 	.word	0x080055a8

080002b8 <Read_Reed_state>:
     }
   }
}

uint8_t Read_Reed_state(void)
{
 80002b8:	b590      	push	{r4, r7, lr}
 80002ba:	b083      	sub	sp, #12
 80002bc:	af00      	add	r7, sp, #0
  uint8_t ret = 0;
 80002be:	1dfb      	adds	r3, r7, #7
 80002c0:	2200      	movs	r2, #0
 80002c2:	701a      	strb	r2, [r3, #0]
  GPIO_PinState state;

  state = buttonStateCheck(_DEF_BUTTON2);
 80002c4:	1dbc      	adds	r4, r7, #6
 80002c6:	2001      	movs	r0, #1
 80002c8:	f000 fb3c 	bl	8000944 <buttonStateCheck>
 80002cc:	0003      	movs	r3, r0
 80002ce:	7023      	strb	r3, [r4, #0]
  /*
   * GPIO_PIN_SET = 1
   * GPIO_PIN_RESET = 0
   */
  if (state == GPIO_PIN_SET)
 80002d0:	1dbb      	adds	r3, r7, #6
 80002d2:	781b      	ldrb	r3, [r3, #0]
 80002d4:	2b01      	cmp	r3, #1
 80002d6:	d10d      	bne.n	80002f4 <Read_Reed_state+0x3c>
  {
    /*push button*/
    ret = 1;
 80002d8:	1dfb      	adds	r3, r7, #7
 80002da:	2201      	movs	r2, #1
 80002dc:	701a      	strb	r2, [r3, #0]
    /*set the database to 0xffff*/
    Input_Registers_Database[0] = 0xffff;
 80002de:	4b0e      	ldr	r3, [pc, #56]	; (8000318 <Read_Reed_state+0x60>)
 80002e0:	2201      	movs	r2, #1
 80002e2:	4252      	negs	r2, r2
 80002e4:	801a      	strh	r2, [r3, #0]
    ledToggle(_DEF_LED1);
 80002e6:	2000      	movs	r0, #0
 80002e8:	f000 fbf4 	bl	8000ad4 <ledToggle>
    ledToggle(_DEF_LED2);
 80002ec:	2001      	movs	r0, #1
 80002ee:	f000 fbf1 	bl	8000ad4 <ledToggle>
 80002f2:	e00b      	b.n	800030c <Read_Reed_state+0x54>
  }
  else
  {
    ret = 0;
 80002f4:	1dfb      	adds	r3, r7, #7
 80002f6:	2200      	movs	r2, #0
 80002f8:	701a      	strb	r2, [r3, #0]
    /*set the database to 0x1234*/
    Input_Registers_Database[0] = 0x0000;
 80002fa:	4b07      	ldr	r3, [pc, #28]	; (8000318 <Read_Reed_state+0x60>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	801a      	strh	r2, [r3, #0]
    ledOff(_DEF_LED1);
 8000300:	2000      	movs	r0, #0
 8000302:	f000 fbbf 	bl	8000a84 <ledOff>
    ledOff(_DEF_LED2);
 8000306:	2001      	movs	r0, #1
 8000308:	f000 fbbc 	bl	8000a84 <ledOff>
  }

  return ret;
 800030c:	1dfb      	adds	r3, r7, #7
 800030e:	781b      	ldrb	r3, [r3, #0]
}
 8000310:	0018      	movs	r0, r3
 8000312:	46bd      	mov	sp, r7
 8000314:	b003      	add	sp, #12
 8000316:	bd90      	pop	{r4, r7, pc}
 8000318:	2000013c 	.word	0x2000013c

0800031c <InitStateHandler>:
}

/*Event Handler*/

void InitStateHandler(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	af00      	add	r7, sp, #0
  //uint8_t buf[FLASH_BUF_SIZE];

  printf("STATE.INIT_STATE\n");
 8000320:	4b06      	ldr	r3, [pc, #24]	; (800033c <InitStateHandler+0x20>)
 8000322:	0018      	movs	r0, r3
 8000324:	f004 f8d6 	bl	80044d4 <puts>
    reset_flag = false;
  }
  set_uart_tbl(_DEF_UART2, Holding_Registers_Database);
  */
  /*uart open*/
  uartOpen(_DEF_UART2);
 8000328:	2001      	movs	r0, #1
 800032a:	f000 fc0b 	bl	8000b44 <uartOpen>

  ap_State = MODE_STATE;
 800032e:	4b04      	ldr	r3, [pc, #16]	; (8000340 <InitStateHandler+0x24>)
 8000330:	2201      	movs	r2, #1
 8000332:	701a      	strb	r2, [r3, #0]
}
 8000334:	46c0      	nop			; (mov r8, r8)
 8000336:	46bd      	mov	sp, r7
 8000338:	bd80      	pop	{r7, pc}
 800033a:	46c0      	nop			; (mov r8, r8)
 800033c:	08005614 	.word	0x08005614
 8000340:	20000134 	.word	0x20000134

08000344 <ModeStateHandler>:


void ModeStateHandler(uint32_t pre_time)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b082      	sub	sp, #8
 8000348:	af00      	add	r7, sp, #0
 800034a:	6078      	str	r0, [r7, #4]

  printf("STATE.SELECT_MODE_STATE\n");
 800034c:	4b11      	ldr	r3, [pc, #68]	; (8000394 <ModeStateHandler+0x50>)
 800034e:	0018      	movs	r0, r3
 8000350:	f004 f8c0 	bl	80044d4 <puts>

  if (millis()-pre_time >= 500)
 8000354:	f000 f8ac 	bl	80004b0 <millis>
 8000358:	0002      	movs	r2, r0
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	1ad2      	subs	r2, r2, r3
 800035e:	23fa      	movs	r3, #250	; 0xfa
 8000360:	005b      	lsls	r3, r3, #1
 8000362:	429a      	cmp	r2, r3
 8000364:	d30e      	bcc.n	8000384 <ModeStateHandler+0x40>
  {
    ap_time = millis();
 8000366:	f000 f8a3 	bl	80004b0 <millis>
 800036a:	0002      	movs	r2, r0
 800036c:	4b0a      	ldr	r3, [pc, #40]	; (8000398 <ModeStateHandler+0x54>)
 800036e:	601a      	str	r2, [r3, #0]
    Read_Reed_state();
 8000370:	f7ff ffa2 	bl	80002b8 <Read_Reed_state>
    uartPrintf(_DEF_UART1, "Reed : 0x%X\r\n", Input_Registers_Database[0]);
 8000374:	4b09      	ldr	r3, [pc, #36]	; (800039c <ModeStateHandler+0x58>)
 8000376:	881b      	ldrh	r3, [r3, #0]
 8000378:	001a      	movs	r2, r3
 800037a:	4b09      	ldr	r3, [pc, #36]	; (80003a0 <ModeStateHandler+0x5c>)
 800037c:	0019      	movs	r1, r3
 800037e:	2000      	movs	r0, #0
 8000380:	f000 fe0a 	bl	8000f98 <uartPrintf>
  }
  ap_State = MODBUS_DATA_STATE;
 8000384:	4b07      	ldr	r3, [pc, #28]	; (80003a4 <ModeStateHandler+0x60>)
 8000386:	2202      	movs	r2, #2
 8000388:	701a      	strb	r2, [r3, #0]
}
 800038a:	46c0      	nop			; (mov r8, r8)
 800038c:	46bd      	mov	sp, r7
 800038e:	b002      	add	sp, #8
 8000390:	bd80      	pop	{r7, pc}
 8000392:	46c0      	nop			; (mov r8, r8)
 8000394:	08005628 	.word	0x08005628
 8000398:	20000138 	.word	0x20000138
 800039c:	2000013c 	.word	0x2000013c
 80003a0:	08005640 	.word	0x08005640
 80003a4:	20000134 	.word	0x20000134

080003a8 <ModbusDataStateHandler>:


void ModbusDataStateHandler(void)
{
 80003a8:	b590      	push	{r4, r7, lr}
 80003aa:	b083      	sub	sp, #12
 80003ac:	af00      	add	r7, sp, #0
  uint8_t ret = 0;
 80003ae:	1dfb      	adds	r3, r7, #7
 80003b0:	2200      	movs	r2, #0
 80003b2:	701a      	strb	r2, [r3, #0]
  printf("STATE.MODBUS_DATA_STATE\n");
 80003b4:	4b23      	ldr	r3, [pc, #140]	; (8000444 <ModbusDataStateHandler+0x9c>)
 80003b6:	0018      	movs	r0, r3
 80003b8:	f004 f88c 	bl	80044d4 <puts>

  slave_id = Holding_Registers_Database[0];
 80003bc:	4b22      	ldr	r3, [pc, #136]	; (8000448 <ModbusDataStateHandler+0xa0>)
 80003be:	881b      	ldrh	r3, [r3, #0]
 80003c0:	b2da      	uxtb	r2, r3
 80003c2:	4b22      	ldr	r3, [pc, #136]	; (800044c <ModbusDataStateHandler+0xa4>)
 80003c4:	701a      	strb	r2, [r3, #0]

  /*the port get rx_data -> modbus protocol start point*/

  if (uartAvailable(_DEF_UART2)>0)
 80003c6:	2001      	movs	r0, #1
 80003c8:	f000 fd32 	bl	8000e30 <uartAvailable>
 80003cc:	1e03      	subs	r3, r0, #0
 80003ce:	d028      	beq.n	8000422 <ModbusDataStateHandler+0x7a>
  {
    uartRead(_DEF_UART2);
 80003d0:	2001      	movs	r0, #1
 80003d2:	f000 fd71 	bl	8000eb8 <uartRead>
    if (RxData[0] == slave_id)
 80003d6:	4b1e      	ldr	r3, [pc, #120]	; (8000450 <ModbusDataStateHandler+0xa8>)
 80003d8:	781a      	ldrb	r2, [r3, #0]
 80003da:	4b1c      	ldr	r3, [pc, #112]	; (800044c <ModbusDataStateHandler+0xa4>)
 80003dc:	781b      	ldrb	r3, [r3, #0]
 80003de:	429a      	cmp	r2, r3
 80003e0:	d11f      	bne.n	8000422 <ModbusDataStateHandler+0x7a>
    {
      switch (RxData[1])
 80003e2:	4b1b      	ldr	r3, [pc, #108]	; (8000450 <ModbusDataStateHandler+0xa8>)
 80003e4:	785b      	ldrb	r3, [r3, #1]
 80003e6:	2b06      	cmp	r3, #6
 80003e8:	d00f      	beq.n	800040a <ModbusDataStateHandler+0x62>
 80003ea:	dc16      	bgt.n	800041a <ModbusDataStateHandler+0x72>
 80003ec:	2b03      	cmp	r3, #3
 80003ee:	d002      	beq.n	80003f6 <ModbusDataStateHandler+0x4e>
 80003f0:	2b04      	cmp	r3, #4
 80003f2:	d005      	beq.n	8000400 <ModbusDataStateHandler+0x58>
 80003f4:	e011      	b.n	800041a <ModbusDataStateHandler+0x72>
      {
        case 0x03:
          readHoldingRegs(Holding_Registers_Database);
 80003f6:	4b14      	ldr	r3, [pc, #80]	; (8000448 <ModbusDataStateHandler+0xa0>)
 80003f8:	0018      	movs	r0, r3
 80003fa:	f001 f8bb 	bl	8001574 <readHoldingRegs>
          break;
 80003fe:	e011      	b.n	8000424 <ModbusDataStateHandler+0x7c>
        case 0x04:
          readInputRegs(Input_Registers_Database);
 8000400:	4b14      	ldr	r3, [pc, #80]	; (8000454 <ModbusDataStateHandler+0xac>)
 8000402:	0018      	movs	r0, r3
 8000404:	f001 f952 	bl	80016ac <readInputRegs>
          break;
 8000408:	e00c      	b.n	8000424 <ModbusDataStateHandler+0x7c>
        case 0x06:
         ret = writeSingleReg(Holding_Registers_Database);
 800040a:	1dfc      	adds	r4, r7, #7
 800040c:	4b0e      	ldr	r3, [pc, #56]	; (8000448 <ModbusDataStateHandler+0xa0>)
 800040e:	0018      	movs	r0, r3
 8000410:	f001 f9e8 	bl	80017e4 <writeSingleReg>
 8000414:	0003      	movs	r3, r0
 8000416:	7023      	strb	r3, [r4, #0]
          break;
 8000418:	e004      	b.n	8000424 <ModbusDataStateHandler+0x7c>
        default:
          modbusException(ILLEGAL_FUNCTION);
 800041a:	2001      	movs	r0, #1
 800041c:	f001 f886 	bl	800152c <modbusException>
          break;
 8000420:	e000      	b.n	8000424 <ModbusDataStateHandler+0x7c>
      }
   }
 8000422:	46c0      	nop			; (mov r8, r8)
  }

  if (ret == 2)
 8000424:	1dfb      	adds	r3, r7, #7
 8000426:	781b      	ldrb	r3, [r3, #0]
 8000428:	2b02      	cmp	r3, #2
 800042a:	d103      	bne.n	8000434 <ModbusDataStateHandler+0x8c>
  {
    ap_State = CLE_STATE;
 800042c:	4b0a      	ldr	r3, [pc, #40]	; (8000458 <ModbusDataStateHandler+0xb0>)
 800042e:	2203      	movs	r2, #3
 8000430:	701a      	strb	r2, [r3, #0]
  else
  {
    ap_State = MODE_STATE;//MODE_STATE
  }

}
 8000432:	e002      	b.n	800043a <ModbusDataStateHandler+0x92>
    ap_State = MODE_STATE;//MODE_STATE
 8000434:	4b08      	ldr	r3, [pc, #32]	; (8000458 <ModbusDataStateHandler+0xb0>)
 8000436:	2201      	movs	r2, #1
 8000438:	701a      	strb	r2, [r3, #0]
}
 800043a:	46c0      	nop			; (mov r8, r8)
 800043c:	46bd      	mov	sp, r7
 800043e:	b003      	add	sp, #12
 8000440:	bd90      	pop	{r4, r7, pc}
 8000442:	46c0      	nop			; (mov r8, r8)
 8000444:	08005650 	.word	0x08005650
 8000448:	20000004 	.word	0x20000004
 800044c:	20000000 	.word	0x20000000
 8000450:	20000664 	.word	0x20000664
 8000454:	2000013c 	.word	0x2000013c
 8000458:	20000134 	.word	0x20000134

0800045c <bspInit>:
#include "bsp.h"

void SystemClock_Config(void);

void bspInit(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b082      	sub	sp, #8
 8000460:	af00      	add	r7, sp, #0
  HAL_Init();
 8000462:	f001 fa89 	bl	8001978 <HAL_Init>
  SystemClock_Config();
 8000466:	f000 f82b 	bl	80004c0 <SystemClock_Config>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800046a:	4b10      	ldr	r3, [pc, #64]	; (80004ac <bspInit+0x50>)
 800046c:	695a      	ldr	r2, [r3, #20]
 800046e:	4b0f      	ldr	r3, [pc, #60]	; (80004ac <bspInit+0x50>)
 8000470:	2180      	movs	r1, #128	; 0x80
 8000472:	0289      	lsls	r1, r1, #10
 8000474:	430a      	orrs	r2, r1
 8000476:	615a      	str	r2, [r3, #20]
 8000478:	4b0c      	ldr	r3, [pc, #48]	; (80004ac <bspInit+0x50>)
 800047a:	695a      	ldr	r2, [r3, #20]
 800047c:	2380      	movs	r3, #128	; 0x80
 800047e:	029b      	lsls	r3, r3, #10
 8000480:	4013      	ands	r3, r2
 8000482:	607b      	str	r3, [r7, #4]
 8000484:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000486:	4b09      	ldr	r3, [pc, #36]	; (80004ac <bspInit+0x50>)
 8000488:	695a      	ldr	r2, [r3, #20]
 800048a:	4b08      	ldr	r3, [pc, #32]	; (80004ac <bspInit+0x50>)
 800048c:	2180      	movs	r1, #128	; 0x80
 800048e:	02c9      	lsls	r1, r1, #11
 8000490:	430a      	orrs	r2, r1
 8000492:	615a      	str	r2, [r3, #20]
 8000494:	4b05      	ldr	r3, [pc, #20]	; (80004ac <bspInit+0x50>)
 8000496:	695a      	ldr	r2, [r3, #20]
 8000498:	2380      	movs	r3, #128	; 0x80
 800049a:	02db      	lsls	r3, r3, #11
 800049c:	4013      	ands	r3, r2
 800049e:	603b      	str	r3, [r7, #0]
 80004a0:	683b      	ldr	r3, [r7, #0]
}
 80004a2:	46c0      	nop			; (mov r8, r8)
 80004a4:	46bd      	mov	sp, r7
 80004a6:	b002      	add	sp, #8
 80004a8:	bd80      	pop	{r7, pc}
 80004aa:	46c0      	nop			; (mov r8, r8)
 80004ac:	40021000 	.word	0x40021000

080004b0 <millis>:
{
  HAL_Delay(ms);
}

uint32_t millis(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80004b4:	f001 faba 	bl	8001a2c <HAL_GetTick>
 80004b8:	0003      	movs	r3, r0
}
 80004ba:	0018      	movs	r0, r3
 80004bc:	46bd      	mov	sp, r7
 80004be:	bd80      	pop	{r7, pc}

080004c0 <SystemClock_Config>:

void SystemClock_Config(void)
{
 80004c0:	b590      	push	{r4, r7, lr}
 80004c2:	b097      	sub	sp, #92	; 0x5c
 80004c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004c6:	2428      	movs	r4, #40	; 0x28
 80004c8:	193b      	adds	r3, r7, r4
 80004ca:	0018      	movs	r0, r3
 80004cc:	2330      	movs	r3, #48	; 0x30
 80004ce:	001a      	movs	r2, r3
 80004d0:	2100      	movs	r1, #0
 80004d2:	f003 ff85 	bl	80043e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004d6:	2318      	movs	r3, #24
 80004d8:	18fb      	adds	r3, r7, r3
 80004da:	0018      	movs	r0, r3
 80004dc:	2310      	movs	r3, #16
 80004de:	001a      	movs	r2, r3
 80004e0:	2100      	movs	r1, #0
 80004e2:	f003 ff7d 	bl	80043e0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004e6:	1d3b      	adds	r3, r7, #4
 80004e8:	0018      	movs	r0, r3
 80004ea:	2314      	movs	r3, #20
 80004ec:	001a      	movs	r2, r3
 80004ee:	2100      	movs	r1, #0
 80004f0:	f003 ff76 	bl	80043e0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004f4:	0021      	movs	r1, r4
 80004f6:	187b      	adds	r3, r7, r1
 80004f8:	2202      	movs	r2, #2
 80004fa:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004fc:	187b      	adds	r3, r7, r1
 80004fe:	2201      	movs	r2, #1
 8000500:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000502:	187b      	adds	r3, r7, r1
 8000504:	2210      	movs	r2, #16
 8000506:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000508:	187b      	adds	r3, r7, r1
 800050a:	2202      	movs	r2, #2
 800050c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800050e:	187b      	adds	r3, r7, r1
 8000510:	2200      	movs	r2, #0
 8000512:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000514:	187b      	adds	r3, r7, r1
 8000516:	22a0      	movs	r2, #160	; 0xa0
 8000518:	0392      	lsls	r2, r2, #14
 800051a:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800051c:	187b      	adds	r3, r7, r1
 800051e:	2200      	movs	r2, #0
 8000520:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000522:	187b      	adds	r3, r7, r1
 8000524:	0018      	movs	r0, r3
 8000526:	f001 ffed 	bl	8002504 <HAL_RCC_OscConfig>
 800052a:	1e03      	subs	r3, r0, #0
 800052c:	d001      	beq.n	8000532 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800052e:	f000 f828 	bl	8000582 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000532:	2118      	movs	r1, #24
 8000534:	187b      	adds	r3, r7, r1
 8000536:	2207      	movs	r2, #7
 8000538:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800053a:	187b      	adds	r3, r7, r1
 800053c:	2202      	movs	r2, #2
 800053e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000540:	187b      	adds	r3, r7, r1
 8000542:	2200      	movs	r2, #0
 8000544:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000546:	187b      	adds	r3, r7, r1
 8000548:	2200      	movs	r2, #0
 800054a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800054c:	187b      	adds	r3, r7, r1
 800054e:	2101      	movs	r1, #1
 8000550:	0018      	movs	r0, r3
 8000552:	f002 faf1 	bl	8002b38 <HAL_RCC_ClockConfig>
 8000556:	1e03      	subs	r3, r0, #0
 8000558:	d001      	beq.n	800055e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800055a:	f000 f812 	bl	8000582 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800055e:	1d3b      	adds	r3, r7, #4
 8000560:	2201      	movs	r2, #1
 8000562:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000564:	1d3b      	adds	r3, r7, #4
 8000566:	2200      	movs	r2, #0
 8000568:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800056a:	1d3b      	adds	r3, r7, #4
 800056c:	0018      	movs	r0, r3
 800056e:	f002 fc27 	bl	8002dc0 <HAL_RCCEx_PeriphCLKConfig>
 8000572:	1e03      	subs	r3, r0, #0
 8000574:	d001      	beq.n	800057a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000576:	f000 f804 	bl	8000582 <Error_Handler>
  }
}
 800057a:	46c0      	nop			; (mov r8, r8)
 800057c:	46bd      	mov	sp, r7
 800057e:	b017      	add	sp, #92	; 0x5c
 8000580:	bd90      	pop	{r4, r7, pc}

08000582 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000582:	b580      	push	{r7, lr}
 8000584:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000586:	b672      	cpsid	i
}
 8000588:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800058a:	e7fe      	b.n	800058a <Error_Handler+0x8>

0800058c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000592:	4b0f      	ldr	r3, [pc, #60]	; (80005d0 <HAL_MspInit+0x44>)
 8000594:	699a      	ldr	r2, [r3, #24]
 8000596:	4b0e      	ldr	r3, [pc, #56]	; (80005d0 <HAL_MspInit+0x44>)
 8000598:	2101      	movs	r1, #1
 800059a:	430a      	orrs	r2, r1
 800059c:	619a      	str	r2, [r3, #24]
 800059e:	4b0c      	ldr	r3, [pc, #48]	; (80005d0 <HAL_MspInit+0x44>)
 80005a0:	699b      	ldr	r3, [r3, #24]
 80005a2:	2201      	movs	r2, #1
 80005a4:	4013      	ands	r3, r2
 80005a6:	607b      	str	r3, [r7, #4]
 80005a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005aa:	4b09      	ldr	r3, [pc, #36]	; (80005d0 <HAL_MspInit+0x44>)
 80005ac:	69da      	ldr	r2, [r3, #28]
 80005ae:	4b08      	ldr	r3, [pc, #32]	; (80005d0 <HAL_MspInit+0x44>)
 80005b0:	2180      	movs	r1, #128	; 0x80
 80005b2:	0549      	lsls	r1, r1, #21
 80005b4:	430a      	orrs	r2, r1
 80005b6:	61da      	str	r2, [r3, #28]
 80005b8:	4b05      	ldr	r3, [pc, #20]	; (80005d0 <HAL_MspInit+0x44>)
 80005ba:	69da      	ldr	r2, [r3, #28]
 80005bc:	2380      	movs	r3, #128	; 0x80
 80005be:	055b      	lsls	r3, r3, #21
 80005c0:	4013      	ands	r3, r2
 80005c2:	603b      	str	r3, [r7, #0]
 80005c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005c6:	46c0      	nop			; (mov r8, r8)
 80005c8:	46bd      	mov	sp, r7
 80005ca:	b002      	add	sp, #8
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	46c0      	nop			; (mov r8, r8)
 80005d0:	40021000 	.word	0x40021000

080005d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005d8:	e7fe      	b.n	80005d8 <NMI_Handler+0x4>

080005da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005da:	b580      	push	{r7, lr}
 80005dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005de:	e7fe      	b.n	80005de <HardFault_Handler+0x4>

080005e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80005e4:	46c0      	nop			; (mov r8, r8)
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}

080005ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005ea:	b580      	push	{r7, lr}
 80005ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005ee:	46c0      	nop			; (mov r8, r8)
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}

080005f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005f8:	f001 fa06 	bl	8001a08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005fc:	46c0      	nop			; (mov r8, r8)
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
	...

08000604 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000608:	4b03      	ldr	r3, [pc, #12]	; (8000618 <USART1_IRQHandler+0x14>)
 800060a:	0018      	movs	r0, r3
 800060c:	f002 fde8 	bl	80031e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000610:	46c0      	nop			; (mov r8, r8)
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	46c0      	nop			; (mov r8, r8)
 8000618:	200004cc 	.word	0x200004cc

0800061c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000620:	4b03      	ldr	r3, [pc, #12]	; (8000630 <USART2_IRQHandler+0x14>)
 8000622:	0018      	movs	r0, r3
 8000624:	f002 fddc 	bl	80031e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000628:	46c0      	nop			; (mov r8, r8)
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	46c0      	nop			; (mov r8, r8)
 8000630:	20000554 	.word	0x20000554

08000634 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b086      	sub	sp, #24
 8000638:	af00      	add	r7, sp, #0
 800063a:	60f8      	str	r0, [r7, #12]
 800063c:	60b9      	str	r1, [r7, #8]
 800063e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000640:	2300      	movs	r3, #0
 8000642:	617b      	str	r3, [r7, #20]
 8000644:	e00a      	b.n	800065c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000646:	e000      	b.n	800064a <_read+0x16>
 8000648:	bf00      	nop
 800064a:	0001      	movs	r1, r0
 800064c:	68bb      	ldr	r3, [r7, #8]
 800064e:	1c5a      	adds	r2, r3, #1
 8000650:	60ba      	str	r2, [r7, #8]
 8000652:	b2ca      	uxtb	r2, r1
 8000654:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000656:	697b      	ldr	r3, [r7, #20]
 8000658:	3301      	adds	r3, #1
 800065a:	617b      	str	r3, [r7, #20]
 800065c:	697a      	ldr	r2, [r7, #20]
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	429a      	cmp	r2, r3
 8000662:	dbf0      	blt.n	8000646 <_read+0x12>
  }

  return len;
 8000664:	687b      	ldr	r3, [r7, #4]
}
 8000666:	0018      	movs	r0, r3
 8000668:	46bd      	mov	sp, r7
 800066a:	b006      	add	sp, #24
 800066c:	bd80      	pop	{r7, pc}

0800066e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800066e:	b580      	push	{r7, lr}
 8000670:	b086      	sub	sp, #24
 8000672:	af00      	add	r7, sp, #0
 8000674:	60f8      	str	r0, [r7, #12]
 8000676:	60b9      	str	r1, [r7, #8]
 8000678:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800067a:	2300      	movs	r3, #0
 800067c:	617b      	str	r3, [r7, #20]
 800067e:	e009      	b.n	8000694 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000680:	68bb      	ldr	r3, [r7, #8]
 8000682:	1c5a      	adds	r2, r3, #1
 8000684:	60ba      	str	r2, [r7, #8]
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	0018      	movs	r0, r3
 800068a:	e000      	b.n	800068e <_write+0x20>
 800068c:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800068e:	697b      	ldr	r3, [r7, #20]
 8000690:	3301      	adds	r3, #1
 8000692:	617b      	str	r3, [r7, #20]
 8000694:	697a      	ldr	r2, [r7, #20]
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	429a      	cmp	r2, r3
 800069a:	dbf1      	blt.n	8000680 <_write+0x12>
  }
  return len;
 800069c:	687b      	ldr	r3, [r7, #4]
}
 800069e:	0018      	movs	r0, r3
 80006a0:	46bd      	mov	sp, r7
 80006a2:	b006      	add	sp, #24
 80006a4:	bd80      	pop	{r7, pc}

080006a6 <_close>:

int _close(int file)
{
 80006a6:	b580      	push	{r7, lr}
 80006a8:	b082      	sub	sp, #8
 80006aa:	af00      	add	r7, sp, #0
 80006ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80006ae:	2301      	movs	r3, #1
 80006b0:	425b      	negs	r3, r3
}
 80006b2:	0018      	movs	r0, r3
 80006b4:	46bd      	mov	sp, r7
 80006b6:	b002      	add	sp, #8
 80006b8:	bd80      	pop	{r7, pc}

080006ba <_fstat>:


int _fstat(int file, struct stat *st)
{
 80006ba:	b580      	push	{r7, lr}
 80006bc:	b082      	sub	sp, #8
 80006be:	af00      	add	r7, sp, #0
 80006c0:	6078      	str	r0, [r7, #4]
 80006c2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80006c4:	683b      	ldr	r3, [r7, #0]
 80006c6:	2280      	movs	r2, #128	; 0x80
 80006c8:	0192      	lsls	r2, r2, #6
 80006ca:	605a      	str	r2, [r3, #4]
  return 0;
 80006cc:	2300      	movs	r3, #0
}
 80006ce:	0018      	movs	r0, r3
 80006d0:	46bd      	mov	sp, r7
 80006d2:	b002      	add	sp, #8
 80006d4:	bd80      	pop	{r7, pc}

080006d6 <_isatty>:

int _isatty(int file)
{
 80006d6:	b580      	push	{r7, lr}
 80006d8:	b082      	sub	sp, #8
 80006da:	af00      	add	r7, sp, #0
 80006dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80006de:	2301      	movs	r3, #1
}
 80006e0:	0018      	movs	r0, r3
 80006e2:	46bd      	mov	sp, r7
 80006e4:	b002      	add	sp, #8
 80006e6:	bd80      	pop	{r7, pc}

080006e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b084      	sub	sp, #16
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	60f8      	str	r0, [r7, #12]
 80006f0:	60b9      	str	r1, [r7, #8]
 80006f2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80006f4:	2300      	movs	r3, #0
}
 80006f6:	0018      	movs	r0, r3
 80006f8:	46bd      	mov	sp, r7
 80006fa:	b004      	add	sp, #16
 80006fc:	bd80      	pop	{r7, pc}
	...

08000700 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b086      	sub	sp, #24
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000708:	4a14      	ldr	r2, [pc, #80]	; (800075c <_sbrk+0x5c>)
 800070a:	4b15      	ldr	r3, [pc, #84]	; (8000760 <_sbrk+0x60>)
 800070c:	1ad3      	subs	r3, r2, r3
 800070e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000710:	697b      	ldr	r3, [r7, #20]
 8000712:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000714:	4b13      	ldr	r3, [pc, #76]	; (8000764 <_sbrk+0x64>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	2b00      	cmp	r3, #0
 800071a:	d102      	bne.n	8000722 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800071c:	4b11      	ldr	r3, [pc, #68]	; (8000764 <_sbrk+0x64>)
 800071e:	4a12      	ldr	r2, [pc, #72]	; (8000768 <_sbrk+0x68>)
 8000720:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000722:	4b10      	ldr	r3, [pc, #64]	; (8000764 <_sbrk+0x64>)
 8000724:	681a      	ldr	r2, [r3, #0]
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	18d3      	adds	r3, r2, r3
 800072a:	693a      	ldr	r2, [r7, #16]
 800072c:	429a      	cmp	r2, r3
 800072e:	d207      	bcs.n	8000740 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000730:	f003 fe2c 	bl	800438c <__errno>
 8000734:	0003      	movs	r3, r0
 8000736:	220c      	movs	r2, #12
 8000738:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800073a:	2301      	movs	r3, #1
 800073c:	425b      	negs	r3, r3
 800073e:	e009      	b.n	8000754 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000740:	4b08      	ldr	r3, [pc, #32]	; (8000764 <_sbrk+0x64>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000746:	4b07      	ldr	r3, [pc, #28]	; (8000764 <_sbrk+0x64>)
 8000748:	681a      	ldr	r2, [r3, #0]
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	18d2      	adds	r2, r2, r3
 800074e:	4b05      	ldr	r3, [pc, #20]	; (8000764 <_sbrk+0x64>)
 8000750:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000752:	68fb      	ldr	r3, [r7, #12]
}
 8000754:	0018      	movs	r0, r3
 8000756:	46bd      	mov	sp, r7
 8000758:	b006      	add	sp, #24
 800075a:	bd80      	pop	{r7, pc}
 800075c:	20002000 	.word	0x20002000
 8000760:	00000400 	.word	0x00000400
 8000764:	200001a0 	.word	0x200001a0
 8000768:	20000978 	.word	0x20000978

0800076c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000770:	46c0      	nop			; (mov r8, r8)
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
	...

08000778 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000778:	480d      	ldr	r0, [pc, #52]	; (80007b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800077a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800077c:	f7ff fff6 	bl	800076c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000780:	480c      	ldr	r0, [pc, #48]	; (80007b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000782:	490d      	ldr	r1, [pc, #52]	; (80007b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000784:	4a0d      	ldr	r2, [pc, #52]	; (80007bc <LoopForever+0xe>)
  movs r3, #0
 8000786:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000788:	e002      	b.n	8000790 <LoopCopyDataInit>

0800078a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800078a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800078c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800078e:	3304      	adds	r3, #4

08000790 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000790:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000792:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000794:	d3f9      	bcc.n	800078a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000796:	4a0a      	ldr	r2, [pc, #40]	; (80007c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000798:	4c0a      	ldr	r4, [pc, #40]	; (80007c4 <LoopForever+0x16>)
  movs r3, #0
 800079a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800079c:	e001      	b.n	80007a2 <LoopFillZerobss>

0800079e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800079e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007a0:	3204      	adds	r2, #4

080007a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007a4:	d3fb      	bcc.n	800079e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80007a6:	f003 fdf7 	bl	8004398 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007aa:	f003 fde2 	bl	8004372 <main>

080007ae <LoopForever>:

LoopForever:
  b LoopForever
 80007ae:	e7fe      	b.n	80007ae <LoopForever>
  ldr   r0, =_estack
 80007b0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80007b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007b8:	20000118 	.word	0x20000118
  ldr r2, =_sidata
 80007bc:	08005940 	.word	0x08005940
  ldr r2, =_sbss
 80007c0:	20000118 	.word	0x20000118
  ldr r4, =_ebss
 80007c4:	20000978 	.word	0x20000978

080007c8 <ADC_COMP_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007c8:	e7fe      	b.n	80007c8 <ADC_COMP_IRQHandler>

080007ca <qbufferCreate>:


}

bool qbufferCreate(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length)
{
 80007ca:	b580      	push	{r7, lr}
 80007cc:	b086      	sub	sp, #24
 80007ce:	af00      	add	r7, sp, #0
 80007d0:	60f8      	str	r0, [r7, #12]
 80007d2:	60b9      	str	r1, [r7, #8]
 80007d4:	607a      	str	r2, [r7, #4]
  bool ret = true;
 80007d6:	2117      	movs	r1, #23
 80007d8:	187b      	adds	r3, r7, r1
 80007da:	2201      	movs	r2, #1
 80007dc:	701a      	strb	r2, [r3, #0]

  p_node->in    = 0;
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	2200      	movs	r2, #0
 80007e2:	601a      	str	r2, [r3, #0]
  p_node->out   = 0;
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	2200      	movs	r2, #0
 80007e8:	605a      	str	r2, [r3, #4]
  p_node->len   = length;
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	687a      	ldr	r2, [r7, #4]
 80007ee:	609a      	str	r2, [r3, #8]
  p_node->p_buf = p_buf;
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	68ba      	ldr	r2, [r7, #8]
 80007f4:	60da      	str	r2, [r3, #12]

  return ret;
 80007f6:	187b      	adds	r3, r7, r1
 80007f8:	781b      	ldrb	r3, [r3, #0]
}
 80007fa:	0018      	movs	r0, r3
 80007fc:	46bd      	mov	sp, r7
 80007fe:	b006      	add	sp, #24
 8000800:	bd80      	pop	{r7, pc}

08000802 <qbufferRead>:
    }
  }
  return ret;
}
bool qbufferRead(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 8000802:	b580      	push	{r7, lr}
 8000804:	b088      	sub	sp, #32
 8000806:	af00      	add	r7, sp, #0
 8000808:	60f8      	str	r0, [r7, #12]
 800080a:	60b9      	str	r1, [r7, #8]
 800080c:	607a      	str	r2, [r7, #4]
  bool ret = true;
 800080e:	231f      	movs	r3, #31
 8000810:	18fb      	adds	r3, r7, r3
 8000812:	2201      	movs	r2, #1
 8000814:	701a      	strb	r2, [r3, #0]

  uint8_t buf1;
  uint8_t buf2;

  for (int i=0; i<length; i++)
 8000816:	2300      	movs	r3, #0
 8000818:	61bb      	str	r3, [r7, #24]
 800081a:	e039      	b.n	8000890 <qbufferRead+0x8e>
  {
    if (p_node -> p_buf != NULL)
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	68db      	ldr	r3, [r3, #12]
 8000820:	2b00      	cmp	r3, #0
 8000822:	d019      	beq.n	8000858 <qbufferRead+0x56>
    {
      p_data[i] = p_node->p_buf[p_node->out];
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	68da      	ldr	r2, [r3, #12]
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	685b      	ldr	r3, [r3, #4]
 800082c:	18d2      	adds	r2, r2, r3
 800082e:	69bb      	ldr	r3, [r7, #24]
 8000830:	68b9      	ldr	r1, [r7, #8]
 8000832:	18cb      	adds	r3, r1, r3
 8000834:	7812      	ldrb	r2, [r2, #0]
 8000836:	701a      	strb	r2, [r3, #0]
      buf1 = p_data[i];
 8000838:	69bb      	ldr	r3, [r7, #24]
 800083a:	68ba      	ldr	r2, [r7, #8]
 800083c:	18d2      	adds	r2, r2, r3
 800083e:	2317      	movs	r3, #23
 8000840:	18fb      	adds	r3, r7, r3
 8000842:	7812      	ldrb	r2, [r2, #0]
 8000844:	701a      	strb	r2, [r3, #0]
      buf2 = p_node->p_buf[p_node->out];
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	68da      	ldr	r2, [r3, #12]
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	685b      	ldr	r3, [r3, #4]
 800084e:	18d2      	adds	r2, r2, r3
 8000850:	2316      	movs	r3, #22
 8000852:	18fb      	adds	r3, r7, r3
 8000854:	7812      	ldrb	r2, [r2, #0]
 8000856:	701a      	strb	r2, [r3, #0]
    }
    if (p_node->out != p_node->in)
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	685a      	ldr	r2, [r3, #4]
 800085c:	68fb      	ldr	r3, [r7, #12]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	429a      	cmp	r2, r3
 8000862:	d00d      	beq.n	8000880 <qbufferRead+0x7e>
    {
      p_node->out = (p_node->out + 1) %p_node->len;
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	685b      	ldr	r3, [r3, #4]
 8000868:	1c5a      	adds	r2, r3, #1
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	689b      	ldr	r3, [r3, #8]
 800086e:	0019      	movs	r1, r3
 8000870:	0010      	movs	r0, r2
 8000872:	f7ff fcd9 	bl	8000228 <__aeabi_uidivmod>
 8000876:	000b      	movs	r3, r1
 8000878:	001a      	movs	r2, r3
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	605a      	str	r2, [r3, #4]
 800087e:	e004      	b.n	800088a <qbufferRead+0x88>
    }
    else
    {
      ret = false;
 8000880:	231f      	movs	r3, #31
 8000882:	18fb      	adds	r3, r7, r3
 8000884:	2200      	movs	r2, #0
 8000886:	701a      	strb	r2, [r3, #0]
      break;
 8000888:	e006      	b.n	8000898 <qbufferRead+0x96>
  for (int i=0; i<length; i++)
 800088a:	69bb      	ldr	r3, [r7, #24]
 800088c:	3301      	adds	r3, #1
 800088e:	61bb      	str	r3, [r7, #24]
 8000890:	69bb      	ldr	r3, [r7, #24]
 8000892:	687a      	ldr	r2, [r7, #4]
 8000894:	429a      	cmp	r2, r3
 8000896:	d8c1      	bhi.n	800081c <qbufferRead+0x1a>
    }
  }
  return ret;
 8000898:	231f      	movs	r3, #31
 800089a:	18fb      	adds	r3, r7, r3
 800089c:	781b      	ldrb	r3, [r3, #0]
}
 800089e:	0018      	movs	r0, r3
 80008a0:	46bd      	mov	sp, r7
 80008a2:	b008      	add	sp, #32
 80008a4:	bd80      	pop	{r7, pc}

080008a6 <qbufferAvailable>:
uint32_t qbufferAvailable(qbuffer_t *p_node)
{
 80008a6:	b580      	push	{r7, lr}
 80008a8:	b084      	sub	sp, #16
 80008aa:	af00      	add	r7, sp, #0
 80008ac:	6078      	str	r0, [r7, #4]
  uint32_t ret;

  ret = (p_node->in - p_node->out) % p_node -> len;
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	681a      	ldr	r2, [r3, #0]
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	685b      	ldr	r3, [r3, #4]
 80008b6:	1ad2      	subs	r2, r2, r3
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	689b      	ldr	r3, [r3, #8]
 80008bc:	0019      	movs	r1, r3
 80008be:	0010      	movs	r0, r2
 80008c0:	f7ff fcb2 	bl	8000228 <__aeabi_uidivmod>
 80008c4:	000b      	movs	r3, r1
 80008c6:	60fb      	str	r3, [r7, #12]

  return ret;
 80008c8:	68fb      	ldr	r3, [r7, #12]
}
 80008ca:	0018      	movs	r0, r3
 80008cc:	46bd      	mov	sp, r7
 80008ce:	b004      	add	sp, #16
 80008d0:	bd80      	pop	{r7, pc}
	...

080008d4 <buttonInit>:
#include "button.h"



bool buttonInit(void)
{
 80008d4:	b5b0      	push	{r4, r5, r7, lr}
 80008d6:	b088      	sub	sp, #32
 80008d8:	af00      	add	r7, sp, #0
  bool ret = true;
 80008da:	251f      	movs	r5, #31
 80008dc:	197b      	adds	r3, r7, r5
 80008de:	2201      	movs	r2, #1
 80008e0:	701a      	strb	r2, [r3, #0]

  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008e2:	4b16      	ldr	r3, [pc, #88]	; (800093c <buttonInit+0x68>)
 80008e4:	695a      	ldr	r2, [r3, #20]
 80008e6:	4b15      	ldr	r3, [pc, #84]	; (800093c <buttonInit+0x68>)
 80008e8:	2180      	movs	r1, #128	; 0x80
 80008ea:	02c9      	lsls	r1, r1, #11
 80008ec:	430a      	orrs	r2, r1
 80008ee:	615a      	str	r2, [r3, #20]
 80008f0:	4b12      	ldr	r3, [pc, #72]	; (800093c <buttonInit+0x68>)
 80008f2:	695a      	ldr	r2, [r3, #20]
 80008f4:	2380      	movs	r3, #128	; 0x80
 80008f6:	02db      	lsls	r3, r3, #11
 80008f8:	4013      	ands	r3, r2
 80008fa:	607b      	str	r3, [r7, #4]
 80008fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PB8 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008fe:	2408      	movs	r4, #8
 8000900:	193b      	adds	r3, r7, r4
 8000902:	0018      	movs	r0, r3
 8000904:	2314      	movs	r3, #20
 8000906:	001a      	movs	r2, r3
 8000908:	2100      	movs	r1, #0
 800090a:	f003 fd69 	bl	80043e0 <memset>

  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800090e:	0021      	movs	r1, r4
 8000910:	187b      	adds	r3, r7, r1
 8000912:	2280      	movs	r2, #128	; 0x80
 8000914:	0052      	lsls	r2, r2, #1
 8000916:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000918:	187b      	adds	r3, r7, r1
 800091a:	2200      	movs	r2, #0
 800091c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091e:	187b      	adds	r3, r7, r1
 8000920:	2200      	movs	r2, #0
 8000922:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000924:	187b      	adds	r3, r7, r1
 8000926:	4a06      	ldr	r2, [pc, #24]	; (8000940 <buttonInit+0x6c>)
 8000928:	0019      	movs	r1, r3
 800092a:	0010      	movs	r0, r2
 800092c:	f001 fb54 	bl	8001fd8 <HAL_GPIO_Init>

  return ret;
 8000930:	197b      	adds	r3, r7, r5
 8000932:	781b      	ldrb	r3, [r3, #0]

}
 8000934:	0018      	movs	r0, r3
 8000936:	46bd      	mov	sp, r7
 8000938:	b008      	add	sp, #32
 800093a:	bdb0      	pop	{r4, r5, r7, pc}
 800093c:	40021000 	.word	0x40021000
 8000940:	48000400 	.word	0x48000400

08000944 <buttonStateCheck>:

GPIO_PinState buttonStateCheck(uint8_t ch)
{
 8000944:	b5b0      	push	{r4, r5, r7, lr}
 8000946:	b084      	sub	sp, #16
 8000948:	af00      	add	r7, sp, #0
 800094a:	0002      	movs	r2, r0
 800094c:	1dfb      	adds	r3, r7, #7
 800094e:	701a      	strb	r2, [r3, #0]
  GPIO_PinState state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8);
 8000950:	250f      	movs	r5, #15
 8000952:	197c      	adds	r4, r7, r5
 8000954:	2380      	movs	r3, #128	; 0x80
 8000956:	005b      	lsls	r3, r3, #1
 8000958:	4a06      	ldr	r2, [pc, #24]	; (8000974 <buttonStateCheck+0x30>)
 800095a:	0019      	movs	r1, r3
 800095c:	0010      	movs	r0, r2
 800095e:	f001 fd7b 	bl	8002458 <HAL_GPIO_ReadPin>
 8000962:	0003      	movs	r3, r0
 8000964:	7023      	strb	r3, [r4, #0]

  return state;
 8000966:	197b      	adds	r3, r7, r5
 8000968:	781b      	ldrb	r3, [r3, #0]
}
 800096a:	0018      	movs	r0, r3
 800096c:	46bd      	mov	sp, r7
 800096e:	b004      	add	sp, #16
 8000970:	bdb0      	pop	{r4, r5, r7, pc}
 8000972:	46c0      	nop			; (mov r8, r8)
 8000974:	48000400 	.word	0x48000400

08000978 <flashInit>:

static bool flashInSector(uint16_t sector_num, uint32_t addr, uint32_t length);


bool flashInit(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
  for (int i=0; i<FLASH_MAX_PAGE; i++)
 800097e:	2300      	movs	r3, #0
 8000980:	607b      	str	r3, [r7, #4]
 8000982:	e015      	b.n	80009b0 <flashInit+0x38>
  {
    flash_tbl[i].addr = 0x8000000 +i*1024;
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	2280      	movs	r2, #128	; 0x80
 8000988:	0292      	lsls	r2, r2, #10
 800098a:	4694      	mov	ip, r2
 800098c:	4463      	add	r3, ip
 800098e:	029b      	lsls	r3, r3, #10
 8000990:	0019      	movs	r1, r3
 8000992:	4b0b      	ldr	r3, [pc, #44]	; (80009c0 <flashInit+0x48>)
 8000994:	687a      	ldr	r2, [r7, #4]
 8000996:	00d2      	lsls	r2, r2, #3
 8000998:	50d1      	str	r1, [r2, r3]
    flash_tbl[i].length = 1024;
 800099a:	4a09      	ldr	r2, [pc, #36]	; (80009c0 <flashInit+0x48>)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	00db      	lsls	r3, r3, #3
 80009a0:	18d3      	adds	r3, r2, r3
 80009a2:	3304      	adds	r3, #4
 80009a4:	2280      	movs	r2, #128	; 0x80
 80009a6:	00d2      	lsls	r2, r2, #3
 80009a8:	801a      	strh	r2, [r3, #0]
  for (int i=0; i<FLASH_MAX_PAGE; i++)
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	3301      	adds	r3, #1
 80009ae:	607b      	str	r3, [r7, #4]
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	2b3f      	cmp	r3, #63	; 0x3f
 80009b4:	dde6      	ble.n	8000984 <flashInit+0xc>
  }

  return true;
 80009b6:	2301      	movs	r3, #1
}
 80009b8:	0018      	movs	r0, r3
 80009ba:	46bd      	mov	sp, r7
 80009bc:	b002      	add	sp, #8
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	200001a4 	.word	0x200001a4

080009c4 <ledInit>:
        {GPIOA, GPIO_PIN_4, GPIO_PIN_SET, GPIO_PIN_RESET}, //_DEF_LED3: fet output
    };


bool ledInit(void)
{
 80009c4:	b590      	push	{r4, r7, lr}
 80009c6:	b08b      	sub	sp, #44	; 0x2c
 80009c8:	af00      	add	r7, sp, #0
  bool ret = true;
 80009ca:	2323      	movs	r3, #35	; 0x23
 80009cc:	18fb      	adds	r3, r7, r3
 80009ce:	2201      	movs	r2, #1
 80009d0:	701a      	strb	r2, [r3, #0]


  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d2:	4b2a      	ldr	r3, [pc, #168]	; (8000a7c <ledInit+0xb8>)
 80009d4:	695a      	ldr	r2, [r3, #20]
 80009d6:	4b29      	ldr	r3, [pc, #164]	; (8000a7c <ledInit+0xb8>)
 80009d8:	2180      	movs	r1, #128	; 0x80
 80009da:	0289      	lsls	r1, r1, #10
 80009dc:	430a      	orrs	r2, r1
 80009de:	615a      	str	r2, [r3, #20]
 80009e0:	4b26      	ldr	r3, [pc, #152]	; (8000a7c <ledInit+0xb8>)
 80009e2:	695a      	ldr	r2, [r3, #20]
 80009e4:	2380      	movs	r3, #128	; 0x80
 80009e6:	029b      	lsls	r3, r3, #10
 80009e8:	4013      	ands	r3, r2
 80009ea:	60bb      	str	r3, [r7, #8]
 80009ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ee:	4b23      	ldr	r3, [pc, #140]	; (8000a7c <ledInit+0xb8>)
 80009f0:	695a      	ldr	r2, [r3, #20]
 80009f2:	4b22      	ldr	r3, [pc, #136]	; (8000a7c <ledInit+0xb8>)
 80009f4:	2180      	movs	r1, #128	; 0x80
 80009f6:	02c9      	lsls	r1, r1, #11
 80009f8:	430a      	orrs	r2, r1
 80009fa:	615a      	str	r2, [r3, #20]
 80009fc:	4b1f      	ldr	r3, [pc, #124]	; (8000a7c <ledInit+0xb8>)
 80009fe:	695a      	ldr	r2, [r3, #20]
 8000a00:	2380      	movs	r3, #128	; 0x80
 8000a02:	02db      	lsls	r3, r3, #11
 8000a04:	4013      	ands	r3, r2
 8000a06:	607b      	str	r3, [r7, #4]
 8000a08:	687b      	ldr	r3, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a0a:	240c      	movs	r4, #12
 8000a0c:	193b      	adds	r3, r7, r4
 8000a0e:	0018      	movs	r0, r3
 8000a10:	2314      	movs	r3, #20
 8000a12:	001a      	movs	r2, r3
 8000a14:	2100      	movs	r1, #0
 8000a16:	f003 fce3 	bl	80043e0 <memset>

  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a1a:	193b      	adds	r3, r7, r4
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	193b      	adds	r3, r7, r4
 8000a22:	2200      	movs	r2, #0
 8000a24:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a26:	193b      	adds	r3, r7, r4
 8000a28:	2200      	movs	r2, #0
 8000a2a:	60da      	str	r2, [r3, #12]


  for (int i = 0; i<LED_MAX_CH; i++)
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	627b      	str	r3, [r7, #36]	; 0x24
 8000a30:	e01a      	b.n	8000a68 <ledInit+0xa4>
  {
    GPIO_InitStruct.Pin = led_tbl[i].pin;
 8000a32:	4a13      	ldr	r2, [pc, #76]	; (8000a80 <ledInit+0xbc>)
 8000a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a36:	00db      	lsls	r3, r3, #3
 8000a38:	18d3      	adds	r3, r2, r3
 8000a3a:	3304      	adds	r3, #4
 8000a3c:	881b      	ldrh	r3, [r3, #0]
 8000a3e:	001a      	movs	r2, r3
 8000a40:	210c      	movs	r1, #12
 8000a42:	187b      	adds	r3, r7, r1
 8000a44:	601a      	str	r2, [r3, #0]
    HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 8000a46:	4b0e      	ldr	r3, [pc, #56]	; (8000a80 <ledInit+0xbc>)
 8000a48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a4a:	00d2      	lsls	r2, r2, #3
 8000a4c:	58d3      	ldr	r3, [r2, r3]
 8000a4e:	187a      	adds	r2, r7, r1
 8000a50:	0011      	movs	r1, r2
 8000a52:	0018      	movs	r0, r3
 8000a54:	f001 fac0 	bl	8001fd8 <HAL_GPIO_Init>

    ledOff(i);
 8000a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a5a:	b2db      	uxtb	r3, r3
 8000a5c:	0018      	movs	r0, r3
 8000a5e:	f000 f811 	bl	8000a84 <ledOff>
  for (int i = 0; i<LED_MAX_CH; i++)
 8000a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a64:	3301      	adds	r3, #1
 8000a66:	627b      	str	r3, [r7, #36]	; 0x24
 8000a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a6a:	2b02      	cmp	r3, #2
 8000a6c:	dde1      	ble.n	8000a32 <ledInit+0x6e>
  }

  return ret;
 8000a6e:	2323      	movs	r3, #35	; 0x23
 8000a70:	18fb      	adds	r3, r7, r3
 8000a72:	781b      	ldrb	r3, [r3, #0]
}
 8000a74:	0018      	movs	r0, r3
 8000a76:	46bd      	mov	sp, r7
 8000a78:	b00b      	add	sp, #44	; 0x2c
 8000a7a:	bd90      	pop	{r4, r7, pc}
 8000a7c:	40021000 	.word	0x40021000
 8000a80:	2000006c 	.word	0x2000006c

08000a84 <ledOff>:

  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].on_state);
}

void ledOff(uint8_t ch)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	0002      	movs	r2, r0
 8000a8c:	1dfb      	adds	r3, r7, #7
 8000a8e:	701a      	strb	r2, [r3, #0]
  if (ch >= LED_MAX_CH) return;
 8000a90:	1dfb      	adds	r3, r7, #7
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	2b02      	cmp	r3, #2
 8000a96:	d816      	bhi.n	8000ac6 <ledOff+0x42>

  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 8000a98:	1dfb      	adds	r3, r7, #7
 8000a9a:	781a      	ldrb	r2, [r3, #0]
 8000a9c:	4b0c      	ldr	r3, [pc, #48]	; (8000ad0 <ledOff+0x4c>)
 8000a9e:	00d2      	lsls	r2, r2, #3
 8000aa0:	58d0      	ldr	r0, [r2, r3]
 8000aa2:	1dfb      	adds	r3, r7, #7
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	4a0a      	ldr	r2, [pc, #40]	; (8000ad0 <ledOff+0x4c>)
 8000aa8:	00db      	lsls	r3, r3, #3
 8000aaa:	18d3      	adds	r3, r2, r3
 8000aac:	3304      	adds	r3, #4
 8000aae:	8819      	ldrh	r1, [r3, #0]
 8000ab0:	1dfb      	adds	r3, r7, #7
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	4a06      	ldr	r2, [pc, #24]	; (8000ad0 <ledOff+0x4c>)
 8000ab6:	00db      	lsls	r3, r3, #3
 8000ab8:	18d3      	adds	r3, r2, r3
 8000aba:	3307      	adds	r3, #7
 8000abc:	781b      	ldrb	r3, [r3, #0]
 8000abe:	001a      	movs	r2, r3
 8000ac0:	f001 fce7 	bl	8002492 <HAL_GPIO_WritePin>
 8000ac4:	e000      	b.n	8000ac8 <ledOff+0x44>
  if (ch >= LED_MAX_CH) return;
 8000ac6:	46c0      	nop			; (mov r8, r8)
}
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	b002      	add	sp, #8
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	46c0      	nop			; (mov r8, r8)
 8000ad0:	2000006c 	.word	0x2000006c

08000ad4 <ledToggle>:

void ledToggle(uint8_t ch)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	0002      	movs	r2, r0
 8000adc:	1dfb      	adds	r3, r7, #7
 8000ade:	701a      	strb	r2, [r3, #0]
  if (ch >= LED_MAX_CH) return;
 8000ae0:	1dfb      	adds	r3, r7, #7
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	2b02      	cmp	r3, #2
 8000ae6:	d80f      	bhi.n	8000b08 <ledToggle+0x34>

  HAL_GPIO_TogglePin(led_tbl[ch].port, led_tbl[ch].pin);
 8000ae8:	1dfb      	adds	r3, r7, #7
 8000aea:	781a      	ldrb	r2, [r3, #0]
 8000aec:	4b08      	ldr	r3, [pc, #32]	; (8000b10 <ledToggle+0x3c>)
 8000aee:	00d2      	lsls	r2, r2, #3
 8000af0:	58d0      	ldr	r0, [r2, r3]
 8000af2:	1dfb      	adds	r3, r7, #7
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	4a06      	ldr	r2, [pc, #24]	; (8000b10 <ledToggle+0x3c>)
 8000af8:	00db      	lsls	r3, r3, #3
 8000afa:	18d3      	adds	r3, r2, r3
 8000afc:	3304      	adds	r3, #4
 8000afe:	881b      	ldrh	r3, [r3, #0]
 8000b00:	0019      	movs	r1, r3
 8000b02:	f001 fce3 	bl	80024cc <HAL_GPIO_TogglePin>
 8000b06:	e000      	b.n	8000b0a <ledToggle+0x36>
  if (ch >= LED_MAX_CH) return;
 8000b08:	46c0      	nop			; (mov r8, r8)
}
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	b002      	add	sp, #8
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	2000006c 	.word	0x2000006c

08000b14 <uartInit>:
DMA_HandleTypeDef hdma_usart1_rx;
DMA_HandleTypeDef hdma_usart2_rx;


bool uartInit(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
  for (int i=0; i<UART_MAX_CH; i++)
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	607b      	str	r3, [r7, #4]
 8000b1e:	e007      	b.n	8000b30 <uartInit+0x1c>
    {
      is_open[i] = false;
 8000b20:	4a07      	ldr	r2, [pc, #28]	; (8000b40 <uartInit+0x2c>)
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	18d3      	adds	r3, r2, r3
 8000b26:	2200      	movs	r2, #0
 8000b28:	701a      	strb	r2, [r3, #0]
  for (int i=0; i<UART_MAX_CH; i++)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	3301      	adds	r3, #1
 8000b2e:	607b      	str	r3, [r7, #4]
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	2b01      	cmp	r3, #1
 8000b34:	ddf4      	ble.n	8000b20 <uartInit+0xc>
    }
  return true;
 8000b36:	2301      	movs	r3, #1
}
 8000b38:	0018      	movs	r0, r3
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	b002      	add	sp, #8
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	200003a4 	.word	0x200003a4

08000b44 <uartOpen>:

bool uartOpen(uint8_t ch)
{
 8000b44:	b590      	push	{r4, r7, lr}
 8000b46:	b087      	sub	sp, #28
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	0002      	movs	r2, r0
 8000b4c:	1dfb      	adds	r3, r7, #7
 8000b4e:	701a      	strb	r2, [r3, #0]
  bool ret = false;
 8000b50:	2317      	movs	r3, #23
 8000b52:	18fb      	adds	r3, r7, r3
 8000b54:	2200      	movs	r2, #0
 8000b56:	701a      	strb	r2, [r3, #0]


  switch(ch)
 8000b58:	1dfb      	adds	r3, r7, #7
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d003      	beq.n	8000b68 <uartOpen+0x24>
 8000b60:	2b01      	cmp	r3, #1
 8000b62:	d100      	bne.n	8000b66 <uartOpen+0x22>
 8000b64:	e0a3      	b.n	8000cae <uartOpen+0x16a>
 8000b66:	e145      	b.n	8000df4 <uartOpen+0x2b0>
  {
    case _DEF_UART1:


      huart1.Instance                    = USART1;
 8000b68:	4ba6      	ldr	r3, [pc, #664]	; (8000e04 <uartOpen+0x2c0>)
 8000b6a:	4aa7      	ldr	r2, [pc, #668]	; (8000e08 <uartOpen+0x2c4>)
 8000b6c:	601a      	str	r2, [r3, #0]
      huart1.Init.Mode                   = UART_MODE_TX_RX;
 8000b6e:	4ba5      	ldr	r3, [pc, #660]	; (8000e04 <uartOpen+0x2c0>)
 8000b70:	220c      	movs	r2, #12
 8000b72:	615a      	str	r2, [r3, #20]
      huart1.Init.OverSampling           = UART_OVERSAMPLING_16;
 8000b74:	4ba3      	ldr	r3, [pc, #652]	; (8000e04 <uartOpen+0x2c0>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	61da      	str	r2, [r3, #28]
      huart1.Init.OneBitSampling         = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b7a:	4ba2      	ldr	r3, [pc, #648]	; (8000e04 <uartOpen+0x2c0>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	621a      	str	r2, [r3, #32]
      huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b80:	4ba0      	ldr	r3, [pc, #640]	; (8000e04 <uartOpen+0x2c0>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	625a      	str	r2, [r3, #36]	; 0x24

      huart1.Init.BaudRate               = uart_tbl[ch].baudrate;
 8000b86:	1dfb      	adds	r3, r7, #7
 8000b88:	781a      	ldrb	r2, [r3, #0]
 8000b8a:	49a0      	ldr	r1, [pc, #640]	; (8000e0c <uartOpen+0x2c8>)
 8000b8c:	0013      	movs	r3, r2
 8000b8e:	009b      	lsls	r3, r3, #2
 8000b90:	189b      	adds	r3, r3, r2
 8000b92:	009b      	lsls	r3, r3, #2
 8000b94:	585a      	ldr	r2, [r3, r1]
 8000b96:	4b9b      	ldr	r3, [pc, #620]	; (8000e04 <uartOpen+0x2c0>)
 8000b98:	605a      	str	r2, [r3, #4]
      huart1.Init.WordLength             = uart_tbl[ch].databit;
 8000b9a:	1dfb      	adds	r3, r7, #7
 8000b9c:	781a      	ldrb	r2, [r3, #0]
 8000b9e:	499b      	ldr	r1, [pc, #620]	; (8000e0c <uartOpen+0x2c8>)
 8000ba0:	0013      	movs	r3, r2
 8000ba2:	009b      	lsls	r3, r3, #2
 8000ba4:	189b      	adds	r3, r3, r2
 8000ba6:	009b      	lsls	r3, r3, #2
 8000ba8:	18cb      	adds	r3, r1, r3
 8000baa:	3304      	adds	r3, #4
 8000bac:	681a      	ldr	r2, [r3, #0]
 8000bae:	4b95      	ldr	r3, [pc, #596]	; (8000e04 <uartOpen+0x2c0>)
 8000bb0:	609a      	str	r2, [r3, #8]
      huart1.Init.StopBits               = uart_tbl[ch].stopbit;
 8000bb2:	1dfb      	adds	r3, r7, #7
 8000bb4:	781a      	ldrb	r2, [r3, #0]
 8000bb6:	4995      	ldr	r1, [pc, #596]	; (8000e0c <uartOpen+0x2c8>)
 8000bb8:	0013      	movs	r3, r2
 8000bba:	009b      	lsls	r3, r3, #2
 8000bbc:	189b      	adds	r3, r3, r2
 8000bbe:	009b      	lsls	r3, r3, #2
 8000bc0:	18cb      	adds	r3, r1, r3
 8000bc2:	3308      	adds	r3, #8
 8000bc4:	681a      	ldr	r2, [r3, #0]
 8000bc6:	4b8f      	ldr	r3, [pc, #572]	; (8000e04 <uartOpen+0x2c0>)
 8000bc8:	60da      	str	r2, [r3, #12]
      huart1.Init.Parity                 = uart_tbl[ch].parity;
 8000bca:	1dfb      	adds	r3, r7, #7
 8000bcc:	781a      	ldrb	r2, [r3, #0]
 8000bce:	498f      	ldr	r1, [pc, #572]	; (8000e0c <uartOpen+0x2c8>)
 8000bd0:	0013      	movs	r3, r2
 8000bd2:	009b      	lsls	r3, r3, #2
 8000bd4:	189b      	adds	r3, r3, r2
 8000bd6:	009b      	lsls	r3, r3, #2
 8000bd8:	18cb      	adds	r3, r1, r3
 8000bda:	330c      	adds	r3, #12
 8000bdc:	681a      	ldr	r2, [r3, #0]
 8000bde:	4b89      	ldr	r3, [pc, #548]	; (8000e04 <uartOpen+0x2c0>)
 8000be0:	611a      	str	r2, [r3, #16]
      huart1.Init.HwFlowCtl              = uart_tbl[ch].flowCtl;
 8000be2:	1dfb      	adds	r3, r7, #7
 8000be4:	781a      	ldrb	r2, [r3, #0]
 8000be6:	4989      	ldr	r1, [pc, #548]	; (8000e0c <uartOpen+0x2c8>)
 8000be8:	0013      	movs	r3, r2
 8000bea:	009b      	lsls	r3, r3, #2
 8000bec:	189b      	adds	r3, r3, r2
 8000bee:	009b      	lsls	r3, r3, #2
 8000bf0:	18cb      	adds	r3, r1, r3
 8000bf2:	3310      	adds	r3, #16
 8000bf4:	681a      	ldr	r2, [r3, #0]
 8000bf6:	4b83      	ldr	r3, [pc, #524]	; (8000e04 <uartOpen+0x2c0>)
 8000bf8:	619a      	str	r2, [r3, #24]

      qbufferCreate(&qbuffer[ch], &rx_buf[0], 256);
 8000bfa:	1dfb      	adds	r3, r7, #7
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	011a      	lsls	r2, r3, #4
 8000c00:	4b83      	ldr	r3, [pc, #524]	; (8000e10 <uartOpen+0x2cc>)
 8000c02:	18d3      	adds	r3, r2, r3
 8000c04:	2280      	movs	r2, #128	; 0x80
 8000c06:	0052      	lsls	r2, r2, #1
 8000c08:	4982      	ldr	r1, [pc, #520]	; (8000e14 <uartOpen+0x2d0>)
 8000c0a:	0018      	movs	r0, r3
 8000c0c:	f7ff fddd 	bl	80007ca <qbufferCreate>

      HAL_UART_DeInit(&huart1);
 8000c10:	4b7c      	ldr	r3, [pc, #496]	; (8000e04 <uartOpen+0x2c0>)
 8000c12:	0018      	movs	r0, r3
 8000c14:	f002 fa06 	bl	8003024 <HAL_UART_DeInit>

      __HAL_RCC_DMA1_CLK_ENABLE();
 8000c18:	4b7f      	ldr	r3, [pc, #508]	; (8000e18 <uartOpen+0x2d4>)
 8000c1a:	695a      	ldr	r2, [r3, #20]
 8000c1c:	4b7e      	ldr	r3, [pc, #504]	; (8000e18 <uartOpen+0x2d4>)
 8000c1e:	2101      	movs	r1, #1
 8000c20:	430a      	orrs	r2, r1
 8000c22:	615a      	str	r2, [r3, #20]
 8000c24:	4b7c      	ldr	r3, [pc, #496]	; (8000e18 <uartOpen+0x2d4>)
 8000c26:	695b      	ldr	r3, [r3, #20]
 8000c28:	2201      	movs	r2, #1
 8000c2a:	4013      	ands	r3, r2
 8000c2c:	613b      	str	r3, [r7, #16]
 8000c2e:	693b      	ldr	r3, [r7, #16]
      HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000c30:	2200      	movs	r2, #0
 8000c32:	2100      	movs	r1, #0
 8000c34:	200a      	movs	r0, #10
 8000c36:	f000 ffd1 	bl	8001bdc <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000c3a:	200a      	movs	r0, #10
 8000c3c:	f000 ffe3 	bl	8001c06 <HAL_NVIC_EnableIRQ>

      if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c40:	4b70      	ldr	r3, [pc, #448]	; (8000e04 <uartOpen+0x2c0>)
 8000c42:	0018      	movs	r0, r3
 8000c44:	f002 f99a 	bl	8002f7c <HAL_UART_Init>
 8000c48:	1e03      	subs	r3, r0, #0
 8000c4a:	d004      	beq.n	8000c56 <uartOpen+0x112>
      {
        ret = false;
 8000c4c:	2317      	movs	r3, #23
 8000c4e:	18fb      	adds	r3, r7, r3
 8000c50:	2200      	movs	r2, #0
 8000c52:	701a      	strb	r2, [r3, #0]
        __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);

        qbuffer[ch].in = 0;
        qbuffer[ch].out = 0;
      }
      break;
 8000c54:	e0ce      	b.n	8000df4 <uartOpen+0x2b0>
        ret = true;
 8000c56:	2417      	movs	r4, #23
 8000c58:	193b      	adds	r3, r7, r4
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	701a      	strb	r2, [r3, #0]
        is_open[ch] = true;
 8000c5e:	1dfb      	adds	r3, r7, #7
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	4a6e      	ldr	r2, [pc, #440]	; (8000e1c <uartOpen+0x2d8>)
 8000c64:	2101      	movs	r1, #1
 8000c66:	54d1      	strb	r1, [r2, r3]
        if(HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t *)&rx_buf[0], 256) != HAL_OK)
 8000c68:	2380      	movs	r3, #128	; 0x80
 8000c6a:	005a      	lsls	r2, r3, #1
 8000c6c:	4969      	ldr	r1, [pc, #420]	; (8000e14 <uartOpen+0x2d0>)
 8000c6e:	4b65      	ldr	r3, [pc, #404]	; (8000e04 <uartOpen+0x2c0>)
 8000c70:	0018      	movs	r0, r3
 8000c72:	f003 fb16 	bl	80042a2 <HAL_UARTEx_ReceiveToIdle_DMA>
 8000c76:	1e03      	subs	r3, r0, #0
 8000c78:	d002      	beq.n	8000c80 <uartOpen+0x13c>
            ret = false;
 8000c7a:	193b      	adds	r3, r7, r4
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	701a      	strb	r2, [r3, #0]
        __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8000c80:	4b67      	ldr	r3, [pc, #412]	; (8000e20 <uartOpen+0x2dc>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	681a      	ldr	r2, [r3, #0]
 8000c86:	4b66      	ldr	r3, [pc, #408]	; (8000e20 <uartOpen+0x2dc>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	2104      	movs	r1, #4
 8000c8c:	438a      	bics	r2, r1
 8000c8e:	601a      	str	r2, [r3, #0]
        qbuffer[ch].in = 0;
 8000c90:	1dfb      	adds	r3, r7, #7
 8000c92:	781a      	ldrb	r2, [r3, #0]
 8000c94:	4b5e      	ldr	r3, [pc, #376]	; (8000e10 <uartOpen+0x2cc>)
 8000c96:	0112      	lsls	r2, r2, #4
 8000c98:	2100      	movs	r1, #0
 8000c9a:	50d1      	str	r1, [r2, r3]
        qbuffer[ch].out = 0;
 8000c9c:	1dfb      	adds	r3, r7, #7
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	4a5b      	ldr	r2, [pc, #364]	; (8000e10 <uartOpen+0x2cc>)
 8000ca2:	011b      	lsls	r3, r3, #4
 8000ca4:	18d3      	adds	r3, r2, r3
 8000ca6:	3304      	adds	r3, #4
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
      break;
 8000cac:	e0a2      	b.n	8000df4 <uartOpen+0x2b0>

    case _DEF_UART2:
      huart2.Instance                    = USART2;
 8000cae:	4b5d      	ldr	r3, [pc, #372]	; (8000e24 <uartOpen+0x2e0>)
 8000cb0:	4a5d      	ldr	r2, [pc, #372]	; (8000e28 <uartOpen+0x2e4>)
 8000cb2:	601a      	str	r2, [r3, #0]
      huart2.Init.Mode                   = UART_MODE_TX_RX;
 8000cb4:	4b5b      	ldr	r3, [pc, #364]	; (8000e24 <uartOpen+0x2e0>)
 8000cb6:	220c      	movs	r2, #12
 8000cb8:	615a      	str	r2, [r3, #20]
      huart2.Init.OverSampling           = UART_OVERSAMPLING_16;
 8000cba:	4b5a      	ldr	r3, [pc, #360]	; (8000e24 <uartOpen+0x2e0>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	61da      	str	r2, [r3, #28]
      huart2.Init.OneBitSampling         = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cc0:	4b58      	ldr	r3, [pc, #352]	; (8000e24 <uartOpen+0x2e0>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	621a      	str	r2, [r3, #32]
      huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cc6:	4b57      	ldr	r3, [pc, #348]	; (8000e24 <uartOpen+0x2e0>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	625a      	str	r2, [r3, #36]	; 0x24

      huart2.Init.BaudRate               = uart_tbl[ch].baudrate;
 8000ccc:	1dfb      	adds	r3, r7, #7
 8000cce:	781a      	ldrb	r2, [r3, #0]
 8000cd0:	494e      	ldr	r1, [pc, #312]	; (8000e0c <uartOpen+0x2c8>)
 8000cd2:	0013      	movs	r3, r2
 8000cd4:	009b      	lsls	r3, r3, #2
 8000cd6:	189b      	adds	r3, r3, r2
 8000cd8:	009b      	lsls	r3, r3, #2
 8000cda:	585a      	ldr	r2, [r3, r1]
 8000cdc:	4b51      	ldr	r3, [pc, #324]	; (8000e24 <uartOpen+0x2e0>)
 8000cde:	605a      	str	r2, [r3, #4]
      huart2.Init.WordLength             = uart_tbl[ch].databit;
 8000ce0:	1dfb      	adds	r3, r7, #7
 8000ce2:	781a      	ldrb	r2, [r3, #0]
 8000ce4:	4949      	ldr	r1, [pc, #292]	; (8000e0c <uartOpen+0x2c8>)
 8000ce6:	0013      	movs	r3, r2
 8000ce8:	009b      	lsls	r3, r3, #2
 8000cea:	189b      	adds	r3, r3, r2
 8000cec:	009b      	lsls	r3, r3, #2
 8000cee:	18cb      	adds	r3, r1, r3
 8000cf0:	3304      	adds	r3, #4
 8000cf2:	681a      	ldr	r2, [r3, #0]
 8000cf4:	4b4b      	ldr	r3, [pc, #300]	; (8000e24 <uartOpen+0x2e0>)
 8000cf6:	609a      	str	r2, [r3, #8]
      huart2.Init.StopBits               = uart_tbl[ch].stopbit;
 8000cf8:	1dfb      	adds	r3, r7, #7
 8000cfa:	781a      	ldrb	r2, [r3, #0]
 8000cfc:	4943      	ldr	r1, [pc, #268]	; (8000e0c <uartOpen+0x2c8>)
 8000cfe:	0013      	movs	r3, r2
 8000d00:	009b      	lsls	r3, r3, #2
 8000d02:	189b      	adds	r3, r3, r2
 8000d04:	009b      	lsls	r3, r3, #2
 8000d06:	18cb      	adds	r3, r1, r3
 8000d08:	3308      	adds	r3, #8
 8000d0a:	681a      	ldr	r2, [r3, #0]
 8000d0c:	4b45      	ldr	r3, [pc, #276]	; (8000e24 <uartOpen+0x2e0>)
 8000d0e:	60da      	str	r2, [r3, #12]
      huart2.Init.Parity                 = uart_tbl[ch].parity;
 8000d10:	1dfb      	adds	r3, r7, #7
 8000d12:	781a      	ldrb	r2, [r3, #0]
 8000d14:	493d      	ldr	r1, [pc, #244]	; (8000e0c <uartOpen+0x2c8>)
 8000d16:	0013      	movs	r3, r2
 8000d18:	009b      	lsls	r3, r3, #2
 8000d1a:	189b      	adds	r3, r3, r2
 8000d1c:	009b      	lsls	r3, r3, #2
 8000d1e:	18cb      	adds	r3, r1, r3
 8000d20:	330c      	adds	r3, #12
 8000d22:	681a      	ldr	r2, [r3, #0]
 8000d24:	4b3f      	ldr	r3, [pc, #252]	; (8000e24 <uartOpen+0x2e0>)
 8000d26:	611a      	str	r2, [r3, #16]
      huart2.Init.HwFlowCtl              = uart_tbl[ch].flowCtl;
 8000d28:	1dfb      	adds	r3, r7, #7
 8000d2a:	781a      	ldrb	r2, [r3, #0]
 8000d2c:	4937      	ldr	r1, [pc, #220]	; (8000e0c <uartOpen+0x2c8>)
 8000d2e:	0013      	movs	r3, r2
 8000d30:	009b      	lsls	r3, r3, #2
 8000d32:	189b      	adds	r3, r3, r2
 8000d34:	009b      	lsls	r3, r3, #2
 8000d36:	18cb      	adds	r3, r1, r3
 8000d38:	3310      	adds	r3, #16
 8000d3a:	681a      	ldr	r2, [r3, #0]
 8000d3c:	4b39      	ldr	r3, [pc, #228]	; (8000e24 <uartOpen+0x2e0>)
 8000d3e:	619a      	str	r2, [r3, #24]

      qbufferCreate(&qbuffer[ch], &rx_buf[0], 256);
 8000d40:	1dfb      	adds	r3, r7, #7
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	011a      	lsls	r2, r3, #4
 8000d46:	4b32      	ldr	r3, [pc, #200]	; (8000e10 <uartOpen+0x2cc>)
 8000d48:	18d3      	adds	r3, r2, r3
 8000d4a:	2280      	movs	r2, #128	; 0x80
 8000d4c:	0052      	lsls	r2, r2, #1
 8000d4e:	4931      	ldr	r1, [pc, #196]	; (8000e14 <uartOpen+0x2d0>)
 8000d50:	0018      	movs	r0, r3
 8000d52:	f7ff fd3a 	bl	80007ca <qbufferCreate>

      HAL_UART_DeInit(&huart2);
 8000d56:	4b33      	ldr	r3, [pc, #204]	; (8000e24 <uartOpen+0x2e0>)
 8000d58:	0018      	movs	r0, r3
 8000d5a:	f002 f963 	bl	8003024 <HAL_UART_DeInit>

      __HAL_RCC_DMA1_CLK_ENABLE();
 8000d5e:	4b2e      	ldr	r3, [pc, #184]	; (8000e18 <uartOpen+0x2d4>)
 8000d60:	695a      	ldr	r2, [r3, #20]
 8000d62:	4b2d      	ldr	r3, [pc, #180]	; (8000e18 <uartOpen+0x2d4>)
 8000d64:	2101      	movs	r1, #1
 8000d66:	430a      	orrs	r2, r1
 8000d68:	615a      	str	r2, [r3, #20]
 8000d6a:	4b2b      	ldr	r3, [pc, #172]	; (8000e18 <uartOpen+0x2d4>)
 8000d6c:	695b      	ldr	r3, [r3, #20]
 8000d6e:	2201      	movs	r2, #1
 8000d70:	4013      	ands	r3, r2
 8000d72:	60fb      	str	r3, [r7, #12]
 8000d74:	68fb      	ldr	r3, [r7, #12]
      HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 8000d76:	2200      	movs	r2, #0
 8000d78:	2100      	movs	r1, #0
 8000d7a:	200b      	movs	r0, #11
 8000d7c:	f000 ff2e 	bl	8001bdc <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 8000d80:	200b      	movs	r0, #11
 8000d82:	f000 ff40 	bl	8001c06 <HAL_NVIC_EnableIRQ>

      if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d86:	4b27      	ldr	r3, [pc, #156]	; (8000e24 <uartOpen+0x2e0>)
 8000d88:	0018      	movs	r0, r3
 8000d8a:	f002 f8f7 	bl	8002f7c <HAL_UART_Init>
 8000d8e:	1e03      	subs	r3, r0, #0
 8000d90:	d004      	beq.n	8000d9c <uartOpen+0x258>
      {
        ret = false;
 8000d92:	2317      	movs	r3, #23
 8000d94:	18fb      	adds	r3, r7, r3
 8000d96:	2200      	movs	r2, #0
 8000d98:	701a      	strb	r2, [r3, #0]
        __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);

        qbuffer[ch].in = 0;
        qbuffer[ch].out = 0;
      }
      break;
 8000d9a:	e02a      	b.n	8000df2 <uartOpen+0x2ae>
        ret = true;
 8000d9c:	2417      	movs	r4, #23
 8000d9e:	193b      	adds	r3, r7, r4
 8000da0:	2201      	movs	r2, #1
 8000da2:	701a      	strb	r2, [r3, #0]
        is_open[ch] = true;
 8000da4:	1dfb      	adds	r3, r7, #7
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	4a1c      	ldr	r2, [pc, #112]	; (8000e1c <uartOpen+0x2d8>)
 8000daa:	2101      	movs	r1, #1
 8000dac:	54d1      	strb	r1, [r2, r3]
        if(HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *)&rx_buf[0], 256) != HAL_OK)
 8000dae:	2380      	movs	r3, #128	; 0x80
 8000db0:	005a      	lsls	r2, r3, #1
 8000db2:	4918      	ldr	r1, [pc, #96]	; (8000e14 <uartOpen+0x2d0>)
 8000db4:	4b1b      	ldr	r3, [pc, #108]	; (8000e24 <uartOpen+0x2e0>)
 8000db6:	0018      	movs	r0, r3
 8000db8:	f003 fa73 	bl	80042a2 <HAL_UARTEx_ReceiveToIdle_DMA>
 8000dbc:	1e03      	subs	r3, r0, #0
 8000dbe:	d002      	beq.n	8000dc6 <uartOpen+0x282>
            ret = false;
 8000dc0:	193b      	adds	r3, r7, r4
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	701a      	strb	r2, [r3, #0]
        __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8000dc6:	4b19      	ldr	r3, [pc, #100]	; (8000e2c <uartOpen+0x2e8>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	681a      	ldr	r2, [r3, #0]
 8000dcc:	4b17      	ldr	r3, [pc, #92]	; (8000e2c <uartOpen+0x2e8>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	2104      	movs	r1, #4
 8000dd2:	438a      	bics	r2, r1
 8000dd4:	601a      	str	r2, [r3, #0]
        qbuffer[ch].in = 0;
 8000dd6:	1dfb      	adds	r3, r7, #7
 8000dd8:	781a      	ldrb	r2, [r3, #0]
 8000dda:	4b0d      	ldr	r3, [pc, #52]	; (8000e10 <uartOpen+0x2cc>)
 8000ddc:	0112      	lsls	r2, r2, #4
 8000dde:	2100      	movs	r1, #0
 8000de0:	50d1      	str	r1, [r2, r3]
        qbuffer[ch].out = 0;
 8000de2:	1dfb      	adds	r3, r7, #7
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	4a0a      	ldr	r2, [pc, #40]	; (8000e10 <uartOpen+0x2cc>)
 8000de8:	011b      	lsls	r3, r3, #4
 8000dea:	18d3      	adds	r3, r2, r3
 8000dec:	3304      	adds	r3, #4
 8000dee:	2200      	movs	r2, #0
 8000df0:	601a      	str	r2, [r3, #0]
      break;
 8000df2:	46c0      	nop			; (mov r8, r8)

  }

  return ret;
 8000df4:	2317      	movs	r3, #23
 8000df6:	18fb      	adds	r3, r7, r3
 8000df8:	781b      	ldrb	r3, [r3, #0]
}
 8000dfa:	0018      	movs	r0, r3
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	b007      	add	sp, #28
 8000e00:	bd90      	pop	{r4, r7, pc}
 8000e02:	46c0      	nop			; (mov r8, r8)
 8000e04:	200004cc 	.word	0x200004cc
 8000e08:	40013800 	.word	0x40013800
 8000e0c:	20000084 	.word	0x20000084
 8000e10:	200003a8 	.word	0x200003a8
 8000e14:	200003c8 	.word	0x200003c8
 8000e18:	40021000 	.word	0x40021000
 8000e1c:	200003a4 	.word	0x200003a4
 8000e20:	200005dc 	.word	0x200005dc
 8000e24:	20000554 	.word	0x20000554
 8000e28:	40004400 	.word	0x40004400
 8000e2c:	20000620 	.word	0x20000620

08000e30 <uartAvailable>:

uint32_t uartAvailable(uint8_t ch)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b084      	sub	sp, #16
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	0002      	movs	r2, r0
 8000e38:	1dfb      	adds	r3, r7, #7
 8000e3a:	701a      	strb	r2, [r3, #0]
  uint32_t ret = 0;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	60fb      	str	r3, [r7, #12]
  if(available_flag)
 8000e40:	4b1b      	ldr	r3, [pc, #108]	; (8000eb0 <uartAvailable+0x80>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d028      	beq.n	8000e9a <uartAvailable+0x6a>
  {
    switch(ch)
 8000e48:	1dfb      	adds	r3, r7, #7
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d002      	beq.n	8000e56 <uartAvailable+0x26>
 8000e50:	2b01      	cmp	r3, #1
 8000e52:	d011      	beq.n	8000e78 <uartAvailable+0x48>
 8000e54:	e026      	b.n	8000ea4 <uartAvailable+0x74>
    {
      case _DEF_UART1:
          ret= qbufferAvailable(&qbuffer[ch]);
 8000e56:	1dfb      	adds	r3, r7, #7
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	011a      	lsls	r2, r3, #4
 8000e5c:	4b15      	ldr	r3, [pc, #84]	; (8000eb4 <uartAvailable+0x84>)
 8000e5e:	18d3      	adds	r3, r2, r3
 8000e60:	0018      	movs	r0, r3
 8000e62:	f7ff fd20 	bl	80008a6 <qbufferAvailable>
 8000e66:	0003      	movs	r3, r0
 8000e68:	60fb      	str	r3, [r7, #12]
          if(ret == 0)
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d116      	bne.n	8000e9e <uartAvailable+0x6e>
          {
            available_flag = false;
 8000e70:	4b0f      	ldr	r3, [pc, #60]	; (8000eb0 <uartAvailable+0x80>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	701a      	strb	r2, [r3, #0]
          }
        break;
 8000e76:	e012      	b.n	8000e9e <uartAvailable+0x6e>
      case _DEF_UART2:
          ret= qbufferAvailable(&qbuffer[ch]);
 8000e78:	1dfb      	adds	r3, r7, #7
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	011a      	lsls	r2, r3, #4
 8000e7e:	4b0d      	ldr	r3, [pc, #52]	; (8000eb4 <uartAvailable+0x84>)
 8000e80:	18d3      	adds	r3, r2, r3
 8000e82:	0018      	movs	r0, r3
 8000e84:	f7ff fd0f 	bl	80008a6 <qbufferAvailable>
 8000e88:	0003      	movs	r3, r0
 8000e8a:	60fb      	str	r3, [r7, #12]
          if(ret == 0)
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d107      	bne.n	8000ea2 <uartAvailable+0x72>
          {
            available_flag = false;
 8000e92:	4b07      	ldr	r3, [pc, #28]	; (8000eb0 <uartAvailable+0x80>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	701a      	strb	r2, [r3, #0]
          }
        break;
 8000e98:	e003      	b.n	8000ea2 <uartAvailable+0x72>
    }
  }
 8000e9a:	46c0      	nop			; (mov r8, r8)
 8000e9c:	e002      	b.n	8000ea4 <uartAvailable+0x74>
        break;
 8000e9e:	46c0      	nop			; (mov r8, r8)
 8000ea0:	e000      	b.n	8000ea4 <uartAvailable+0x74>
        break;
 8000ea2:	46c0      	nop			; (mov r8, r8)
  return ret;
 8000ea4:	68fb      	ldr	r3, [r7, #12]
}
 8000ea6:	0018      	movs	r0, r3
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	b004      	add	sp, #16
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	46c0      	nop			; (mov r8, r8)
 8000eb0:	200004c8 	.word	0x200004c8
 8000eb4:	200003a8 	.word	0x200003a8

08000eb8 <uartRead>:

uint8_t uartRead(uint8_t ch)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b084      	sub	sp, #16
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	0002      	movs	r2, r0
 8000ec0:	1dfb      	adds	r3, r7, #7
 8000ec2:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0;
 8000ec4:	230f      	movs	r3, #15
 8000ec6:	18fb      	adds	r3, r7, r3
 8000ec8:	2200      	movs	r2, #0
 8000eca:	701a      	strb	r2, [r3, #0]

  switch(ch)
 8000ecc:	1dfb      	adds	r3, r7, #7
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d002      	beq.n	8000eda <uartRead+0x22>
 8000ed4:	2b01      	cmp	r3, #1
 8000ed6:	d008      	beq.n	8000eea <uartRead+0x32>
 8000ed8:	e00f      	b.n	8000efa <uartRead+0x42>
  {
    case _DEF_UART1:
      qbufferRead(&qbuffer[_DEF_UART1], RxData, 256);
 8000eda:	2380      	movs	r3, #128	; 0x80
 8000edc:	005a      	lsls	r2, r3, #1
 8000ede:	490a      	ldr	r1, [pc, #40]	; (8000f08 <uartRead+0x50>)
 8000ee0:	4b0a      	ldr	r3, [pc, #40]	; (8000f0c <uartRead+0x54>)
 8000ee2:	0018      	movs	r0, r3
 8000ee4:	f7ff fc8d 	bl	8000802 <qbufferRead>
      break;
 8000ee8:	e007      	b.n	8000efa <uartRead+0x42>
    case _DEF_UART2:
      qbufferRead(&qbuffer[_DEF_UART2], RxData, 256);
 8000eea:	2380      	movs	r3, #128	; 0x80
 8000eec:	005a      	lsls	r2, r3, #1
 8000eee:	4906      	ldr	r1, [pc, #24]	; (8000f08 <uartRead+0x50>)
 8000ef0:	4b07      	ldr	r3, [pc, #28]	; (8000f10 <uartRead+0x58>)
 8000ef2:	0018      	movs	r0, r3
 8000ef4:	f7ff fc85 	bl	8000802 <qbufferRead>
      break;
 8000ef8:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8000efa:	230f      	movs	r3, #15
 8000efc:	18fb      	adds	r3, r7, r3
 8000efe:	781b      	ldrb	r3, [r3, #0]
}
 8000f00:	0018      	movs	r0, r3
 8000f02:	46bd      	mov	sp, r7
 8000f04:	b004      	add	sp, #16
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	20000664 	.word	0x20000664
 8000f0c:	200003a8 	.word	0x200003a8
 8000f10:	200003b8 	.word	0x200003b8

08000f14 <uartWrite>:

uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
 8000f14:	b5b0      	push	{r4, r5, r7, lr}
 8000f16:	b086      	sub	sp, #24
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	60b9      	str	r1, [r7, #8]
 8000f1c:	607a      	str	r2, [r7, #4]
 8000f1e:	210f      	movs	r1, #15
 8000f20:	187b      	adds	r3, r7, r1
 8000f22:	1c02      	adds	r2, r0, #0
 8000f24:	701a      	strb	r2, [r3, #0]
  uint32_t ret = 0;
 8000f26:	2300      	movs	r3, #0
 8000f28:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;

  switch(ch)
 8000f2a:	187b      	adds	r3, r7, r1
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d002      	beq.n	8000f38 <uartWrite+0x24>
 8000f32:	2b01      	cmp	r3, #1
 8000f34:	d012      	beq.n	8000f5c <uartWrite+0x48>
 8000f36:	e026      	b.n	8000f86 <uartWrite+0x72>
  {
    case _DEF_UART1:
      status = HAL_UART_Transmit(&huart1, p_data, length, 100);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	b29a      	uxth	r2, r3
 8000f3c:	2513      	movs	r5, #19
 8000f3e:	197c      	adds	r4, r7, r5
 8000f40:	68b9      	ldr	r1, [r7, #8]
 8000f42:	4813      	ldr	r0, [pc, #76]	; (8000f90 <uartWrite+0x7c>)
 8000f44:	2364      	movs	r3, #100	; 0x64
 8000f46:	f002 f8ab 	bl	80030a0 <HAL_UART_Transmit>
 8000f4a:	0003      	movs	r3, r0
 8000f4c:	7023      	strb	r3, [r4, #0]
      if (status == HAL_OK)
 8000f4e:	197b      	adds	r3, r7, r5
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d114      	bne.n	8000f80 <uartWrite+0x6c>
      {
        ret = length;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	617b      	str	r3, [r7, #20]
      }
      break;
 8000f5a:	e011      	b.n	8000f80 <uartWrite+0x6c>
    case _DEF_UART2:
      status = HAL_UART_Transmit(&huart2, p_data, length, 100);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	b29a      	uxth	r2, r3
 8000f60:	2513      	movs	r5, #19
 8000f62:	197c      	adds	r4, r7, r5
 8000f64:	68b9      	ldr	r1, [r7, #8]
 8000f66:	480b      	ldr	r0, [pc, #44]	; (8000f94 <uartWrite+0x80>)
 8000f68:	2364      	movs	r3, #100	; 0x64
 8000f6a:	f002 f899 	bl	80030a0 <HAL_UART_Transmit>
 8000f6e:	0003      	movs	r3, r0
 8000f70:	7023      	strb	r3, [r4, #0]
      if (status == HAL_OK)
 8000f72:	197b      	adds	r3, r7, r5
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d104      	bne.n	8000f84 <uartWrite+0x70>
      {
        ret = length;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	617b      	str	r3, [r7, #20]
      }
      break;
 8000f7e:	e001      	b.n	8000f84 <uartWrite+0x70>
      break;
 8000f80:	46c0      	nop			; (mov r8, r8)
 8000f82:	e000      	b.n	8000f86 <uartWrite+0x72>
      break;
 8000f84:	46c0      	nop			; (mov r8, r8)
  }
  return ret;
 8000f86:	697b      	ldr	r3, [r7, #20]
}
 8000f88:	0018      	movs	r0, r3
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	b006      	add	sp, #24
 8000f8e:	bdb0      	pop	{r4, r5, r7, pc}
 8000f90:	200004cc 	.word	0x200004cc
 8000f94:	20000554 	.word	0x20000554

08000f98 <uartPrintf>:

uint32_t uartPrintf(uint8_t ch, char *fmt, ...)
{
 8000f98:	b40e      	push	{r1, r2, r3}
 8000f9a:	b5b0      	push	{r4, r5, r7, lr}
 8000f9c:	b0c7      	sub	sp, #284	; 0x11c
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	0002      	movs	r2, r0
 8000fa2:	4b1a      	ldr	r3, [pc, #104]	; (800100c <uartPrintf+0x74>)
 8000fa4:	248c      	movs	r4, #140	; 0x8c
 8000fa6:	0064      	lsls	r4, r4, #1
 8000fa8:	191b      	adds	r3, r3, r4
 8000faa:	19db      	adds	r3, r3, r7
 8000fac:	701a      	strb	r2, [r3, #0]
  char buf[256];
  va_list args;
  int len;
  uint32_t ret;

  va_start(args, fmt);
 8000fae:	2394      	movs	r3, #148	; 0x94
 8000fb0:	005b      	lsls	r3, r3, #1
 8000fb2:	2108      	movs	r1, #8
 8000fb4:	185b      	adds	r3, r3, r1
 8000fb6:	19db      	adds	r3, r3, r7
 8000fb8:	60fb      	str	r3, [r7, #12]

  len = vsnprintf(buf, 256, fmt, args);
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	2292      	movs	r2, #146	; 0x92
 8000fbe:	0052      	lsls	r2, r2, #1
 8000fc0:	1852      	adds	r2, r2, r1
 8000fc2:	19d2      	adds	r2, r2, r7
 8000fc4:	6812      	ldr	r2, [r2, #0]
 8000fc6:	2180      	movs	r1, #128	; 0x80
 8000fc8:	0049      	lsls	r1, r1, #1
 8000fca:	2510      	movs	r5, #16
 8000fcc:	1978      	adds	r0, r7, r5
 8000fce:	f003 fab7 	bl	8004540 <vsniprintf>
 8000fd2:	0003      	movs	r3, r0
 8000fd4:	228a      	movs	r2, #138	; 0x8a
 8000fd6:	0052      	lsls	r2, r2, #1
 8000fd8:	18b9      	adds	r1, r7, r2
 8000fda:	600b      	str	r3, [r1, #0]

  ret = uartWrite(ch, (uint8_t *)buf, len);
 8000fdc:	18bb      	adds	r3, r7, r2
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	1979      	adds	r1, r7, r5
 8000fe2:	4b0a      	ldr	r3, [pc, #40]	; (800100c <uartPrintf+0x74>)
 8000fe4:	191b      	adds	r3, r3, r4
 8000fe6:	19db      	adds	r3, r3, r7
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	0018      	movs	r0, r3
 8000fec:	f7ff ff92 	bl	8000f14 <uartWrite>
 8000ff0:	0003      	movs	r3, r0
 8000ff2:	2288      	movs	r2, #136	; 0x88
 8000ff4:	0052      	lsls	r2, r2, #1
 8000ff6:	18b9      	adds	r1, r7, r2
 8000ff8:	600b      	str	r3, [r1, #0]

  va_end(args);

  return ret;
 8000ffa:	18bb      	adds	r3, r7, r2
 8000ffc:	681b      	ldr	r3, [r3, #0]
}
 8000ffe:	0018      	movs	r0, r3
 8001000:	46bd      	mov	sp, r7
 8001002:	b047      	add	sp, #284	; 0x11c
 8001004:	bcb0      	pop	{r4, r5, r7}
 8001006:	bc08      	pop	{r3}
 8001008:	b003      	add	sp, #12
 800100a:	4718      	bx	r3
 800100c:	fffffeef 	.word	0xfffffeef

08001010 <HAL_UART_ErrorCallback>:

    return ret;
}

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
    }
  if (huart->Instance == USART2)
    {

    }
}
 8001018:	46c0      	nop			; (mov r8, r8)
 800101a:	46bd      	mov	sp, r7
 800101c:	b002      	add	sp, #8
 800101e:	bd80      	pop	{r7, pc}

08001020 <HAL_UARTEx_RxEventCallback>:


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001020:	b590      	push	{r4, r7, lr}
 8001022:	b085      	sub	sp, #20
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	000a      	movs	r2, r1
 800102a:	1cbb      	adds	r3, r7, #2
 800102c:	801a      	strh	r2, [r3, #0]
  bool ret = true;
 800102e:	240f      	movs	r4, #15
 8001030:	193b      	adds	r3, r7, r4
 8001032:	2201      	movs	r2, #1
 8001034:	701a      	strb	r2, [r3, #0]

  if (huart->Instance == USART1) //case _DEF_UART1
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4a4c      	ldr	r2, [pc, #304]	; (800116c <HAL_UARTEx_RxEventCallback+0x14c>)
 800103c:	4293      	cmp	r3, r2
 800103e:	d144      	bne.n	80010ca <HAL_UARTEx_RxEventCallback+0xaa>
  {
    qbuffer[_DEF_UART1].in = 0;
 8001040:	4b4b      	ldr	r3, [pc, #300]	; (8001170 <HAL_UARTEx_RxEventCallback+0x150>)
 8001042:	2200      	movs	r2, #0
 8001044:	601a      	str	r2, [r3, #0]
    qbuffer[_DEF_UART1].out = 0;
 8001046:	4b4a      	ldr	r3, [pc, #296]	; (8001170 <HAL_UARTEx_RxEventCallback+0x150>)
 8001048:	2200      	movs	r2, #0
 800104a:	605a      	str	r2, [r3, #4]

    if (Size > 256 - qbuffer[_DEF_UART1].in)
 800104c:	1cbb      	adds	r3, r7, #2
 800104e:	881a      	ldrh	r2, [r3, #0]
 8001050:	4b47      	ldr	r3, [pc, #284]	; (8001170 <HAL_UARTEx_RxEventCallback+0x150>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	2180      	movs	r1, #128	; 0x80
 8001056:	0049      	lsls	r1, r1, #1
 8001058:	1acb      	subs	r3, r1, r3
 800105a:	429a      	cmp	r2, r3
 800105c:	d900      	bls.n	8001060 <HAL_UARTEx_RxEventCallback+0x40>
 800105e:	e07e      	b.n	800115e <HAL_UARTEx_RxEventCallback+0x13e>
    {
           // 처리할 수 없는 크기의 데이터가 수신됨
           // 예외 처리 또는 에러 처리를 수행
      return;
    }
    qbuffer[_DEF_UART1].in = qbuffer[_DEF_UART1].len - hdma_usart1_rx.Instance->CNDTR;
 8001060:	4b43      	ldr	r3, [pc, #268]	; (8001170 <HAL_UARTEx_RxEventCallback+0x150>)
 8001062:	689a      	ldr	r2, [r3, #8]
 8001064:	4b43      	ldr	r3, [pc, #268]	; (8001174 <HAL_UARTEx_RxEventCallback+0x154>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	1ad2      	subs	r2, r2, r3
 800106c:	4b40      	ldr	r3, [pc, #256]	; (8001170 <HAL_UARTEx_RxEventCallback+0x150>)
 800106e:	601a      	str	r2, [r3, #0]
    available_flag = true;
 8001070:	4b41      	ldr	r3, [pc, #260]	; (8001178 <HAL_UARTEx_RxEventCallback+0x158>)
 8001072:	2201      	movs	r2, #1
 8001074:	701a      	strb	r2, [r3, #0]

    HAL_UART_DeInit(&huart1);
 8001076:	4b41      	ldr	r3, [pc, #260]	; (800117c <HAL_UARTEx_RxEventCallback+0x15c>)
 8001078:	0018      	movs	r0, r3
 800107a:	f001 ffd3 	bl	8003024 <HAL_UART_DeInit>
    if (HAL_UART_Init(&huart1) != HAL_OK)
 800107e:	4b3f      	ldr	r3, [pc, #252]	; (800117c <HAL_UARTEx_RxEventCallback+0x15c>)
 8001080:	0018      	movs	r0, r3
 8001082:	f001 ff7b 	bl	8002f7c <HAL_UART_Init>
 8001086:	1e03      	subs	r3, r0, #0
 8001088:	d003      	beq.n	8001092 <HAL_UARTEx_RxEventCallback+0x72>
    {
      ret = false;
 800108a:	193b      	adds	r3, r7, r4
 800108c:	2200      	movs	r2, #0
 800108e:	701a      	strb	r2, [r3, #0]
 8001090:	e068      	b.n	8001164 <HAL_UARTEx_RxEventCallback+0x144>
    }
    else
    {
      ret = true;
 8001092:	240f      	movs	r4, #15
 8001094:	193b      	adds	r3, r7, r4
 8001096:	2201      	movs	r2, #1
 8001098:	701a      	strb	r2, [r3, #0]
      is_open[_DEF_UART1] = true;
 800109a:	4b39      	ldr	r3, [pc, #228]	; (8001180 <HAL_UARTEx_RxEventCallback+0x160>)
 800109c:	2201      	movs	r2, #1
 800109e:	701a      	strb	r2, [r3, #0]


      if(HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t *)&rx_buf[0], 256) != HAL_OK)
 80010a0:	2380      	movs	r3, #128	; 0x80
 80010a2:	005a      	lsls	r2, r3, #1
 80010a4:	4937      	ldr	r1, [pc, #220]	; (8001184 <HAL_UARTEx_RxEventCallback+0x164>)
 80010a6:	4b35      	ldr	r3, [pc, #212]	; (800117c <HAL_UARTEx_RxEventCallback+0x15c>)
 80010a8:	0018      	movs	r0, r3
 80010aa:	f003 f8fa 	bl	80042a2 <HAL_UARTEx_ReceiveToIdle_DMA>
 80010ae:	1e03      	subs	r3, r0, #0
 80010b0:	d002      	beq.n	80010b8 <HAL_UARTEx_RxEventCallback+0x98>
      {
        ret = false;
 80010b2:	193b      	adds	r3, r7, r4
 80010b4:	2200      	movs	r2, #0
 80010b6:	701a      	strb	r2, [r3, #0]
      }
      __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 80010b8:	4b2e      	ldr	r3, [pc, #184]	; (8001174 <HAL_UARTEx_RxEventCallback+0x154>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	4b2d      	ldr	r3, [pc, #180]	; (8001174 <HAL_UARTEx_RxEventCallback+0x154>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	2104      	movs	r1, #4
 80010c4:	438a      	bics	r2, r1
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	e04c      	b.n	8001164 <HAL_UARTEx_RxEventCallback+0x144>
      }

  }
  else if (huart->Instance == USART2) //case _DEF_UART2
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4a2e      	ldr	r2, [pc, #184]	; (8001188 <HAL_UARTEx_RxEventCallback+0x168>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d147      	bne.n	8001164 <HAL_UARTEx_RxEventCallback+0x144>
  {

    qbuffer[_DEF_UART2].in = 0;
 80010d4:	4b26      	ldr	r3, [pc, #152]	; (8001170 <HAL_UARTEx_RxEventCallback+0x150>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	611a      	str	r2, [r3, #16]
    qbuffer[_DEF_UART2].out = 0;
 80010da:	4b25      	ldr	r3, [pc, #148]	; (8001170 <HAL_UARTEx_RxEventCallback+0x150>)
 80010dc:	2200      	movs	r2, #0
 80010de:	615a      	str	r2, [r3, #20]

    if (Size > 256 - qbuffer[_DEF_UART2].in)
 80010e0:	1cbb      	adds	r3, r7, #2
 80010e2:	881a      	ldrh	r2, [r3, #0]
 80010e4:	4b22      	ldr	r3, [pc, #136]	; (8001170 <HAL_UARTEx_RxEventCallback+0x150>)
 80010e6:	691b      	ldr	r3, [r3, #16]
 80010e8:	2180      	movs	r1, #128	; 0x80
 80010ea:	0049      	lsls	r1, r1, #1
 80010ec:	1acb      	subs	r3, r1, r3
 80010ee:	429a      	cmp	r2, r3
 80010f0:	d837      	bhi.n	8001162 <HAL_UARTEx_RxEventCallback+0x142>
    {
           // 처리할 수 없는 크기의 데이터가 수신됨
           // 예외 처리 또는 에러 처리를 수행
      return;
    }
    qbuffer[_DEF_UART2].in = qbuffer[_DEF_UART2].len - hdma_usart2_rx.Instance->CNDTR;
 80010f2:	4b1f      	ldr	r3, [pc, #124]	; (8001170 <HAL_UARTEx_RxEventCallback+0x150>)
 80010f4:	699a      	ldr	r2, [r3, #24]
 80010f6:	4b25      	ldr	r3, [pc, #148]	; (800118c <HAL_UARTEx_RxEventCallback+0x16c>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	1ad2      	subs	r2, r2, r3
 80010fe:	4b1c      	ldr	r3, [pc, #112]	; (8001170 <HAL_UARTEx_RxEventCallback+0x150>)
 8001100:	611a      	str	r2, [r3, #16]
    available_flag = true;
 8001102:	4b1d      	ldr	r3, [pc, #116]	; (8001178 <HAL_UARTEx_RxEventCallback+0x158>)
 8001104:	2201      	movs	r2, #1
 8001106:	701a      	strb	r2, [r3, #0]

    HAL_UART_DeInit(&huart2);
 8001108:	4b21      	ldr	r3, [pc, #132]	; (8001190 <HAL_UARTEx_RxEventCallback+0x170>)
 800110a:	0018      	movs	r0, r3
 800110c:	f001 ff8a 	bl	8003024 <HAL_UART_DeInit>
    if (HAL_UART_Init(&huart2) != HAL_OK)
 8001110:	4b1f      	ldr	r3, [pc, #124]	; (8001190 <HAL_UARTEx_RxEventCallback+0x170>)
 8001112:	0018      	movs	r0, r3
 8001114:	f001 ff32 	bl	8002f7c <HAL_UART_Init>
 8001118:	1e03      	subs	r3, r0, #0
 800111a:	d004      	beq.n	8001126 <HAL_UARTEx_RxEventCallback+0x106>
    {
      ret = false;
 800111c:	230f      	movs	r3, #15
 800111e:	18fb      	adds	r3, r7, r3
 8001120:	2200      	movs	r2, #0
 8001122:	701a      	strb	r2, [r3, #0]
 8001124:	e01e      	b.n	8001164 <HAL_UARTEx_RxEventCallback+0x144>
    }
    else
    {
      ret = true;
 8001126:	240f      	movs	r4, #15
 8001128:	193b      	adds	r3, r7, r4
 800112a:	2201      	movs	r2, #1
 800112c:	701a      	strb	r2, [r3, #0]
      is_open[_DEF_UART2] = true;
 800112e:	4b14      	ldr	r3, [pc, #80]	; (8001180 <HAL_UARTEx_RxEventCallback+0x160>)
 8001130:	2201      	movs	r2, #1
 8001132:	705a      	strb	r2, [r3, #1]


      if(HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *)&rx_buf[0], 256) != HAL_OK)
 8001134:	2380      	movs	r3, #128	; 0x80
 8001136:	005a      	lsls	r2, r3, #1
 8001138:	4912      	ldr	r1, [pc, #72]	; (8001184 <HAL_UARTEx_RxEventCallback+0x164>)
 800113a:	4b15      	ldr	r3, [pc, #84]	; (8001190 <HAL_UARTEx_RxEventCallback+0x170>)
 800113c:	0018      	movs	r0, r3
 800113e:	f003 f8b0 	bl	80042a2 <HAL_UARTEx_ReceiveToIdle_DMA>
 8001142:	1e03      	subs	r3, r0, #0
 8001144:	d002      	beq.n	800114c <HAL_UARTEx_RxEventCallback+0x12c>
      {
        ret = false;
 8001146:	193b      	adds	r3, r7, r4
 8001148:	2200      	movs	r2, #0
 800114a:	701a      	strb	r2, [r3, #0]
      }
      __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 800114c:	4b0f      	ldr	r3, [pc, #60]	; (800118c <HAL_UARTEx_RxEventCallback+0x16c>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	4b0e      	ldr	r3, [pc, #56]	; (800118c <HAL_UARTEx_RxEventCallback+0x16c>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	2104      	movs	r1, #4
 8001158:	438a      	bics	r2, r1
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	e002      	b.n	8001164 <HAL_UARTEx_RxEventCallback+0x144>
      return;
 800115e:	46c0      	nop			; (mov r8, r8)
 8001160:	e000      	b.n	8001164 <HAL_UARTEx_RxEventCallback+0x144>
      return;
 8001162:	46c0      	nop			; (mov r8, r8)
      }

  }

}
 8001164:	46bd      	mov	sp, r7
 8001166:	b005      	add	sp, #20
 8001168:	bd90      	pop	{r4, r7, pc}
 800116a:	46c0      	nop			; (mov r8, r8)
 800116c:	40013800 	.word	0x40013800
 8001170:	200003a8 	.word	0x200003a8
 8001174:	200005dc 	.word	0x200005dc
 8001178:	200004c8 	.word	0x200004c8
 800117c:	200004cc 	.word	0x200004cc
 8001180:	200003a4 	.word	0x200003a4
 8001184:	200003c8 	.word	0x200003c8
 8001188:	40004400 	.word	0x40004400
 800118c:	20000620 	.word	0x20000620
 8001190:	20000554 	.word	0x20000554

08001194 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
    qbufferWrite(&qbuffer[_DEF_UART1], &rx_data[_DEF_UART1], 1);

    HAL_UART_Receive_IT(&huart1, (uint8_t *)&rx_data[_DEF_UART1], 1);
  }
#endif
}
 800119c:	46c0      	nop			; (mov r8, r8)
 800119e:	46bd      	mov	sp, r7
 80011a0:	b002      	add	sp, #8
 80011a2:	bd80      	pop	{r7, pc}

080011a4 <HAL_UART_MspInit>:



void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80011a4:	b590      	push	{r4, r7, lr}
 80011a6:	b08d      	sub	sp, #52	; 0x34
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ac:	241c      	movs	r4, #28
 80011ae:	193b      	adds	r3, r7, r4
 80011b0:	0018      	movs	r0, r3
 80011b2:	2314      	movs	r3, #20
 80011b4:	001a      	movs	r2, r3
 80011b6:	2100      	movs	r1, #0
 80011b8:	f003 f912 	bl	80043e0 <memset>
  if(uartHandle->Instance==USART1)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a67      	ldr	r2, [pc, #412]	; (8001360 <HAL_UART_MspInit+0x1bc>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d162      	bne.n	800128c <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80011c6:	4b67      	ldr	r3, [pc, #412]	; (8001364 <HAL_UART_MspInit+0x1c0>)
 80011c8:	699a      	ldr	r2, [r3, #24]
 80011ca:	4b66      	ldr	r3, [pc, #408]	; (8001364 <HAL_UART_MspInit+0x1c0>)
 80011cc:	2180      	movs	r1, #128	; 0x80
 80011ce:	01c9      	lsls	r1, r1, #7
 80011d0:	430a      	orrs	r2, r1
 80011d2:	619a      	str	r2, [r3, #24]
 80011d4:	4b63      	ldr	r3, [pc, #396]	; (8001364 <HAL_UART_MspInit+0x1c0>)
 80011d6:	699a      	ldr	r2, [r3, #24]
 80011d8:	2380      	movs	r3, #128	; 0x80
 80011da:	01db      	lsls	r3, r3, #7
 80011dc:	4013      	ands	r3, r2
 80011de:	61bb      	str	r3, [r7, #24]
 80011e0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e2:	4b60      	ldr	r3, [pc, #384]	; (8001364 <HAL_UART_MspInit+0x1c0>)
 80011e4:	695a      	ldr	r2, [r3, #20]
 80011e6:	4b5f      	ldr	r3, [pc, #380]	; (8001364 <HAL_UART_MspInit+0x1c0>)
 80011e8:	2180      	movs	r1, #128	; 0x80
 80011ea:	0289      	lsls	r1, r1, #10
 80011ec:	430a      	orrs	r2, r1
 80011ee:	615a      	str	r2, [r3, #20]
 80011f0:	4b5c      	ldr	r3, [pc, #368]	; (8001364 <HAL_UART_MspInit+0x1c0>)
 80011f2:	695a      	ldr	r2, [r3, #20]
 80011f4:	2380      	movs	r3, #128	; 0x80
 80011f6:	029b      	lsls	r3, r3, #10
 80011f8:	4013      	ands	r3, r2
 80011fa:	617b      	str	r3, [r7, #20]
 80011fc:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80011fe:	193b      	adds	r3, r7, r4
 8001200:	22c0      	movs	r2, #192	; 0xc0
 8001202:	00d2      	lsls	r2, r2, #3
 8001204:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001206:	0021      	movs	r1, r4
 8001208:	187b      	adds	r3, r7, r1
 800120a:	2202      	movs	r2, #2
 800120c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120e:	187b      	adds	r3, r7, r1
 8001210:	2200      	movs	r2, #0
 8001212:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001214:	187b      	adds	r3, r7, r1
 8001216:	2203      	movs	r2, #3
 8001218:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800121a:	187b      	adds	r3, r7, r1
 800121c:	2201      	movs	r2, #1
 800121e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001220:	187a      	adds	r2, r7, r1
 8001222:	2390      	movs	r3, #144	; 0x90
 8001224:	05db      	lsls	r3, r3, #23
 8001226:	0011      	movs	r1, r2
 8001228:	0018      	movs	r0, r3
 800122a:	f000 fed5 	bl	8001fd8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel3;
 800122e:	4b4e      	ldr	r3, [pc, #312]	; (8001368 <HAL_UART_MspInit+0x1c4>)
 8001230:	4a4e      	ldr	r2, [pc, #312]	; (800136c <HAL_UART_MspInit+0x1c8>)
 8001232:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001234:	4b4c      	ldr	r3, [pc, #304]	; (8001368 <HAL_UART_MspInit+0x1c4>)
 8001236:	2200      	movs	r2, #0
 8001238:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800123a:	4b4b      	ldr	r3, [pc, #300]	; (8001368 <HAL_UART_MspInit+0x1c4>)
 800123c:	2200      	movs	r2, #0
 800123e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001240:	4b49      	ldr	r3, [pc, #292]	; (8001368 <HAL_UART_MspInit+0x1c4>)
 8001242:	2280      	movs	r2, #128	; 0x80
 8001244:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001246:	4b48      	ldr	r3, [pc, #288]	; (8001368 <HAL_UART_MspInit+0x1c4>)
 8001248:	2200      	movs	r2, #0
 800124a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800124c:	4b46      	ldr	r3, [pc, #280]	; (8001368 <HAL_UART_MspInit+0x1c4>)
 800124e:	2200      	movs	r2, #0
 8001250:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001252:	4b45      	ldr	r3, [pc, #276]	; (8001368 <HAL_UART_MspInit+0x1c4>)
 8001254:	2220      	movs	r2, #32
 8001256:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001258:	4b43      	ldr	r3, [pc, #268]	; (8001368 <HAL_UART_MspInit+0x1c4>)
 800125a:	2200      	movs	r2, #0
 800125c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800125e:	4b42      	ldr	r3, [pc, #264]	; (8001368 <HAL_UART_MspInit+0x1c4>)
 8001260:	0018      	movs	r0, r3
 8001262:	f000 fcfd 	bl	8001c60 <HAL_DMA_Init>
 8001266:	1e03      	subs	r3, r0, #0
 8001268:	d001      	beq.n	800126e <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 800126a:	f7ff f98a 	bl	8000582 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4a3d      	ldr	r2, [pc, #244]	; (8001368 <HAL_UART_MspInit+0x1c4>)
 8001272:	675a      	str	r2, [r3, #116]	; 0x74
 8001274:	4b3c      	ldr	r3, [pc, #240]	; (8001368 <HAL_UART_MspInit+0x1c4>)
 8001276:	687a      	ldr	r2, [r7, #4]
 8001278:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800127a:	2200      	movs	r2, #0
 800127c:	2100      	movs	r1, #0
 800127e:	201b      	movs	r0, #27
 8001280:	f000 fcac 	bl	8001bdc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001284:	201b      	movs	r0, #27
 8001286:	f000 fcbe 	bl	8001c06 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800128a:	e065      	b.n	8001358 <HAL_UART_MspInit+0x1b4>
  else if(uartHandle->Instance==USART2)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a37      	ldr	r2, [pc, #220]	; (8001370 <HAL_UART_MspInit+0x1cc>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d160      	bne.n	8001358 <HAL_UART_MspInit+0x1b4>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001296:	4b33      	ldr	r3, [pc, #204]	; (8001364 <HAL_UART_MspInit+0x1c0>)
 8001298:	69da      	ldr	r2, [r3, #28]
 800129a:	4b32      	ldr	r3, [pc, #200]	; (8001364 <HAL_UART_MspInit+0x1c0>)
 800129c:	2180      	movs	r1, #128	; 0x80
 800129e:	0289      	lsls	r1, r1, #10
 80012a0:	430a      	orrs	r2, r1
 80012a2:	61da      	str	r2, [r3, #28]
 80012a4:	4b2f      	ldr	r3, [pc, #188]	; (8001364 <HAL_UART_MspInit+0x1c0>)
 80012a6:	69da      	ldr	r2, [r3, #28]
 80012a8:	2380      	movs	r3, #128	; 0x80
 80012aa:	029b      	lsls	r3, r3, #10
 80012ac:	4013      	ands	r3, r2
 80012ae:	613b      	str	r3, [r7, #16]
 80012b0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b2:	4b2c      	ldr	r3, [pc, #176]	; (8001364 <HAL_UART_MspInit+0x1c0>)
 80012b4:	695a      	ldr	r2, [r3, #20]
 80012b6:	4b2b      	ldr	r3, [pc, #172]	; (8001364 <HAL_UART_MspInit+0x1c0>)
 80012b8:	2180      	movs	r1, #128	; 0x80
 80012ba:	0289      	lsls	r1, r1, #10
 80012bc:	430a      	orrs	r2, r1
 80012be:	615a      	str	r2, [r3, #20]
 80012c0:	4b28      	ldr	r3, [pc, #160]	; (8001364 <HAL_UART_MspInit+0x1c0>)
 80012c2:	695a      	ldr	r2, [r3, #20]
 80012c4:	2380      	movs	r3, #128	; 0x80
 80012c6:	029b      	lsls	r3, r3, #10
 80012c8:	4013      	ands	r3, r2
 80012ca:	60fb      	str	r3, [r7, #12]
 80012cc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80012ce:	211c      	movs	r1, #28
 80012d0:	187b      	adds	r3, r7, r1
 80012d2:	220c      	movs	r2, #12
 80012d4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d6:	187b      	adds	r3, r7, r1
 80012d8:	2202      	movs	r2, #2
 80012da:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012dc:	187b      	adds	r3, r7, r1
 80012de:	2200      	movs	r2, #0
 80012e0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012e2:	187b      	adds	r3, r7, r1
 80012e4:	2203      	movs	r2, #3
 80012e6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80012e8:	187b      	adds	r3, r7, r1
 80012ea:	2201      	movs	r2, #1
 80012ec:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ee:	187a      	adds	r2, r7, r1
 80012f0:	2390      	movs	r3, #144	; 0x90
 80012f2:	05db      	lsls	r3, r3, #23
 80012f4:	0011      	movs	r1, r2
 80012f6:	0018      	movs	r0, r3
 80012f8:	f000 fe6e 	bl	8001fd8 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel5;
 80012fc:	4b1d      	ldr	r3, [pc, #116]	; (8001374 <HAL_UART_MspInit+0x1d0>)
 80012fe:	4a1e      	ldr	r2, [pc, #120]	; (8001378 <HAL_UART_MspInit+0x1d4>)
 8001300:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001302:	4b1c      	ldr	r3, [pc, #112]	; (8001374 <HAL_UART_MspInit+0x1d0>)
 8001304:	2200      	movs	r2, #0
 8001306:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001308:	4b1a      	ldr	r3, [pc, #104]	; (8001374 <HAL_UART_MspInit+0x1d0>)
 800130a:	2200      	movs	r2, #0
 800130c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800130e:	4b19      	ldr	r3, [pc, #100]	; (8001374 <HAL_UART_MspInit+0x1d0>)
 8001310:	2280      	movs	r2, #128	; 0x80
 8001312:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001314:	4b17      	ldr	r3, [pc, #92]	; (8001374 <HAL_UART_MspInit+0x1d0>)
 8001316:	2200      	movs	r2, #0
 8001318:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800131a:	4b16      	ldr	r3, [pc, #88]	; (8001374 <HAL_UART_MspInit+0x1d0>)
 800131c:	2200      	movs	r2, #0
 800131e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001320:	4b14      	ldr	r3, [pc, #80]	; (8001374 <HAL_UART_MspInit+0x1d0>)
 8001322:	2220      	movs	r2, #32
 8001324:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001326:	4b13      	ldr	r3, [pc, #76]	; (8001374 <HAL_UART_MspInit+0x1d0>)
 8001328:	2200      	movs	r2, #0
 800132a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800132c:	4b11      	ldr	r3, [pc, #68]	; (8001374 <HAL_UART_MspInit+0x1d0>)
 800132e:	0018      	movs	r0, r3
 8001330:	f000 fc96 	bl	8001c60 <HAL_DMA_Init>
 8001334:	1e03      	subs	r3, r0, #0
 8001336:	d001      	beq.n	800133c <HAL_UART_MspInit+0x198>
      Error_Handler();
 8001338:	f7ff f923 	bl	8000582 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	4a0d      	ldr	r2, [pc, #52]	; (8001374 <HAL_UART_MspInit+0x1d0>)
 8001340:	675a      	str	r2, [r3, #116]	; 0x74
 8001342:	4b0c      	ldr	r3, [pc, #48]	; (8001374 <HAL_UART_MspInit+0x1d0>)
 8001344:	687a      	ldr	r2, [r7, #4]
 8001346:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001348:	2200      	movs	r2, #0
 800134a:	2100      	movs	r1, #0
 800134c:	201c      	movs	r0, #28
 800134e:	f000 fc45 	bl	8001bdc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001352:	201c      	movs	r0, #28
 8001354:	f000 fc57 	bl	8001c06 <HAL_NVIC_EnableIRQ>
}
 8001358:	46c0      	nop			; (mov r8, r8)
 800135a:	46bd      	mov	sp, r7
 800135c:	b00d      	add	sp, #52	; 0x34
 800135e:	bd90      	pop	{r4, r7, pc}
 8001360:	40013800 	.word	0x40013800
 8001364:	40021000 	.word	0x40021000
 8001368:	200005dc 	.word	0x200005dc
 800136c:	40020030 	.word	0x40020030
 8001370:	40004400 	.word	0x40004400
 8001374:	20000620 	.word	0x20000620
 8001378:	40020058 	.word	0x40020058

0800137c <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a1b      	ldr	r2, [pc, #108]	; (80013f8 <HAL_UART_MspDeInit+0x7c>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d116      	bne.n	80013bc <HAL_UART_MspDeInit+0x40>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 800138e:	4b1b      	ldr	r3, [pc, #108]	; (80013fc <HAL_UART_MspDeInit+0x80>)
 8001390:	699a      	ldr	r2, [r3, #24]
 8001392:	4b1a      	ldr	r3, [pc, #104]	; (80013fc <HAL_UART_MspDeInit+0x80>)
 8001394:	491a      	ldr	r1, [pc, #104]	; (8001400 <HAL_UART_MspDeInit+0x84>)
 8001396:	400a      	ands	r2, r1
 8001398:	619a      	str	r2, [r3, #24]

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 800139a:	23c0      	movs	r3, #192	; 0xc0
 800139c:	00da      	lsls	r2, r3, #3
 800139e:	2390      	movs	r3, #144	; 0x90
 80013a0:	05db      	lsls	r3, r3, #23
 80013a2:	0011      	movs	r1, r2
 80013a4:	0018      	movs	r0, r3
 80013a6:	f000 ff87 	bl	80022b8 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmarx);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013ae:	0018      	movs	r0, r3
 80013b0:	f000 fc9e 	bl	8001cf0 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 80013b4:	201b      	movs	r0, #27
 80013b6:	f000 fc36 	bl	8001c26 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 80013ba:	e018      	b.n	80013ee <HAL_UART_MspDeInit+0x72>
  else if(uartHandle->Instance==USART2)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a10      	ldr	r2, [pc, #64]	; (8001404 <HAL_UART_MspDeInit+0x88>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d113      	bne.n	80013ee <HAL_UART_MspDeInit+0x72>
    __HAL_RCC_USART2_CLK_DISABLE();
 80013c6:	4b0d      	ldr	r3, [pc, #52]	; (80013fc <HAL_UART_MspDeInit+0x80>)
 80013c8:	69da      	ldr	r2, [r3, #28]
 80013ca:	4b0c      	ldr	r3, [pc, #48]	; (80013fc <HAL_UART_MspDeInit+0x80>)
 80013cc:	490e      	ldr	r1, [pc, #56]	; (8001408 <HAL_UART_MspDeInit+0x8c>)
 80013ce:	400a      	ands	r2, r1
 80013d0:	61da      	str	r2, [r3, #28]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 80013d2:	2390      	movs	r3, #144	; 0x90
 80013d4:	05db      	lsls	r3, r3, #23
 80013d6:	210c      	movs	r1, #12
 80013d8:	0018      	movs	r0, r3
 80013da:	f000 ff6d 	bl	80022b8 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013e2:	0018      	movs	r0, r3
 80013e4:	f000 fc84 	bl	8001cf0 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 80013e8:	201c      	movs	r0, #28
 80013ea:	f000 fc1c 	bl	8001c26 <HAL_NVIC_DisableIRQ>
}
 80013ee:	46c0      	nop			; (mov r8, r8)
 80013f0:	46bd      	mov	sp, r7
 80013f2:	b002      	add	sp, #8
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	46c0      	nop			; (mov r8, r8)
 80013f8:	40013800 	.word	0x40013800
 80013fc:	40021000 	.word	0x40021000
 8001400:	ffffbfff 	.word	0xffffbfff
 8001404:	40004400 	.word	0x40004400
 8001408:	fffdffff 	.word	0xfffdffff

0800140c <ModbusInit>:
uint8_t TxData[256];
uint8_t buffData[256];


bool ModbusInit(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
  bool ret = false;
 8001412:	1dfb      	adds	r3, r7, #7
 8001414:	2200      	movs	r2, #0
 8001416:	701a      	strb	r2, [r3, #0]


  return ret;
 8001418:	1dfb      	adds	r3, r7, #7
 800141a:	781b      	ldrb	r3, [r3, #0]
}
 800141c:	0018      	movs	r0, r3
 800141e:	46bd      	mov	sp, r7
 8001420:	b002      	add	sp, #8
 8001422:	bd80      	pop	{r7, pc}

08001424 <sendData>:

void sendData (uint8_t *data, int size)
{
 8001424:	b5b0      	push	{r4, r5, r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	6039      	str	r1, [r7, #0]
  // we will calculate the CRC in this function itself
  uint16_t crc = crc16(data, size);
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	b29a      	uxth	r2, r3
 8001432:	250e      	movs	r5, #14
 8001434:	197c      	adds	r4, r7, r5
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	0011      	movs	r1, r2
 800143a:	0018      	movs	r0, r3
 800143c:	f000 fa44 	bl	80018c8 <crc16>
 8001440:	0003      	movs	r3, r0
 8001442:	8023      	strh	r3, [r4, #0]
  data[size] = crc&0xFF;   // CRC LOW
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	687a      	ldr	r2, [r7, #4]
 8001448:	18d3      	adds	r3, r2, r3
 800144a:	197a      	adds	r2, r7, r5
 800144c:	8812      	ldrh	r2, [r2, #0]
 800144e:	b2d2      	uxtb	r2, r2
 8001450:	701a      	strb	r2, [r3, #0]
  data[size+1] = (crc>>8)&0xFF;  // CRC HIGH
 8001452:	197b      	adds	r3, r7, r5
 8001454:	881b      	ldrh	r3, [r3, #0]
 8001456:	0a1b      	lsrs	r3, r3, #8
 8001458:	b299      	uxth	r1, r3
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	3301      	adds	r3, #1
 800145e:	687a      	ldr	r2, [r7, #4]
 8001460:	18d3      	adds	r3, r2, r3
 8001462:	b2ca      	uxtb	r2, r1
 8001464:	701a      	strb	r2, [r3, #0]

  uartWrite(_DEF_UART2, data, size+2);
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	3302      	adds	r3, #2
 800146a:	001a      	movs	r2, r3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	0019      	movs	r1, r3
 8001470:	2001      	movs	r0, #1
 8001472:	f7ff fd4f 	bl	8000f14 <uartWrite>
}
 8001476:	46c0      	nop			; (mov r8, r8)
 8001478:	46bd      	mov	sp, r7
 800147a:	b004      	add	sp, #16
 800147c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001480 <checkData>:

bool checkData (uint8_t *data, int size)
{
 8001480:	b5b0      	push	{r4, r5, r7, lr}
 8001482:	b086      	sub	sp, #24
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	6039      	str	r1, [r7, #0]
  bool ret = false;
 800148a:	2317      	movs	r3, #23
 800148c:	18fb      	adds	r3, r7, r3
 800148e:	2200      	movs	r2, #0
 8001490:	701a      	strb	r2, [r3, #0]
  // check the CRC
  uint16_t crc_HH;
  uint16_t crc_LO;

  for (int i=0; i<size; i++)
 8001492:	2300      	movs	r3, #0
 8001494:	613b      	str	r3, [r7, #16]
 8001496:	e00b      	b.n	80014b0 <checkData+0x30>
  {
    buffData[i] = data[i];
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	687a      	ldr	r2, [r7, #4]
 800149c:	18d3      	adds	r3, r2, r3
 800149e:	7819      	ldrb	r1, [r3, #0]
 80014a0:	4a21      	ldr	r2, [pc, #132]	; (8001528 <checkData+0xa8>)
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	18d3      	adds	r3, r2, r3
 80014a6:	1c0a      	adds	r2, r1, #0
 80014a8:	701a      	strb	r2, [r3, #0]
  for (int i=0; i<size; i++)
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	3301      	adds	r3, #1
 80014ae:	613b      	str	r3, [r7, #16]
 80014b0:	693a      	ldr	r2, [r7, #16]
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	dbef      	blt.n	8001498 <checkData+0x18>
  }

  uint16_t crc = crc16(buffData, size);
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	b29a      	uxth	r2, r3
 80014bc:	250e      	movs	r5, #14
 80014be:	197c      	adds	r4, r7, r5
 80014c0:	4b19      	ldr	r3, [pc, #100]	; (8001528 <checkData+0xa8>)
 80014c2:	0011      	movs	r1, r2
 80014c4:	0018      	movs	r0, r3
 80014c6:	f000 f9ff 	bl	80018c8 <crc16>
 80014ca:	0003      	movs	r3, r0
 80014cc:	8023      	strh	r3, [r4, #0]
  crc_LO = crc&0xFF;   // CRC LOW
 80014ce:	240c      	movs	r4, #12
 80014d0:	193b      	adds	r3, r7, r4
 80014d2:	0028      	movs	r0, r5
 80014d4:	183a      	adds	r2, r7, r0
 80014d6:	8812      	ldrh	r2, [r2, #0]
 80014d8:	21ff      	movs	r1, #255	; 0xff
 80014da:	400a      	ands	r2, r1
 80014dc:	801a      	strh	r2, [r3, #0]
  crc_HH = (crc>>8)&0xFF;  // CRC HIGH
 80014de:	210a      	movs	r1, #10
 80014e0:	187b      	adds	r3, r7, r1
 80014e2:	183a      	adds	r2, r7, r0
 80014e4:	8812      	ldrh	r2, [r2, #0]
 80014e6:	0a12      	lsrs	r2, r2, #8
 80014e8:	801a      	strh	r2, [r3, #0]

  if(crc_HH == data[size+1] && crc_LO == data[size] )
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	3301      	adds	r3, #1
 80014ee:	687a      	ldr	r2, [r7, #4]
 80014f0:	18d3      	adds	r3, r2, r3
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	b29b      	uxth	r3, r3
 80014f6:	187a      	adds	r2, r7, r1
 80014f8:	8812      	ldrh	r2, [r2, #0]
 80014fa:	429a      	cmp	r2, r3
 80014fc:	d10c      	bne.n	8001518 <checkData+0x98>
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	687a      	ldr	r2, [r7, #4]
 8001502:	18d3      	adds	r3, r2, r3
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	b29b      	uxth	r3, r3
 8001508:	193a      	adds	r2, r7, r4
 800150a:	8812      	ldrh	r2, [r2, #0]
 800150c:	429a      	cmp	r2, r3
 800150e:	d103      	bne.n	8001518 <checkData+0x98>
  {
    ret = true;
 8001510:	2317      	movs	r3, #23
 8001512:	18fb      	adds	r3, r7, r3
 8001514:	2201      	movs	r2, #1
 8001516:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8001518:	2317      	movs	r3, #23
 800151a:	18fb      	adds	r3, r7, r3
 800151c:	781b      	ldrb	r3, [r3, #0]
}
 800151e:	0018      	movs	r0, r3
 8001520:	46bd      	mov	sp, r7
 8001522:	b006      	add	sp, #24
 8001524:	bdb0      	pop	{r4, r5, r7, pc}
 8001526:	46c0      	nop			; (mov r8, r8)
 8001528:	20000864 	.word	0x20000864

0800152c <modbusException>:

void modbusException (uint8_t exceptioncode)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	0002      	movs	r2, r0
 8001534:	1dfb      	adds	r3, r7, #7
 8001536:	701a      	strb	r2, [r3, #0]
  //| SLAVE_ID | FUNCTION_CODE | Exception code | CRC     |
  //| 1 BYTE   |  1 BYTE       |    1 BYTE      | 2 BYTES |

  TxData[0] = RxData[0];       // slave ID
 8001538:	4b0c      	ldr	r3, [pc, #48]	; (800156c <modbusException+0x40>)
 800153a:	781a      	ldrb	r2, [r3, #0]
 800153c:	4b0c      	ldr	r3, [pc, #48]	; (8001570 <modbusException+0x44>)
 800153e:	701a      	strb	r2, [r3, #0]
  TxData[1] = RxData[1]|0x80;  // adding 1 to the MSB of the function code
 8001540:	4b0a      	ldr	r3, [pc, #40]	; (800156c <modbusException+0x40>)
 8001542:	785b      	ldrb	r3, [r3, #1]
 8001544:	2280      	movs	r2, #128	; 0x80
 8001546:	4252      	negs	r2, r2
 8001548:	4313      	orrs	r3, r2
 800154a:	b2da      	uxtb	r2, r3
 800154c:	4b08      	ldr	r3, [pc, #32]	; (8001570 <modbusException+0x44>)
 800154e:	705a      	strb	r2, [r3, #1]
  TxData[2] = exceptioncode;   // Load the Exception code
 8001550:	4b07      	ldr	r3, [pc, #28]	; (8001570 <modbusException+0x44>)
 8001552:	1dfa      	adds	r2, r7, #7
 8001554:	7812      	ldrb	r2, [r2, #0]
 8001556:	709a      	strb	r2, [r3, #2]
  sendData(TxData, 3);         // send Data... CRC will be calculated in the function
 8001558:	4b05      	ldr	r3, [pc, #20]	; (8001570 <modbusException+0x44>)
 800155a:	2103      	movs	r1, #3
 800155c:	0018      	movs	r0, r3
 800155e:	f7ff ff61 	bl	8001424 <sendData>
}
 8001562:	46c0      	nop			; (mov r8, r8)
 8001564:	46bd      	mov	sp, r7
 8001566:	b002      	add	sp, #8
 8001568:	bd80      	pop	{r7, pc}
 800156a:	46c0      	nop			; (mov r8, r8)
 800156c:	20000664 	.word	0x20000664
 8001570:	20000764 	.word	0x20000764

08001574 <readHoldingRegs>:


uint8_t readHoldingRegs (uint16_t* Holding_Registers_Database)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b086      	sub	sp, #24
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]

  /*check RX Data CRC*/
  if (checkData(RxData, 6) != true)  // maximum no. of Registers as per the PDF
 800157c:	4b49      	ldr	r3, [pc, #292]	; (80016a4 <readHoldingRegs+0x130>)
 800157e:	2106      	movs	r1, #6
 8001580:	0018      	movs	r0, r3
 8001582:	f7ff ff7d 	bl	8001480 <checkData>
 8001586:	0003      	movs	r3, r0
 8001588:	001a      	movs	r2, r3
 800158a:	2301      	movs	r3, #1
 800158c:	4053      	eors	r3, r2
 800158e:	b2db      	uxtb	r3, r3
 8001590:	2b00      	cmp	r3, #0
 8001592:	d004      	beq.n	800159e <readHoldingRegs+0x2a>
    {
      modbusException (ILLEGAL_DATA_VALUE);  // send an exception
 8001594:	2003      	movs	r0, #3
 8001596:	f7ff ffc9 	bl	800152c <modbusException>
      return 0;
 800159a:	2300      	movs	r3, #0
 800159c:	e07e      	b.n	800169c <readHoldingRegs+0x128>
    }

  uint16_t startAddr = ((RxData[2]<<8)|RxData[3]);  // start Register Address
 800159e:	4b41      	ldr	r3, [pc, #260]	; (80016a4 <readHoldingRegs+0x130>)
 80015a0:	789b      	ldrb	r3, [r3, #2]
 80015a2:	021b      	lsls	r3, r3, #8
 80015a4:	b21a      	sxth	r2, r3
 80015a6:	4b3f      	ldr	r3, [pc, #252]	; (80016a4 <readHoldingRegs+0x130>)
 80015a8:	78db      	ldrb	r3, [r3, #3]
 80015aa:	b21b      	sxth	r3, r3
 80015ac:	4313      	orrs	r3, r2
 80015ae:	b21a      	sxth	r2, r3
 80015b0:	2316      	movs	r3, #22
 80015b2:	18fb      	adds	r3, r7, r3
 80015b4:	801a      	strh	r2, [r3, #0]
  uint16_t numRegs = ((RxData[4]<<8)|RxData[5]);   // number to registers master has requested
 80015b6:	4b3b      	ldr	r3, [pc, #236]	; (80016a4 <readHoldingRegs+0x130>)
 80015b8:	791b      	ldrb	r3, [r3, #4]
 80015ba:	021b      	lsls	r3, r3, #8
 80015bc:	b21a      	sxth	r2, r3
 80015be:	4b39      	ldr	r3, [pc, #228]	; (80016a4 <readHoldingRegs+0x130>)
 80015c0:	795b      	ldrb	r3, [r3, #5]
 80015c2:	b21b      	sxth	r3, r3
 80015c4:	4313      	orrs	r3, r2
 80015c6:	b21a      	sxth	r2, r3
 80015c8:	210a      	movs	r1, #10
 80015ca:	187b      	adds	r3, r7, r1
 80015cc:	801a      	strh	r2, [r3, #0]
  if ((numRegs<1)||(numRegs>125))  // maximum no. of Registers as per the PDF
 80015ce:	000a      	movs	r2, r1
 80015d0:	18bb      	adds	r3, r7, r2
 80015d2:	881b      	ldrh	r3, [r3, #0]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d003      	beq.n	80015e0 <readHoldingRegs+0x6c>
 80015d8:	18bb      	adds	r3, r7, r2
 80015da:	881b      	ldrh	r3, [r3, #0]
 80015dc:	2b7d      	cmp	r3, #125	; 0x7d
 80015de:	d904      	bls.n	80015ea <readHoldingRegs+0x76>
  {
    modbusException (ILLEGAL_DATA_VALUE);  // send an exception
 80015e0:	2003      	movs	r0, #3
 80015e2:	f7ff ffa3 	bl	800152c <modbusException>
    return 0;
 80015e6:	2300      	movs	r3, #0
 80015e8:	e058      	b.n	800169c <readHoldingRegs+0x128>
  }

  uint16_t endAddr = startAddr+numRegs-1;  // end Register
 80015ea:	2316      	movs	r3, #22
 80015ec:	18fa      	adds	r2, r7, r3
 80015ee:	230a      	movs	r3, #10
 80015f0:	18fb      	adds	r3, r7, r3
 80015f2:	8812      	ldrh	r2, [r2, #0]
 80015f4:	881b      	ldrh	r3, [r3, #0]
 80015f6:	18d3      	adds	r3, r2, r3
 80015f8:	b29a      	uxth	r2, r3
 80015fa:	2108      	movs	r1, #8
 80015fc:	187b      	adds	r3, r7, r1
 80015fe:	3a01      	subs	r2, #1
 8001600:	801a      	strh	r2, [r3, #0]
  if (endAddr>49)  // end Register can not be more than 49 as we only have record of 50 Registers in total
 8001602:	187b      	adds	r3, r7, r1
 8001604:	881b      	ldrh	r3, [r3, #0]
 8001606:	2b31      	cmp	r3, #49	; 0x31
 8001608:	d904      	bls.n	8001614 <readHoldingRegs+0xa0>
  {
    modbusException(ILLEGAL_DATA_ADDRESS);   // send an exception
 800160a:	2002      	movs	r0, #2
 800160c:	f7ff ff8e 	bl	800152c <modbusException>
    return 0;
 8001610:	2300      	movs	r3, #0
 8001612:	e043      	b.n	800169c <readHoldingRegs+0x128>
  // Prepare TxData buffer

  //| SLAVE_ID | FUNCTION_CODE | BYTE COUNT | DATA      | CRC     |
  //| 1 BYTE   |  1 BYTE       |  1 BYTE    | N*2 BYTES | 2 BYTES |

  TxData[0] = SLAVE_ID;  // slave ID
 8001614:	4b24      	ldr	r3, [pc, #144]	; (80016a8 <readHoldingRegs+0x134>)
 8001616:	2201      	movs	r2, #1
 8001618:	701a      	strb	r2, [r3, #0]
  TxData[1] = RxData[1];  // function code
 800161a:	4b22      	ldr	r3, [pc, #136]	; (80016a4 <readHoldingRegs+0x130>)
 800161c:	785a      	ldrb	r2, [r3, #1]
 800161e:	4b22      	ldr	r3, [pc, #136]	; (80016a8 <readHoldingRegs+0x134>)
 8001620:	705a      	strb	r2, [r3, #1]
  TxData[2] = numRegs*2;  // Byte count
 8001622:	230a      	movs	r3, #10
 8001624:	18fb      	adds	r3, r7, r3
 8001626:	881b      	ldrh	r3, [r3, #0]
 8001628:	b2db      	uxtb	r3, r3
 800162a:	18db      	adds	r3, r3, r3
 800162c:	b2da      	uxtb	r2, r3
 800162e:	4b1e      	ldr	r3, [pc, #120]	; (80016a8 <readHoldingRegs+0x134>)
 8001630:	709a      	strb	r2, [r3, #2]
  int indx = 3;  // we need to keep track of how many bytes has been stored in TxData Buffer
 8001632:	2303      	movs	r3, #3
 8001634:	613b      	str	r3, [r7, #16]

  for (int i=0; i<numRegs; i++)   // Load the actual data into TxData buffer
 8001636:	2300      	movs	r3, #0
 8001638:	60fb      	str	r3, [r7, #12]
 800163a:	e022      	b.n	8001682 <readHoldingRegs+0x10e>
  {
    TxData[indx++] = (Holding_Registers_Database[startAddr]>>8)&0xFF;  // extract the higher byte
 800163c:	2016      	movs	r0, #22
 800163e:	183b      	adds	r3, r7, r0
 8001640:	881b      	ldrh	r3, [r3, #0]
 8001642:	005b      	lsls	r3, r3, #1
 8001644:	687a      	ldr	r2, [r7, #4]
 8001646:	18d3      	adds	r3, r2, r3
 8001648:	881b      	ldrh	r3, [r3, #0]
 800164a:	0a1b      	lsrs	r3, r3, #8
 800164c:	b299      	uxth	r1, r3
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	1c5a      	adds	r2, r3, #1
 8001652:	613a      	str	r2, [r7, #16]
 8001654:	b2c9      	uxtb	r1, r1
 8001656:	4a14      	ldr	r2, [pc, #80]	; (80016a8 <readHoldingRegs+0x134>)
 8001658:	54d1      	strb	r1, [r2, r3]
    TxData[indx++] = (Holding_Registers_Database[startAddr])&0xFF;   // extract the lower byte
 800165a:	183b      	adds	r3, r7, r0
 800165c:	881b      	ldrh	r3, [r3, #0]
 800165e:	005b      	lsls	r3, r3, #1
 8001660:	687a      	ldr	r2, [r7, #4]
 8001662:	18d3      	adds	r3, r2, r3
 8001664:	8819      	ldrh	r1, [r3, #0]
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	1c5a      	adds	r2, r3, #1
 800166a:	613a      	str	r2, [r7, #16]
 800166c:	b2c9      	uxtb	r1, r1
 800166e:	4a0e      	ldr	r2, [pc, #56]	; (80016a8 <readHoldingRegs+0x134>)
 8001670:	54d1      	strb	r1, [r2, r3]
    startAddr++;  // increment the register address
 8001672:	183b      	adds	r3, r7, r0
 8001674:	881a      	ldrh	r2, [r3, #0]
 8001676:	183b      	adds	r3, r7, r0
 8001678:	3201      	adds	r2, #1
 800167a:	801a      	strh	r2, [r3, #0]
  for (int i=0; i<numRegs; i++)   // Load the actual data into TxData buffer
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	3301      	adds	r3, #1
 8001680:	60fb      	str	r3, [r7, #12]
 8001682:	230a      	movs	r3, #10
 8001684:	18fb      	adds	r3, r7, r3
 8001686:	881b      	ldrh	r3, [r3, #0]
 8001688:	68fa      	ldr	r2, [r7, #12]
 800168a:	429a      	cmp	r2, r3
 800168c:	dbd6      	blt.n	800163c <readHoldingRegs+0xc8>
  }

  sendData(TxData, indx);  // send data... CRC will be calculated in the function itself
 800168e:	693a      	ldr	r2, [r7, #16]
 8001690:	4b05      	ldr	r3, [pc, #20]	; (80016a8 <readHoldingRegs+0x134>)
 8001692:	0011      	movs	r1, r2
 8001694:	0018      	movs	r0, r3
 8001696:	f7ff fec5 	bl	8001424 <sendData>
  return 1;   // success
 800169a:	2301      	movs	r3, #1
}
 800169c:	0018      	movs	r0, r3
 800169e:	46bd      	mov	sp, r7
 80016a0:	b006      	add	sp, #24
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	20000664 	.word	0x20000664
 80016a8:	20000764 	.word	0x20000764

080016ac <readInputRegs>:

uint8_t readInputRegs (uint16_t* Input_Registers_Database)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b086      	sub	sp, #24
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  /*check RX Data CRC*/
  if (checkData(RxData, 6) != true)  // maximum no. of Registers as per the PDF
 80016b4:	4b49      	ldr	r3, [pc, #292]	; (80017dc <readInputRegs+0x130>)
 80016b6:	2106      	movs	r1, #6
 80016b8:	0018      	movs	r0, r3
 80016ba:	f7ff fee1 	bl	8001480 <checkData>
 80016be:	0003      	movs	r3, r0
 80016c0:	001a      	movs	r2, r3
 80016c2:	2301      	movs	r3, #1
 80016c4:	4053      	eors	r3, r2
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d004      	beq.n	80016d6 <readInputRegs+0x2a>
    {
      modbusException (ILLEGAL_DATA_VALUE);  // send an exception
 80016cc:	2003      	movs	r0, #3
 80016ce:	f7ff ff2d 	bl	800152c <modbusException>
      return 0;
 80016d2:	2300      	movs	r3, #0
 80016d4:	e07e      	b.n	80017d4 <readInputRegs+0x128>
    }

  uint16_t startAddr = ((RxData[2]<<8)|RxData[3]);  // start Register Address
 80016d6:	4b41      	ldr	r3, [pc, #260]	; (80017dc <readInputRegs+0x130>)
 80016d8:	789b      	ldrb	r3, [r3, #2]
 80016da:	021b      	lsls	r3, r3, #8
 80016dc:	b21a      	sxth	r2, r3
 80016de:	4b3f      	ldr	r3, [pc, #252]	; (80017dc <readInputRegs+0x130>)
 80016e0:	78db      	ldrb	r3, [r3, #3]
 80016e2:	b21b      	sxth	r3, r3
 80016e4:	4313      	orrs	r3, r2
 80016e6:	b21a      	sxth	r2, r3
 80016e8:	2316      	movs	r3, #22
 80016ea:	18fb      	adds	r3, r7, r3
 80016ec:	801a      	strh	r2, [r3, #0]
  uint16_t numRegs = ((RxData[4]<<8)|RxData[5]);   // number to registers master has requested
 80016ee:	4b3b      	ldr	r3, [pc, #236]	; (80017dc <readInputRegs+0x130>)
 80016f0:	791b      	ldrb	r3, [r3, #4]
 80016f2:	021b      	lsls	r3, r3, #8
 80016f4:	b21a      	sxth	r2, r3
 80016f6:	4b39      	ldr	r3, [pc, #228]	; (80017dc <readInputRegs+0x130>)
 80016f8:	795b      	ldrb	r3, [r3, #5]
 80016fa:	b21b      	sxth	r3, r3
 80016fc:	4313      	orrs	r3, r2
 80016fe:	b21a      	sxth	r2, r3
 8001700:	210a      	movs	r1, #10
 8001702:	187b      	adds	r3, r7, r1
 8001704:	801a      	strh	r2, [r3, #0]
  if ((numRegs<1)||(numRegs>125))  // maximum no. of Registers as per the PDF
 8001706:	000a      	movs	r2, r1
 8001708:	18bb      	adds	r3, r7, r2
 800170a:	881b      	ldrh	r3, [r3, #0]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d003      	beq.n	8001718 <readInputRegs+0x6c>
 8001710:	18bb      	adds	r3, r7, r2
 8001712:	881b      	ldrh	r3, [r3, #0]
 8001714:	2b7d      	cmp	r3, #125	; 0x7d
 8001716:	d904      	bls.n	8001722 <readInputRegs+0x76>
  {
    modbusException (ILLEGAL_DATA_VALUE);  // send an exception
 8001718:	2003      	movs	r0, #3
 800171a:	f7ff ff07 	bl	800152c <modbusException>
    return 0;
 800171e:	2300      	movs	r3, #0
 8001720:	e058      	b.n	80017d4 <readInputRegs+0x128>
  }

  uint16_t endAddr = startAddr+numRegs-1;  // end Register
 8001722:	2316      	movs	r3, #22
 8001724:	18fa      	adds	r2, r7, r3
 8001726:	230a      	movs	r3, #10
 8001728:	18fb      	adds	r3, r7, r3
 800172a:	8812      	ldrh	r2, [r2, #0]
 800172c:	881b      	ldrh	r3, [r3, #0]
 800172e:	18d3      	adds	r3, r2, r3
 8001730:	b29a      	uxth	r2, r3
 8001732:	2108      	movs	r1, #8
 8001734:	187b      	adds	r3, r7, r1
 8001736:	3a01      	subs	r2, #1
 8001738:	801a      	strh	r2, [r3, #0]
  if (endAddr>49)  // end Register can not be more than 49 as we only have record of 50 Registers in total
 800173a:	187b      	adds	r3, r7, r1
 800173c:	881b      	ldrh	r3, [r3, #0]
 800173e:	2b31      	cmp	r3, #49	; 0x31
 8001740:	d904      	bls.n	800174c <readInputRegs+0xa0>
  {
    modbusException(ILLEGAL_DATA_ADDRESS);   // send an exception
 8001742:	2002      	movs	r0, #2
 8001744:	f7ff fef2 	bl	800152c <modbusException>
    return 0;
 8001748:	2300      	movs	r3, #0
 800174a:	e043      	b.n	80017d4 <readInputRegs+0x128>
  // Prepare TxData buffer

  //| SLAVE_ID | FUNCTION_CODE | BYTE COUNT | DATA      | CRC     |
  //| 1 BYTE   |  1 BYTE       |  1 BYTE    | N*2 BYTES | 2 BYTES |

  TxData[0] = SLAVE_ID;  // slave ID
 800174c:	4b24      	ldr	r3, [pc, #144]	; (80017e0 <readInputRegs+0x134>)
 800174e:	2201      	movs	r2, #1
 8001750:	701a      	strb	r2, [r3, #0]
  TxData[1] = RxData[1];  // function code
 8001752:	4b22      	ldr	r3, [pc, #136]	; (80017dc <readInputRegs+0x130>)
 8001754:	785a      	ldrb	r2, [r3, #1]
 8001756:	4b22      	ldr	r3, [pc, #136]	; (80017e0 <readInputRegs+0x134>)
 8001758:	705a      	strb	r2, [r3, #1]
  TxData[2] = numRegs*2;  // Byte count
 800175a:	230a      	movs	r3, #10
 800175c:	18fb      	adds	r3, r7, r3
 800175e:	881b      	ldrh	r3, [r3, #0]
 8001760:	b2db      	uxtb	r3, r3
 8001762:	18db      	adds	r3, r3, r3
 8001764:	b2da      	uxtb	r2, r3
 8001766:	4b1e      	ldr	r3, [pc, #120]	; (80017e0 <readInputRegs+0x134>)
 8001768:	709a      	strb	r2, [r3, #2]
  int indx = 3;  // we need to keep track of how many bytes has been stored in TxData Buffer
 800176a:	2303      	movs	r3, #3
 800176c:	613b      	str	r3, [r7, #16]

  for (int i=0; i<numRegs; i++)   // Load the actual data into TxData buffer
 800176e:	2300      	movs	r3, #0
 8001770:	60fb      	str	r3, [r7, #12]
 8001772:	e022      	b.n	80017ba <readInputRegs+0x10e>
  {
    TxData[indx++] = (Input_Registers_Database[startAddr]>>8)&0xFF;  // extract the higher byte
 8001774:	2016      	movs	r0, #22
 8001776:	183b      	adds	r3, r7, r0
 8001778:	881b      	ldrh	r3, [r3, #0]
 800177a:	005b      	lsls	r3, r3, #1
 800177c:	687a      	ldr	r2, [r7, #4]
 800177e:	18d3      	adds	r3, r2, r3
 8001780:	881b      	ldrh	r3, [r3, #0]
 8001782:	0a1b      	lsrs	r3, r3, #8
 8001784:	b299      	uxth	r1, r3
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	1c5a      	adds	r2, r3, #1
 800178a:	613a      	str	r2, [r7, #16]
 800178c:	b2c9      	uxtb	r1, r1
 800178e:	4a14      	ldr	r2, [pc, #80]	; (80017e0 <readInputRegs+0x134>)
 8001790:	54d1      	strb	r1, [r2, r3]
    TxData[indx++] = (Input_Registers_Database[startAddr])&0xFF;   // extract the lower byte
 8001792:	183b      	adds	r3, r7, r0
 8001794:	881b      	ldrh	r3, [r3, #0]
 8001796:	005b      	lsls	r3, r3, #1
 8001798:	687a      	ldr	r2, [r7, #4]
 800179a:	18d3      	adds	r3, r2, r3
 800179c:	8819      	ldrh	r1, [r3, #0]
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	1c5a      	adds	r2, r3, #1
 80017a2:	613a      	str	r2, [r7, #16]
 80017a4:	b2c9      	uxtb	r1, r1
 80017a6:	4a0e      	ldr	r2, [pc, #56]	; (80017e0 <readInputRegs+0x134>)
 80017a8:	54d1      	strb	r1, [r2, r3]
    startAddr++;  // increment the register address
 80017aa:	183b      	adds	r3, r7, r0
 80017ac:	881a      	ldrh	r2, [r3, #0]
 80017ae:	183b      	adds	r3, r7, r0
 80017b0:	3201      	adds	r2, #1
 80017b2:	801a      	strh	r2, [r3, #0]
  for (int i=0; i<numRegs; i++)   // Load the actual data into TxData buffer
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	3301      	adds	r3, #1
 80017b8:	60fb      	str	r3, [r7, #12]
 80017ba:	230a      	movs	r3, #10
 80017bc:	18fb      	adds	r3, r7, r3
 80017be:	881b      	ldrh	r3, [r3, #0]
 80017c0:	68fa      	ldr	r2, [r7, #12]
 80017c2:	429a      	cmp	r2, r3
 80017c4:	dbd6      	blt.n	8001774 <readInputRegs+0xc8>
  }
  //uartPrintf(_DEF_UART1, "%X", Input_Registers_Database[0]);
  sendData(TxData, indx);  // send data... CRC will be calculated in the function itself
 80017c6:	693a      	ldr	r2, [r7, #16]
 80017c8:	4b05      	ldr	r3, [pc, #20]	; (80017e0 <readInputRegs+0x134>)
 80017ca:	0011      	movs	r1, r2
 80017cc:	0018      	movs	r0, r3
 80017ce:	f7ff fe29 	bl	8001424 <sendData>
  return 1;   // success
 80017d2:	2301      	movs	r3, #1
}
 80017d4:	0018      	movs	r0, r3
 80017d6:	46bd      	mov	sp, r7
 80017d8:	b006      	add	sp, #24
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	20000664 	.word	0x20000664
 80017e0:	20000764 	.word	0x20000764

080017e4 <writeSingleReg>:

uint8_t writeSingleReg (uint16_t* Holding_Registers_Database)
{
 80017e4:	b590      	push	{r4, r7, lr}
 80017e6:	b085      	sub	sp, #20
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]

  /*check RX Data CRC*/
  if (checkData(RxData, 6)!=true)  // maximum no. of Registers as per the PDF
 80017ec:	4b33      	ldr	r3, [pc, #204]	; (80018bc <writeSingleReg+0xd8>)
 80017ee:	2106      	movs	r1, #6
 80017f0:	0018      	movs	r0, r3
 80017f2:	f7ff fe45 	bl	8001480 <checkData>
 80017f6:	0003      	movs	r3, r0
 80017f8:	001a      	movs	r2, r3
 80017fa:	2301      	movs	r3, #1
 80017fc:	4053      	eors	r3, r2
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	2b00      	cmp	r3, #0
 8001802:	d004      	beq.n	800180e <writeSingleReg+0x2a>
    {
      modbusException (ILLEGAL_DATA_VALUE);  // send an exception
 8001804:	2003      	movs	r0, #3
 8001806:	f7ff fe91 	bl	800152c <modbusException>
      return 0;
 800180a:	2300      	movs	r3, #0
 800180c:	e051      	b.n	80018b2 <writeSingleReg+0xce>
    }

  uint16_t startAddr = ((RxData[2]<<8)|RxData[3]);  // start Register Address
 800180e:	4b2b      	ldr	r3, [pc, #172]	; (80018bc <writeSingleReg+0xd8>)
 8001810:	789b      	ldrb	r3, [r3, #2]
 8001812:	021b      	lsls	r3, r3, #8
 8001814:	b21a      	sxth	r2, r3
 8001816:	4b29      	ldr	r3, [pc, #164]	; (80018bc <writeSingleReg+0xd8>)
 8001818:	78db      	ldrb	r3, [r3, #3]
 800181a:	b21b      	sxth	r3, r3
 800181c:	4313      	orrs	r3, r2
 800181e:	b21a      	sxth	r2, r3
 8001820:	210e      	movs	r1, #14
 8001822:	187b      	adds	r3, r7, r1
 8001824:	801a      	strh	r2, [r3, #0]
  if (startAddr>49)  // The Register Address can not be more than 49 as we only have record of 50 Registers in total
 8001826:	187b      	adds	r3, r7, r1
 8001828:	881b      	ldrh	r3, [r3, #0]
 800182a:	2b31      	cmp	r3, #49	; 0x31
 800182c:	d904      	bls.n	8001838 <writeSingleReg+0x54>
  {
    modbusException(ILLEGAL_DATA_ADDRESS);   // send an exception
 800182e:	2002      	movs	r0, #2
 8001830:	f7ff fe7c 	bl	800152c <modbusException>
    return 0;
 8001834:	2300      	movs	r3, #0
 8001836:	e03c      	b.n	80018b2 <writeSingleReg+0xce>

  /* Save the 16 bit data
   * Data is the combination of 2 bytes, RxData[4] and RxData[5]
   */

  Holding_Registers_Database[startAddr] = (RxData[4]<<8)|RxData[5];
 8001838:	4b20      	ldr	r3, [pc, #128]	; (80018bc <writeSingleReg+0xd8>)
 800183a:	791b      	ldrb	r3, [r3, #4]
 800183c:	021b      	lsls	r3, r3, #8
 800183e:	b21a      	sxth	r2, r3
 8001840:	4b1e      	ldr	r3, [pc, #120]	; (80018bc <writeSingleReg+0xd8>)
 8001842:	795b      	ldrb	r3, [r3, #5]
 8001844:	b21b      	sxth	r3, r3
 8001846:	4313      	orrs	r3, r2
 8001848:	b219      	sxth	r1, r3
 800184a:	240e      	movs	r4, #14
 800184c:	193b      	adds	r3, r7, r4
 800184e:	881b      	ldrh	r3, [r3, #0]
 8001850:	005b      	lsls	r3, r3, #1
 8001852:	687a      	ldr	r2, [r7, #4]
 8001854:	18d3      	adds	r3, r2, r3
 8001856:	b28a      	uxth	r2, r1
 8001858:	801a      	strh	r2, [r3, #0]
  // Prepare Response

  //| SLAVE_ID | FUNCTION_CODE | Start Addr | Data     | CRC     |
  //| 1 BYTE   |  1 BYTE       |  2 BYTE    | 2 BYTES  | 2 BYTES |

  TxData[0] = SLAVE_ID;    // slave ID
 800185a:	4b19      	ldr	r3, [pc, #100]	; (80018c0 <writeSingleReg+0xdc>)
 800185c:	2201      	movs	r2, #1
 800185e:	701a      	strb	r2, [r3, #0]
  TxData[1] = RxData[1];   // function code
 8001860:	4b16      	ldr	r3, [pc, #88]	; (80018bc <writeSingleReg+0xd8>)
 8001862:	785a      	ldrb	r2, [r3, #1]
 8001864:	4b16      	ldr	r3, [pc, #88]	; (80018c0 <writeSingleReg+0xdc>)
 8001866:	705a      	strb	r2, [r3, #1]
  TxData[2] = RxData[2];   // Start Addr HIGH Byte
 8001868:	4b14      	ldr	r3, [pc, #80]	; (80018bc <writeSingleReg+0xd8>)
 800186a:	789a      	ldrb	r2, [r3, #2]
 800186c:	4b14      	ldr	r3, [pc, #80]	; (80018c0 <writeSingleReg+0xdc>)
 800186e:	709a      	strb	r2, [r3, #2]
  TxData[3] = RxData[3];   // Start Addr LOW Byte
 8001870:	4b12      	ldr	r3, [pc, #72]	; (80018bc <writeSingleReg+0xd8>)
 8001872:	78da      	ldrb	r2, [r3, #3]
 8001874:	4b12      	ldr	r3, [pc, #72]	; (80018c0 <writeSingleReg+0xdc>)
 8001876:	70da      	strb	r2, [r3, #3]
  TxData[4] = RxData[4];   // Reg Data HIGH Byte
 8001878:	4b10      	ldr	r3, [pc, #64]	; (80018bc <writeSingleReg+0xd8>)
 800187a:	791a      	ldrb	r2, [r3, #4]
 800187c:	4b10      	ldr	r3, [pc, #64]	; (80018c0 <writeSingleReg+0xdc>)
 800187e:	711a      	strb	r2, [r3, #4]
  TxData[5] = RxData[5];   // Reg Data LOW  Byte
 8001880:	4b0e      	ldr	r3, [pc, #56]	; (80018bc <writeSingleReg+0xd8>)
 8001882:	795a      	ldrb	r2, [r3, #5]
 8001884:	4b0e      	ldr	r3, [pc, #56]	; (80018c0 <writeSingleReg+0xdc>)
 8001886:	715a      	strb	r2, [r3, #5]

  sendData(TxData, 6);  // send data... CRC will be calculated in the function itself
 8001888:	4b0d      	ldr	r3, [pc, #52]	; (80018c0 <writeSingleReg+0xdc>)
 800188a:	2106      	movs	r1, #6
 800188c:	0018      	movs	r0, r3
 800188e:	f7ff fdc9 	bl	8001424 <sendData>

  /* Change CLI Mode State */
  if(startAddr == 7 &&((RxData[4]<<8)|RxData[5]) == 0xffff)
 8001892:	193b      	adds	r3, r7, r4
 8001894:	881b      	ldrh	r3, [r3, #0]
 8001896:	2b07      	cmp	r3, #7
 8001898:	d10a      	bne.n	80018b0 <writeSingleReg+0xcc>
 800189a:	4b08      	ldr	r3, [pc, #32]	; (80018bc <writeSingleReg+0xd8>)
 800189c:	791b      	ldrb	r3, [r3, #4]
 800189e:	021b      	lsls	r3, r3, #8
 80018a0:	4a06      	ldr	r2, [pc, #24]	; (80018bc <writeSingleReg+0xd8>)
 80018a2:	7952      	ldrb	r2, [r2, #5]
 80018a4:	4313      	orrs	r3, r2
 80018a6:	4a07      	ldr	r2, [pc, #28]	; (80018c4 <writeSingleReg+0xe0>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d101      	bne.n	80018b0 <writeSingleReg+0xcc>
  {
    return 2;
 80018ac:	2302      	movs	r3, #2
 80018ae:	e000      	b.n	80018b2 <writeSingleReg+0xce>
  }

  return 1;   // success
 80018b0:	2301      	movs	r3, #1
}
 80018b2:	0018      	movs	r0, r3
 80018b4:	46bd      	mov	sp, r7
 80018b6:	b005      	add	sp, #20
 80018b8:	bd90      	pop	{r4, r7, pc}
 80018ba:	46c0      	nop			; (mov r8, r8)
 80018bc:	20000664 	.word	0x20000664
 80018c0:	20000764 	.word	0x20000764
 80018c4:	0000ffff 	.word	0x0000ffff

080018c8 <crc16>:
    0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42,
    0x43, 0x83, 0x41, 0x81, 0x80, 0x40
};

uint16_t crc16(uint8_t *buffer, uint16_t buffer_length)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	000a      	movs	r2, r1
 80018d2:	1cbb      	adds	r3, r7, #2
 80018d4:	801a      	strh	r2, [r3, #0]
    uint8_t crc_hi = 0xFF; /* high CRC byte initialized */
 80018d6:	230f      	movs	r3, #15
 80018d8:	18fb      	adds	r3, r7, r3
 80018da:	22ff      	movs	r2, #255	; 0xff
 80018dc:	701a      	strb	r2, [r3, #0]
    uint8_t crc_lo = 0xFF; /* low CRC byte initialized */
 80018de:	230e      	movs	r3, #14
 80018e0:	18fb      	adds	r3, r7, r3
 80018e2:	22ff      	movs	r2, #255	; 0xff
 80018e4:	701a      	strb	r2, [r3, #0]
    unsigned int i; /* will index into CRC lookup */

    /* pass through message buffer */
    while (buffer_length--) {
 80018e6:	e019      	b.n	800191c <crc16+0x54>
        i = crc_lo ^ *buffer++; /* calculate the CRC  */
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	1c5a      	adds	r2, r3, #1
 80018ec:	607a      	str	r2, [r7, #4]
 80018ee:	781a      	ldrb	r2, [r3, #0]
 80018f0:	200e      	movs	r0, #14
 80018f2:	183b      	adds	r3, r7, r0
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	4053      	eors	r3, r2
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	60bb      	str	r3, [r7, #8]
        crc_lo = crc_hi ^ table_crc_hi[i];
 80018fc:	4a13      	ldr	r2, [pc, #76]	; (800194c <crc16+0x84>)
 80018fe:	68bb      	ldr	r3, [r7, #8]
 8001900:	18d3      	adds	r3, r2, r3
 8001902:	7819      	ldrb	r1, [r3, #0]
 8001904:	183b      	adds	r3, r7, r0
 8001906:	200f      	movs	r0, #15
 8001908:	183a      	adds	r2, r7, r0
 800190a:	7812      	ldrb	r2, [r2, #0]
 800190c:	404a      	eors	r2, r1
 800190e:	701a      	strb	r2, [r3, #0]
        crc_hi = table_crc_lo[i];
 8001910:	183b      	adds	r3, r7, r0
 8001912:	490f      	ldr	r1, [pc, #60]	; (8001950 <crc16+0x88>)
 8001914:	68ba      	ldr	r2, [r7, #8]
 8001916:	188a      	adds	r2, r1, r2
 8001918:	7812      	ldrb	r2, [r2, #0]
 800191a:	701a      	strb	r2, [r3, #0]
    while (buffer_length--) {
 800191c:	1cbb      	adds	r3, r7, #2
 800191e:	881b      	ldrh	r3, [r3, #0]
 8001920:	1cba      	adds	r2, r7, #2
 8001922:	1e59      	subs	r1, r3, #1
 8001924:	8011      	strh	r1, [r2, #0]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d1de      	bne.n	80018e8 <crc16+0x20>
    }

    return (crc_hi << 8 | crc_lo);
 800192a:	230f      	movs	r3, #15
 800192c:	18fb      	adds	r3, r7, r3
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	021b      	lsls	r3, r3, #8
 8001932:	b21a      	sxth	r2, r3
 8001934:	230e      	movs	r3, #14
 8001936:	18fb      	adds	r3, r7, r3
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	b21b      	sxth	r3, r3
 800193c:	4313      	orrs	r3, r2
 800193e:	b21b      	sxth	r3, r3
 8001940:	b29b      	uxth	r3, r3
}
 8001942:	0018      	movs	r0, r3
 8001944:	46bd      	mov	sp, r7
 8001946:	b004      	add	sp, #16
 8001948:	bd80      	pop	{r7, pc}
 800194a:	46c0      	nop			; (mov r8, r8)
 800194c:	08005680 	.word	0x08005680
 8001950:	08005780 	.word	0x08005780

08001954 <hwInit>:




void hwInit(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  bspInit();
 8001958:	f7fe fd80 	bl	800045c <bspInit>
  //cliInit();

  ledInit();
 800195c:	f7ff f832 	bl	80009c4 <ledInit>
  uartInit();
 8001960:	f7ff f8d8 	bl	8000b14 <uartInit>
  buttonInit();
 8001964:	f7fe ffb6 	bl	80008d4 <buttonInit>
  ModbusInit();
 8001968:	f7ff fd50 	bl	800140c <ModbusInit>
  flashInit();
 800196c:	f7ff f804 	bl	8000978 <flashInit>

}
 8001970:	46c0      	nop			; (mov r8, r8)
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
	...

08001978 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800197c:	4b07      	ldr	r3, [pc, #28]	; (800199c <HAL_Init+0x24>)
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	4b06      	ldr	r3, [pc, #24]	; (800199c <HAL_Init+0x24>)
 8001982:	2110      	movs	r1, #16
 8001984:	430a      	orrs	r2, r1
 8001986:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001988:	2003      	movs	r0, #3
 800198a:	f000 f809 	bl	80019a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800198e:	f7fe fdfd 	bl	800058c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001992:	2300      	movs	r3, #0
}
 8001994:	0018      	movs	r0, r3
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	46c0      	nop			; (mov r8, r8)
 800199c:	40022000 	.word	0x40022000

080019a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019a0:	b590      	push	{r4, r7, lr}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019a8:	4b14      	ldr	r3, [pc, #80]	; (80019fc <HAL_InitTick+0x5c>)
 80019aa:	681c      	ldr	r4, [r3, #0]
 80019ac:	4b14      	ldr	r3, [pc, #80]	; (8001a00 <HAL_InitTick+0x60>)
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	0019      	movs	r1, r3
 80019b2:	23fa      	movs	r3, #250	; 0xfa
 80019b4:	0098      	lsls	r0, r3, #2
 80019b6:	f7fe fbb1 	bl	800011c <__udivsi3>
 80019ba:	0003      	movs	r3, r0
 80019bc:	0019      	movs	r1, r3
 80019be:	0020      	movs	r0, r4
 80019c0:	f7fe fbac 	bl	800011c <__udivsi3>
 80019c4:	0003      	movs	r3, r0
 80019c6:	0018      	movs	r0, r3
 80019c8:	f000 f93d 	bl	8001c46 <HAL_SYSTICK_Config>
 80019cc:	1e03      	subs	r3, r0, #0
 80019ce:	d001      	beq.n	80019d4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e00f      	b.n	80019f4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2b03      	cmp	r3, #3
 80019d8:	d80b      	bhi.n	80019f2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019da:	6879      	ldr	r1, [r7, #4]
 80019dc:	2301      	movs	r3, #1
 80019de:	425b      	negs	r3, r3
 80019e0:	2200      	movs	r2, #0
 80019e2:	0018      	movs	r0, r3
 80019e4:	f000 f8fa 	bl	8001bdc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019e8:	4b06      	ldr	r3, [pc, #24]	; (8001a04 <HAL_InitTick+0x64>)
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80019ee:	2300      	movs	r3, #0
 80019f0:	e000      	b.n	80019f4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
}
 80019f4:	0018      	movs	r0, r3
 80019f6:	46bd      	mov	sp, r7
 80019f8:	b003      	add	sp, #12
 80019fa:	bd90      	pop	{r4, r7, pc}
 80019fc:	20000068 	.word	0x20000068
 8001a00:	200000b0 	.word	0x200000b0
 8001a04:	200000ac 	.word	0x200000ac

08001a08 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a0c:	4b05      	ldr	r3, [pc, #20]	; (8001a24 <HAL_IncTick+0x1c>)
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	001a      	movs	r2, r3
 8001a12:	4b05      	ldr	r3, [pc, #20]	; (8001a28 <HAL_IncTick+0x20>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	18d2      	adds	r2, r2, r3
 8001a18:	4b03      	ldr	r3, [pc, #12]	; (8001a28 <HAL_IncTick+0x20>)
 8001a1a:	601a      	str	r2, [r3, #0]
}
 8001a1c:	46c0      	nop			; (mov r8, r8)
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	46c0      	nop			; (mov r8, r8)
 8001a24:	200000b0 	.word	0x200000b0
 8001a28:	20000964 	.word	0x20000964

08001a2c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a30:	4b02      	ldr	r3, [pc, #8]	; (8001a3c <HAL_GetTick+0x10>)
 8001a32:	681b      	ldr	r3, [r3, #0]
}
 8001a34:	0018      	movs	r0, r3
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	46c0      	nop			; (mov r8, r8)
 8001a3c:	20000964 	.word	0x20000964

08001a40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	0002      	movs	r2, r0
 8001a48:	1dfb      	adds	r3, r7, #7
 8001a4a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001a4c:	1dfb      	adds	r3, r7, #7
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	2b7f      	cmp	r3, #127	; 0x7f
 8001a52:	d809      	bhi.n	8001a68 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a54:	1dfb      	adds	r3, r7, #7
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	001a      	movs	r2, r3
 8001a5a:	231f      	movs	r3, #31
 8001a5c:	401a      	ands	r2, r3
 8001a5e:	4b04      	ldr	r3, [pc, #16]	; (8001a70 <__NVIC_EnableIRQ+0x30>)
 8001a60:	2101      	movs	r1, #1
 8001a62:	4091      	lsls	r1, r2
 8001a64:	000a      	movs	r2, r1
 8001a66:	601a      	str	r2, [r3, #0]
  }
}
 8001a68:	46c0      	nop			; (mov r8, r8)
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	b002      	add	sp, #8
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	e000e100 	.word	0xe000e100

08001a74 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	0002      	movs	r2, r0
 8001a7c:	1dfb      	adds	r3, r7, #7
 8001a7e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001a80:	1dfb      	adds	r3, r7, #7
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	2b7f      	cmp	r3, #127	; 0x7f
 8001a86:	d810      	bhi.n	8001aaa <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a88:	1dfb      	adds	r3, r7, #7
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	001a      	movs	r2, r3
 8001a8e:	231f      	movs	r3, #31
 8001a90:	4013      	ands	r3, r2
 8001a92:	4908      	ldr	r1, [pc, #32]	; (8001ab4 <__NVIC_DisableIRQ+0x40>)
 8001a94:	2201      	movs	r2, #1
 8001a96:	409a      	lsls	r2, r3
 8001a98:	0013      	movs	r3, r2
 8001a9a:	2280      	movs	r2, #128	; 0x80
 8001a9c:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001a9e:	f3bf 8f4f 	dsb	sy
}
 8001aa2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8001aa4:	f3bf 8f6f 	isb	sy
}
 8001aa8:	46c0      	nop			; (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 8001aaa:	46c0      	nop			; (mov r8, r8)
 8001aac:	46bd      	mov	sp, r7
 8001aae:	b002      	add	sp, #8
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	46c0      	nop			; (mov r8, r8)
 8001ab4:	e000e100 	.word	0xe000e100

08001ab8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ab8:	b590      	push	{r4, r7, lr}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	0002      	movs	r2, r0
 8001ac0:	6039      	str	r1, [r7, #0]
 8001ac2:	1dfb      	adds	r3, r7, #7
 8001ac4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001ac6:	1dfb      	adds	r3, r7, #7
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	2b7f      	cmp	r3, #127	; 0x7f
 8001acc:	d828      	bhi.n	8001b20 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ace:	4a2f      	ldr	r2, [pc, #188]	; (8001b8c <__NVIC_SetPriority+0xd4>)
 8001ad0:	1dfb      	adds	r3, r7, #7
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	b25b      	sxtb	r3, r3
 8001ad6:	089b      	lsrs	r3, r3, #2
 8001ad8:	33c0      	adds	r3, #192	; 0xc0
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	589b      	ldr	r3, [r3, r2]
 8001ade:	1dfa      	adds	r2, r7, #7
 8001ae0:	7812      	ldrb	r2, [r2, #0]
 8001ae2:	0011      	movs	r1, r2
 8001ae4:	2203      	movs	r2, #3
 8001ae6:	400a      	ands	r2, r1
 8001ae8:	00d2      	lsls	r2, r2, #3
 8001aea:	21ff      	movs	r1, #255	; 0xff
 8001aec:	4091      	lsls	r1, r2
 8001aee:	000a      	movs	r2, r1
 8001af0:	43d2      	mvns	r2, r2
 8001af2:	401a      	ands	r2, r3
 8001af4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	019b      	lsls	r3, r3, #6
 8001afa:	22ff      	movs	r2, #255	; 0xff
 8001afc:	401a      	ands	r2, r3
 8001afe:	1dfb      	adds	r3, r7, #7
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	0018      	movs	r0, r3
 8001b04:	2303      	movs	r3, #3
 8001b06:	4003      	ands	r3, r0
 8001b08:	00db      	lsls	r3, r3, #3
 8001b0a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b0c:	481f      	ldr	r0, [pc, #124]	; (8001b8c <__NVIC_SetPriority+0xd4>)
 8001b0e:	1dfb      	adds	r3, r7, #7
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	b25b      	sxtb	r3, r3
 8001b14:	089b      	lsrs	r3, r3, #2
 8001b16:	430a      	orrs	r2, r1
 8001b18:	33c0      	adds	r3, #192	; 0xc0
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001b1e:	e031      	b.n	8001b84 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b20:	4a1b      	ldr	r2, [pc, #108]	; (8001b90 <__NVIC_SetPriority+0xd8>)
 8001b22:	1dfb      	adds	r3, r7, #7
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	0019      	movs	r1, r3
 8001b28:	230f      	movs	r3, #15
 8001b2a:	400b      	ands	r3, r1
 8001b2c:	3b08      	subs	r3, #8
 8001b2e:	089b      	lsrs	r3, r3, #2
 8001b30:	3306      	adds	r3, #6
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	18d3      	adds	r3, r2, r3
 8001b36:	3304      	adds	r3, #4
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	1dfa      	adds	r2, r7, #7
 8001b3c:	7812      	ldrb	r2, [r2, #0]
 8001b3e:	0011      	movs	r1, r2
 8001b40:	2203      	movs	r2, #3
 8001b42:	400a      	ands	r2, r1
 8001b44:	00d2      	lsls	r2, r2, #3
 8001b46:	21ff      	movs	r1, #255	; 0xff
 8001b48:	4091      	lsls	r1, r2
 8001b4a:	000a      	movs	r2, r1
 8001b4c:	43d2      	mvns	r2, r2
 8001b4e:	401a      	ands	r2, r3
 8001b50:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	019b      	lsls	r3, r3, #6
 8001b56:	22ff      	movs	r2, #255	; 0xff
 8001b58:	401a      	ands	r2, r3
 8001b5a:	1dfb      	adds	r3, r7, #7
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	0018      	movs	r0, r3
 8001b60:	2303      	movs	r3, #3
 8001b62:	4003      	ands	r3, r0
 8001b64:	00db      	lsls	r3, r3, #3
 8001b66:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b68:	4809      	ldr	r0, [pc, #36]	; (8001b90 <__NVIC_SetPriority+0xd8>)
 8001b6a:	1dfb      	adds	r3, r7, #7
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	001c      	movs	r4, r3
 8001b70:	230f      	movs	r3, #15
 8001b72:	4023      	ands	r3, r4
 8001b74:	3b08      	subs	r3, #8
 8001b76:	089b      	lsrs	r3, r3, #2
 8001b78:	430a      	orrs	r2, r1
 8001b7a:	3306      	adds	r3, #6
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	18c3      	adds	r3, r0, r3
 8001b80:	3304      	adds	r3, #4
 8001b82:	601a      	str	r2, [r3, #0]
}
 8001b84:	46c0      	nop			; (mov r8, r8)
 8001b86:	46bd      	mov	sp, r7
 8001b88:	b003      	add	sp, #12
 8001b8a:	bd90      	pop	{r4, r7, pc}
 8001b8c:	e000e100 	.word	0xe000e100
 8001b90:	e000ed00 	.word	0xe000ed00

08001b94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	1e5a      	subs	r2, r3, #1
 8001ba0:	2380      	movs	r3, #128	; 0x80
 8001ba2:	045b      	lsls	r3, r3, #17
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d301      	bcc.n	8001bac <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e010      	b.n	8001bce <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bac:	4b0a      	ldr	r3, [pc, #40]	; (8001bd8 <SysTick_Config+0x44>)
 8001bae:	687a      	ldr	r2, [r7, #4]
 8001bb0:	3a01      	subs	r2, #1
 8001bb2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	425b      	negs	r3, r3
 8001bb8:	2103      	movs	r1, #3
 8001bba:	0018      	movs	r0, r3
 8001bbc:	f7ff ff7c 	bl	8001ab8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bc0:	4b05      	ldr	r3, [pc, #20]	; (8001bd8 <SysTick_Config+0x44>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bc6:	4b04      	ldr	r3, [pc, #16]	; (8001bd8 <SysTick_Config+0x44>)
 8001bc8:	2207      	movs	r2, #7
 8001bca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bcc:	2300      	movs	r3, #0
}
 8001bce:	0018      	movs	r0, r3
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	b002      	add	sp, #8
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	46c0      	nop			; (mov r8, r8)
 8001bd8:	e000e010 	.word	0xe000e010

08001bdc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	60b9      	str	r1, [r7, #8]
 8001be4:	607a      	str	r2, [r7, #4]
 8001be6:	210f      	movs	r1, #15
 8001be8:	187b      	adds	r3, r7, r1
 8001bea:	1c02      	adds	r2, r0, #0
 8001bec:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001bee:	68ba      	ldr	r2, [r7, #8]
 8001bf0:	187b      	adds	r3, r7, r1
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	b25b      	sxtb	r3, r3
 8001bf6:	0011      	movs	r1, r2
 8001bf8:	0018      	movs	r0, r3
 8001bfa:	f7ff ff5d 	bl	8001ab8 <__NVIC_SetPriority>
}
 8001bfe:	46c0      	nop			; (mov r8, r8)
 8001c00:	46bd      	mov	sp, r7
 8001c02:	b004      	add	sp, #16
 8001c04:	bd80      	pop	{r7, pc}

08001c06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c06:	b580      	push	{r7, lr}
 8001c08:	b082      	sub	sp, #8
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	0002      	movs	r2, r0
 8001c0e:	1dfb      	adds	r3, r7, #7
 8001c10:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c12:	1dfb      	adds	r3, r7, #7
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	b25b      	sxtb	r3, r3
 8001c18:	0018      	movs	r0, r3
 8001c1a:	f7ff ff11 	bl	8001a40 <__NVIC_EnableIRQ>
}
 8001c1e:	46c0      	nop			; (mov r8, r8)
 8001c20:	46bd      	mov	sp, r7
 8001c22:	b002      	add	sp, #8
 8001c24:	bd80      	pop	{r7, pc}

08001c26 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001c26:	b580      	push	{r7, lr}
 8001c28:	b082      	sub	sp, #8
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	0002      	movs	r2, r0
 8001c2e:	1dfb      	adds	r3, r7, #7
 8001c30:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001c32:	1dfb      	adds	r3, r7, #7
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	b25b      	sxtb	r3, r3
 8001c38:	0018      	movs	r0, r3
 8001c3a:	f7ff ff1b 	bl	8001a74 <__NVIC_DisableIRQ>
}
 8001c3e:	46c0      	nop			; (mov r8, r8)
 8001c40:	46bd      	mov	sp, r7
 8001c42:	b002      	add	sp, #8
 8001c44:	bd80      	pop	{r7, pc}

08001c46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c46:	b580      	push	{r7, lr}
 8001c48:	b082      	sub	sp, #8
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	0018      	movs	r0, r3
 8001c52:	f7ff ff9f 	bl	8001b94 <SysTick_Config>
 8001c56:	0003      	movs	r3, r0
}
 8001c58:	0018      	movs	r0, r3
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	b002      	add	sp, #8
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b084      	sub	sp, #16
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d101      	bne.n	8001c76 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e036      	b.n	8001ce4 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2221      	movs	r2, #33	; 0x21
 8001c7a:	2102      	movs	r1, #2
 8001c7c:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	4a18      	ldr	r2, [pc, #96]	; (8001cec <HAL_DMA_Init+0x8c>)
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001c96:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ca2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	695b      	ldr	r3, [r3, #20]
 8001ca8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	69db      	ldr	r3, [r3, #28]
 8001cb4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001cb6:	68fa      	ldr	r2, [r7, #12]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	68fa      	ldr	r2, [r7, #12]
 8001cc2:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	0018      	movs	r0, r3
 8001cc8:	f000 f96a 	bl	8001fa0 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2221      	movs	r2, #33	; 0x21
 8001cd6:	2101      	movs	r1, #1
 8001cd8:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2220      	movs	r2, #32
 8001cde:	2100      	movs	r1, #0
 8001ce0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001ce2:	2300      	movs	r3, #0
}
 8001ce4:	0018      	movs	r0, r3
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	b004      	add	sp, #16
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	ffffc00f 	.word	0xffffc00f

08001cf0 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d101      	bne.n	8001d02 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e03b      	b.n	8001d7a <HAL_DMA_DeInit+0x8a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	2101      	movs	r1, #1
 8001d0e:	438a      	bics	r2, r1
 8001d10:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	2200      	movs	r2, #0
 8001d18:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel Number of Data to Transfer register */
  hdma->Instance->CNDTR = 0U;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	605a      	str	r2, [r3, #4]

  /* Reset DMA Channel peripheral address register */
  hdma->Instance->CPAR  = 0U;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	2200      	movs	r2, #0
 8001d28:	609a      	str	r2, [r3, #8]

  /* Reset DMA Channel memory address register */
  hdma->Instance->CMAR = 0U;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	60da      	str	r2, [r3, #12]

  /* Get DMA Base Address */
  DMA_CalcBaseAndBitshift(hdma);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	0018      	movs	r0, r3
 8001d36:	f000 f933 	bl	8001fa0 <DMA_CalcBaseAndBitshift>

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d42:	2101      	movs	r1, #1
 8001d44:	4091      	lsls	r1, r2
 8001d46:	000a      	movs	r2, r1
 8001d48:	605a      	str	r2, [r3, #4]

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	629a      	str	r2, [r3, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2200      	movs	r2, #0
 8001d54:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2200      	movs	r2, #0
 8001d66:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2221      	movs	r2, #33	; 0x21
 8001d6c:	2100      	movs	r1, #0
 8001d6e:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2220      	movs	r2, #32
 8001d74:	2100      	movs	r1, #0
 8001d76:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001d78:	2300      	movs	r3, #0
}
 8001d7a:	0018      	movs	r0, r3
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	b002      	add	sp, #8
 8001d80:	bd80      	pop	{r7, pc}

08001d82 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d82:	b580      	push	{r7, lr}
 8001d84:	b086      	sub	sp, #24
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	60f8      	str	r0, [r7, #12]
 8001d8a:	60b9      	str	r1, [r7, #8]
 8001d8c:	607a      	str	r2, [r7, #4]
 8001d8e:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d90:	2317      	movs	r3, #23
 8001d92:	18fb      	adds	r3, r7, r3
 8001d94:	2200      	movs	r2, #0
 8001d96:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	2220      	movs	r2, #32
 8001d9c:	5c9b      	ldrb	r3, [r3, r2]
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d101      	bne.n	8001da6 <HAL_DMA_Start_IT+0x24>
 8001da2:	2302      	movs	r3, #2
 8001da4:	e04f      	b.n	8001e46 <HAL_DMA_Start_IT+0xc4>
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	2220      	movs	r2, #32
 8001daa:	2101      	movs	r1, #1
 8001dac:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	2221      	movs	r2, #33	; 0x21
 8001db2:	5c9b      	ldrb	r3, [r3, r2]
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d13a      	bne.n	8001e30 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	2221      	movs	r2, #33	; 0x21
 8001dbe:	2102      	movs	r1, #2
 8001dc0:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	2101      	movs	r1, #1
 8001dd4:	438a      	bics	r2, r1
 8001dd6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	68b9      	ldr	r1, [r7, #8]
 8001dde:	68f8      	ldr	r0, [r7, #12]
 8001de0:	f000 f8b2 	bl	8001f48 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d008      	beq.n	8001dfe <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	210e      	movs	r1, #14
 8001df8:	430a      	orrs	r2, r1
 8001dfa:	601a      	str	r2, [r3, #0]
 8001dfc:	e00f      	b.n	8001e1e <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	210a      	movs	r1, #10
 8001e0a:	430a      	orrs	r2, r1
 8001e0c:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2104      	movs	r1, #4
 8001e1a:	438a      	bics	r2, r1
 8001e1c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	2101      	movs	r1, #1
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	601a      	str	r2, [r3, #0]
 8001e2e:	e007      	b.n	8001e40 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	2220      	movs	r2, #32
 8001e34:	2100      	movs	r1, #0
 8001e36:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001e38:	2317      	movs	r3, #23
 8001e3a:	18fb      	adds	r3, r7, r3
 8001e3c:	2202      	movs	r2, #2
 8001e3e:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8001e40:	2317      	movs	r3, #23
 8001e42:	18fb      	adds	r3, r7, r3
 8001e44:	781b      	ldrb	r3, [r3, #0]
}
 8001e46:	0018      	movs	r0, r3
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	b006      	add	sp, #24
 8001e4c:	bd80      	pop	{r7, pc}

08001e4e <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e4e:	b580      	push	{r7, lr}
 8001e50:	b082      	sub	sp, #8
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2221      	movs	r2, #33	; 0x21
 8001e5a:	5c9b      	ldrb	r3, [r3, r2]
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	d008      	beq.n	8001e74 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2204      	movs	r2, #4
 8001e66:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2220      	movs	r2, #32
 8001e6c:	2100      	movs	r1, #0
 8001e6e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e020      	b.n	8001eb6 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	210e      	movs	r1, #14
 8001e80:	438a      	bics	r2, r1
 8001e82:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	2101      	movs	r1, #1
 8001e90:	438a      	bics	r2, r1
 8001e92:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e9c:	2101      	movs	r1, #1
 8001e9e:	4091      	lsls	r1, r2
 8001ea0:	000a      	movs	r2, r1
 8001ea2:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2221      	movs	r2, #33	; 0x21
 8001ea8:	2101      	movs	r1, #1
 8001eaa:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2220      	movs	r2, #32
 8001eb0:	2100      	movs	r1, #0
 8001eb2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001eb4:	2300      	movs	r3, #0
}
 8001eb6:	0018      	movs	r0, r3
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	b002      	add	sp, #8
 8001ebc:	bd80      	pop	{r7, pc}

08001ebe <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	b084      	sub	sp, #16
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ec6:	210f      	movs	r1, #15
 8001ec8:	187b      	adds	r3, r7, r1
 8001eca:	2200      	movs	r2, #0
 8001ecc:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2221      	movs	r2, #33	; 0x21
 8001ed2:	5c9b      	ldrb	r3, [r3, r2]
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d006      	beq.n	8001ee8 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2204      	movs	r2, #4
 8001ede:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8001ee0:	187b      	adds	r3, r7, r1
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	701a      	strb	r2, [r3, #0]
 8001ee6:	e028      	b.n	8001f3a <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	210e      	movs	r1, #14
 8001ef4:	438a      	bics	r2, r1
 8001ef6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	2101      	movs	r1, #1
 8001f04:	438a      	bics	r2, r1
 8001f06:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f10:	2101      	movs	r1, #1
 8001f12:	4091      	lsls	r1, r2
 8001f14:	000a      	movs	r2, r1
 8001f16:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2221      	movs	r2, #33	; 0x21
 8001f1c:	2101      	movs	r1, #1
 8001f1e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2220      	movs	r2, #32
 8001f24:	2100      	movs	r1, #0
 8001f26:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d004      	beq.n	8001f3a <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f34:	687a      	ldr	r2, [r7, #4]
 8001f36:	0010      	movs	r0, r2
 8001f38:	4798      	blx	r3
    }
  }
  return status;
 8001f3a:	230f      	movs	r3, #15
 8001f3c:	18fb      	adds	r3, r7, r3
 8001f3e:	781b      	ldrb	r3, [r3, #0]
}
 8001f40:	0018      	movs	r0, r3
 8001f42:	46bd      	mov	sp, r7
 8001f44:	b004      	add	sp, #16
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b084      	sub	sp, #16
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	60f8      	str	r0, [r7, #12]
 8001f50:	60b9      	str	r1, [r7, #8]
 8001f52:	607a      	str	r2, [r7, #4]
 8001f54:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f5e:	2101      	movs	r1, #1
 8001f60:	4091      	lsls	r1, r2
 8001f62:	000a      	movs	r2, r1
 8001f64:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	683a      	ldr	r2, [r7, #0]
 8001f6c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	2b10      	cmp	r3, #16
 8001f74:	d108      	bne.n	8001f88 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	687a      	ldr	r2, [r7, #4]
 8001f7c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	68ba      	ldr	r2, [r7, #8]
 8001f84:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001f86:	e007      	b.n	8001f98 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	68ba      	ldr	r2, [r7, #8]
 8001f8e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	687a      	ldr	r2, [r7, #4]
 8001f96:	60da      	str	r2, [r3, #12]
}
 8001f98:	46c0      	nop			; (mov r8, r8)
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	b004      	add	sp, #16
 8001f9e:	bd80      	pop	{r7, pc}

08001fa0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a08      	ldr	r2, [pc, #32]	; (8001fd0 <DMA_CalcBaseAndBitshift+0x30>)
 8001fae:	4694      	mov	ip, r2
 8001fb0:	4463      	add	r3, ip
 8001fb2:	2114      	movs	r1, #20
 8001fb4:	0018      	movs	r0, r3
 8001fb6:	f7fe f8b1 	bl	800011c <__udivsi3>
 8001fba:	0003      	movs	r3, r0
 8001fbc:	009a      	lsls	r2, r3, #2
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4a03      	ldr	r2, [pc, #12]	; (8001fd4 <DMA_CalcBaseAndBitshift+0x34>)
 8001fc6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8001fc8:	46c0      	nop			; (mov r8, r8)
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	b002      	add	sp, #8
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	bffdfff8 	.word	0xbffdfff8
 8001fd4:	40020000 	.word	0x40020000

08001fd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b086      	sub	sp, #24
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fe6:	e14f      	b.n	8002288 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	2101      	movs	r1, #1
 8001fee:	697a      	ldr	r2, [r7, #20]
 8001ff0:	4091      	lsls	r1, r2
 8001ff2:	000a      	movs	r2, r1
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d100      	bne.n	8002000 <HAL_GPIO_Init+0x28>
 8001ffe:	e140      	b.n	8002282 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	2203      	movs	r2, #3
 8002006:	4013      	ands	r3, r2
 8002008:	2b01      	cmp	r3, #1
 800200a:	d005      	beq.n	8002018 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	2203      	movs	r2, #3
 8002012:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002014:	2b02      	cmp	r3, #2
 8002016:	d130      	bne.n	800207a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	005b      	lsls	r3, r3, #1
 8002022:	2203      	movs	r2, #3
 8002024:	409a      	lsls	r2, r3
 8002026:	0013      	movs	r3, r2
 8002028:	43da      	mvns	r2, r3
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	4013      	ands	r3, r2
 800202e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	68da      	ldr	r2, [r3, #12]
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	005b      	lsls	r3, r3, #1
 8002038:	409a      	lsls	r2, r3
 800203a:	0013      	movs	r3, r2
 800203c:	693a      	ldr	r2, [r7, #16]
 800203e:	4313      	orrs	r3, r2
 8002040:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	693a      	ldr	r2, [r7, #16]
 8002046:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800204e:	2201      	movs	r2, #1
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	409a      	lsls	r2, r3
 8002054:	0013      	movs	r3, r2
 8002056:	43da      	mvns	r2, r3
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	4013      	ands	r3, r2
 800205c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	091b      	lsrs	r3, r3, #4
 8002064:	2201      	movs	r2, #1
 8002066:	401a      	ands	r2, r3
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	409a      	lsls	r2, r3
 800206c:	0013      	movs	r3, r2
 800206e:	693a      	ldr	r2, [r7, #16]
 8002070:	4313      	orrs	r3, r2
 8002072:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	693a      	ldr	r2, [r7, #16]
 8002078:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	2203      	movs	r2, #3
 8002080:	4013      	ands	r3, r2
 8002082:	2b03      	cmp	r3, #3
 8002084:	d017      	beq.n	80020b6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	68db      	ldr	r3, [r3, #12]
 800208a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	005b      	lsls	r3, r3, #1
 8002090:	2203      	movs	r2, #3
 8002092:	409a      	lsls	r2, r3
 8002094:	0013      	movs	r3, r2
 8002096:	43da      	mvns	r2, r3
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	4013      	ands	r3, r2
 800209c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	689a      	ldr	r2, [r3, #8]
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	005b      	lsls	r3, r3, #1
 80020a6:	409a      	lsls	r2, r3
 80020a8:	0013      	movs	r3, r2
 80020aa:	693a      	ldr	r2, [r7, #16]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	693a      	ldr	r2, [r7, #16]
 80020b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	2203      	movs	r2, #3
 80020bc:	4013      	ands	r3, r2
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d123      	bne.n	800210a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	08da      	lsrs	r2, r3, #3
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	3208      	adds	r2, #8
 80020ca:	0092      	lsls	r2, r2, #2
 80020cc:	58d3      	ldr	r3, [r2, r3]
 80020ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	2207      	movs	r2, #7
 80020d4:	4013      	ands	r3, r2
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	220f      	movs	r2, #15
 80020da:	409a      	lsls	r2, r3
 80020dc:	0013      	movs	r3, r2
 80020de:	43da      	mvns	r2, r3
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	4013      	ands	r3, r2
 80020e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	691a      	ldr	r2, [r3, #16]
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	2107      	movs	r1, #7
 80020ee:	400b      	ands	r3, r1
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	409a      	lsls	r2, r3
 80020f4:	0013      	movs	r3, r2
 80020f6:	693a      	ldr	r2, [r7, #16]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	08da      	lsrs	r2, r3, #3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	3208      	adds	r2, #8
 8002104:	0092      	lsls	r2, r2, #2
 8002106:	6939      	ldr	r1, [r7, #16]
 8002108:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	005b      	lsls	r3, r3, #1
 8002114:	2203      	movs	r2, #3
 8002116:	409a      	lsls	r2, r3
 8002118:	0013      	movs	r3, r2
 800211a:	43da      	mvns	r2, r3
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	4013      	ands	r3, r2
 8002120:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	2203      	movs	r2, #3
 8002128:	401a      	ands	r2, r3
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	005b      	lsls	r3, r3, #1
 800212e:	409a      	lsls	r2, r3
 8002130:	0013      	movs	r3, r2
 8002132:	693a      	ldr	r2, [r7, #16]
 8002134:	4313      	orrs	r3, r2
 8002136:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	693a      	ldr	r2, [r7, #16]
 800213c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	685a      	ldr	r2, [r3, #4]
 8002142:	23c0      	movs	r3, #192	; 0xc0
 8002144:	029b      	lsls	r3, r3, #10
 8002146:	4013      	ands	r3, r2
 8002148:	d100      	bne.n	800214c <HAL_GPIO_Init+0x174>
 800214a:	e09a      	b.n	8002282 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800214c:	4b54      	ldr	r3, [pc, #336]	; (80022a0 <HAL_GPIO_Init+0x2c8>)
 800214e:	699a      	ldr	r2, [r3, #24]
 8002150:	4b53      	ldr	r3, [pc, #332]	; (80022a0 <HAL_GPIO_Init+0x2c8>)
 8002152:	2101      	movs	r1, #1
 8002154:	430a      	orrs	r2, r1
 8002156:	619a      	str	r2, [r3, #24]
 8002158:	4b51      	ldr	r3, [pc, #324]	; (80022a0 <HAL_GPIO_Init+0x2c8>)
 800215a:	699b      	ldr	r3, [r3, #24]
 800215c:	2201      	movs	r2, #1
 800215e:	4013      	ands	r3, r2
 8002160:	60bb      	str	r3, [r7, #8]
 8002162:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002164:	4a4f      	ldr	r2, [pc, #316]	; (80022a4 <HAL_GPIO_Init+0x2cc>)
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	089b      	lsrs	r3, r3, #2
 800216a:	3302      	adds	r3, #2
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	589b      	ldr	r3, [r3, r2]
 8002170:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	2203      	movs	r2, #3
 8002176:	4013      	ands	r3, r2
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	220f      	movs	r2, #15
 800217c:	409a      	lsls	r2, r3
 800217e:	0013      	movs	r3, r2
 8002180:	43da      	mvns	r2, r3
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	4013      	ands	r3, r2
 8002186:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002188:	687a      	ldr	r2, [r7, #4]
 800218a:	2390      	movs	r3, #144	; 0x90
 800218c:	05db      	lsls	r3, r3, #23
 800218e:	429a      	cmp	r2, r3
 8002190:	d013      	beq.n	80021ba <HAL_GPIO_Init+0x1e2>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a44      	ldr	r2, [pc, #272]	; (80022a8 <HAL_GPIO_Init+0x2d0>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d00d      	beq.n	80021b6 <HAL_GPIO_Init+0x1de>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a43      	ldr	r2, [pc, #268]	; (80022ac <HAL_GPIO_Init+0x2d4>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d007      	beq.n	80021b2 <HAL_GPIO_Init+0x1da>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a42      	ldr	r2, [pc, #264]	; (80022b0 <HAL_GPIO_Init+0x2d8>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d101      	bne.n	80021ae <HAL_GPIO_Init+0x1d6>
 80021aa:	2303      	movs	r3, #3
 80021ac:	e006      	b.n	80021bc <HAL_GPIO_Init+0x1e4>
 80021ae:	2305      	movs	r3, #5
 80021b0:	e004      	b.n	80021bc <HAL_GPIO_Init+0x1e4>
 80021b2:	2302      	movs	r3, #2
 80021b4:	e002      	b.n	80021bc <HAL_GPIO_Init+0x1e4>
 80021b6:	2301      	movs	r3, #1
 80021b8:	e000      	b.n	80021bc <HAL_GPIO_Init+0x1e4>
 80021ba:	2300      	movs	r3, #0
 80021bc:	697a      	ldr	r2, [r7, #20]
 80021be:	2103      	movs	r1, #3
 80021c0:	400a      	ands	r2, r1
 80021c2:	0092      	lsls	r2, r2, #2
 80021c4:	4093      	lsls	r3, r2
 80021c6:	693a      	ldr	r2, [r7, #16]
 80021c8:	4313      	orrs	r3, r2
 80021ca:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80021cc:	4935      	ldr	r1, [pc, #212]	; (80022a4 <HAL_GPIO_Init+0x2cc>)
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	089b      	lsrs	r3, r3, #2
 80021d2:	3302      	adds	r3, #2
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	693a      	ldr	r2, [r7, #16]
 80021d8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021da:	4b36      	ldr	r3, [pc, #216]	; (80022b4 <HAL_GPIO_Init+0x2dc>)
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	43da      	mvns	r2, r3
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	4013      	ands	r3, r2
 80021e8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	685a      	ldr	r2, [r3, #4]
 80021ee:	2380      	movs	r3, #128	; 0x80
 80021f0:	035b      	lsls	r3, r3, #13
 80021f2:	4013      	ands	r3, r2
 80021f4:	d003      	beq.n	80021fe <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80021f6:	693a      	ldr	r2, [r7, #16]
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80021fe:	4b2d      	ldr	r3, [pc, #180]	; (80022b4 <HAL_GPIO_Init+0x2dc>)
 8002200:	693a      	ldr	r2, [r7, #16]
 8002202:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002204:	4b2b      	ldr	r3, [pc, #172]	; (80022b4 <HAL_GPIO_Init+0x2dc>)
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	43da      	mvns	r2, r3
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	4013      	ands	r3, r2
 8002212:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	685a      	ldr	r2, [r3, #4]
 8002218:	2380      	movs	r3, #128	; 0x80
 800221a:	039b      	lsls	r3, r3, #14
 800221c:	4013      	ands	r3, r2
 800221e:	d003      	beq.n	8002228 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8002220:	693a      	ldr	r2, [r7, #16]
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	4313      	orrs	r3, r2
 8002226:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002228:	4b22      	ldr	r3, [pc, #136]	; (80022b4 <HAL_GPIO_Init+0x2dc>)
 800222a:	693a      	ldr	r2, [r7, #16]
 800222c:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800222e:	4b21      	ldr	r3, [pc, #132]	; (80022b4 <HAL_GPIO_Init+0x2dc>)
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	43da      	mvns	r2, r3
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	4013      	ands	r3, r2
 800223c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	685a      	ldr	r2, [r3, #4]
 8002242:	2380      	movs	r3, #128	; 0x80
 8002244:	029b      	lsls	r3, r3, #10
 8002246:	4013      	ands	r3, r2
 8002248:	d003      	beq.n	8002252 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800224a:	693a      	ldr	r2, [r7, #16]
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	4313      	orrs	r3, r2
 8002250:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002252:	4b18      	ldr	r3, [pc, #96]	; (80022b4 <HAL_GPIO_Init+0x2dc>)
 8002254:	693a      	ldr	r2, [r7, #16]
 8002256:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8002258:	4b16      	ldr	r3, [pc, #88]	; (80022b4 <HAL_GPIO_Init+0x2dc>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	43da      	mvns	r2, r3
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	4013      	ands	r3, r2
 8002266:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	685a      	ldr	r2, [r3, #4]
 800226c:	2380      	movs	r3, #128	; 0x80
 800226e:	025b      	lsls	r3, r3, #9
 8002270:	4013      	ands	r3, r2
 8002272:	d003      	beq.n	800227c <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8002274:	693a      	ldr	r2, [r7, #16]
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	4313      	orrs	r3, r2
 800227a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800227c:	4b0d      	ldr	r3, [pc, #52]	; (80022b4 <HAL_GPIO_Init+0x2dc>)
 800227e:	693a      	ldr	r2, [r7, #16]
 8002280:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	3301      	adds	r3, #1
 8002286:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	40da      	lsrs	r2, r3
 8002290:	1e13      	subs	r3, r2, #0
 8002292:	d000      	beq.n	8002296 <HAL_GPIO_Init+0x2be>
 8002294:	e6a8      	b.n	8001fe8 <HAL_GPIO_Init+0x10>
  } 
}
 8002296:	46c0      	nop			; (mov r8, r8)
 8002298:	46c0      	nop			; (mov r8, r8)
 800229a:	46bd      	mov	sp, r7
 800229c:	b006      	add	sp, #24
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	40021000 	.word	0x40021000
 80022a4:	40010000 	.word	0x40010000
 80022a8:	48000400 	.word	0x48000400
 80022ac:	48000800 	.word	0x48000800
 80022b0:	48000c00 	.word	0x48000c00
 80022b4:	40010400 	.word	0x40010400

080022b8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b086      	sub	sp, #24
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022c2:	2300      	movs	r3, #0
 80022c4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80022c6:	e0b1      	b.n	800242c <HAL_GPIO_DeInit+0x174>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80022c8:	2201      	movs	r2, #1
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	409a      	lsls	r2, r3
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	4013      	ands	r3, r2
 80022d2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d100      	bne.n	80022dc <HAL_GPIO_DeInit+0x24>
 80022da:	e0a4      	b.n	8002426 <HAL_GPIO_DeInit+0x16e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80022dc:	4a59      	ldr	r2, [pc, #356]	; (8002444 <HAL_GPIO_DeInit+0x18c>)
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	089b      	lsrs	r3, r3, #2
 80022e2:	3302      	adds	r3, #2
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	589b      	ldr	r3, [r3, r2]
 80022e8:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	2203      	movs	r2, #3
 80022ee:	4013      	ands	r3, r2
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	220f      	movs	r2, #15
 80022f4:	409a      	lsls	r2, r3
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	4013      	ands	r3, r2
 80022fa:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	2390      	movs	r3, #144	; 0x90
 8002300:	05db      	lsls	r3, r3, #23
 8002302:	429a      	cmp	r2, r3
 8002304:	d013      	beq.n	800232e <HAL_GPIO_DeInit+0x76>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4a4f      	ldr	r2, [pc, #316]	; (8002448 <HAL_GPIO_DeInit+0x190>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d00d      	beq.n	800232a <HAL_GPIO_DeInit+0x72>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4a4e      	ldr	r2, [pc, #312]	; (800244c <HAL_GPIO_DeInit+0x194>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d007      	beq.n	8002326 <HAL_GPIO_DeInit+0x6e>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4a4d      	ldr	r2, [pc, #308]	; (8002450 <HAL_GPIO_DeInit+0x198>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d101      	bne.n	8002322 <HAL_GPIO_DeInit+0x6a>
 800231e:	2303      	movs	r3, #3
 8002320:	e006      	b.n	8002330 <HAL_GPIO_DeInit+0x78>
 8002322:	2305      	movs	r3, #5
 8002324:	e004      	b.n	8002330 <HAL_GPIO_DeInit+0x78>
 8002326:	2302      	movs	r3, #2
 8002328:	e002      	b.n	8002330 <HAL_GPIO_DeInit+0x78>
 800232a:	2301      	movs	r3, #1
 800232c:	e000      	b.n	8002330 <HAL_GPIO_DeInit+0x78>
 800232e:	2300      	movs	r3, #0
 8002330:	697a      	ldr	r2, [r7, #20]
 8002332:	2103      	movs	r1, #3
 8002334:	400a      	ands	r2, r1
 8002336:	0092      	lsls	r2, r2, #2
 8002338:	4093      	lsls	r3, r2
 800233a:	68fa      	ldr	r2, [r7, #12]
 800233c:	429a      	cmp	r2, r3
 800233e:	d132      	bne.n	80023a6 <HAL_GPIO_DeInit+0xee>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002340:	4b44      	ldr	r3, [pc, #272]	; (8002454 <HAL_GPIO_DeInit+0x19c>)
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	43d9      	mvns	r1, r3
 8002348:	4b42      	ldr	r3, [pc, #264]	; (8002454 <HAL_GPIO_DeInit+0x19c>)
 800234a:	400a      	ands	r2, r1
 800234c:	601a      	str	r2, [r3, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800234e:	4b41      	ldr	r3, [pc, #260]	; (8002454 <HAL_GPIO_DeInit+0x19c>)
 8002350:	685a      	ldr	r2, [r3, #4]
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	43d9      	mvns	r1, r3
 8002356:	4b3f      	ldr	r3, [pc, #252]	; (8002454 <HAL_GPIO_DeInit+0x19c>)
 8002358:	400a      	ands	r2, r1
 800235a:	605a      	str	r2, [r3, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800235c:	4b3d      	ldr	r3, [pc, #244]	; (8002454 <HAL_GPIO_DeInit+0x19c>)
 800235e:	68da      	ldr	r2, [r3, #12]
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	43d9      	mvns	r1, r3
 8002364:	4b3b      	ldr	r3, [pc, #236]	; (8002454 <HAL_GPIO_DeInit+0x19c>)
 8002366:	400a      	ands	r2, r1
 8002368:	60da      	str	r2, [r3, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800236a:	4b3a      	ldr	r3, [pc, #232]	; (8002454 <HAL_GPIO_DeInit+0x19c>)
 800236c:	689a      	ldr	r2, [r3, #8]
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	43d9      	mvns	r1, r3
 8002372:	4b38      	ldr	r3, [pc, #224]	; (8002454 <HAL_GPIO_DeInit+0x19c>)
 8002374:	400a      	ands	r2, r1
 8002376:	609a      	str	r2, [r3, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	2203      	movs	r2, #3
 800237c:	4013      	ands	r3, r2
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	220f      	movs	r2, #15
 8002382:	409a      	lsls	r2, r3
 8002384:	0013      	movs	r3, r2
 8002386:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002388:	4a2e      	ldr	r2, [pc, #184]	; (8002444 <HAL_GPIO_DeInit+0x18c>)
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	089b      	lsrs	r3, r3, #2
 800238e:	3302      	adds	r3, #2
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	589a      	ldr	r2, [r3, r2]
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	43d9      	mvns	r1, r3
 8002398:	482a      	ldr	r0, [pc, #168]	; (8002444 <HAL_GPIO_DeInit+0x18c>)
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	089b      	lsrs	r3, r3, #2
 800239e:	400a      	ands	r2, r1
 80023a0:	3302      	adds	r3, #2
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	697a      	ldr	r2, [r7, #20]
 80023ac:	0052      	lsls	r2, r2, #1
 80023ae:	2103      	movs	r1, #3
 80023b0:	4091      	lsls	r1, r2
 80023b2:	000a      	movs	r2, r1
 80023b4:	43d2      	mvns	r2, r2
 80023b6:	401a      	ands	r2, r3
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u)) ;
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	08da      	lsrs	r2, r3, #3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	3208      	adds	r2, #8
 80023c4:	0092      	lsls	r2, r2, #2
 80023c6:	58d3      	ldr	r3, [r2, r3]
 80023c8:	697a      	ldr	r2, [r7, #20]
 80023ca:	2107      	movs	r1, #7
 80023cc:	400a      	ands	r2, r1
 80023ce:	0092      	lsls	r2, r2, #2
 80023d0:	210f      	movs	r1, #15
 80023d2:	4091      	lsls	r1, r2
 80023d4:	000a      	movs	r2, r1
 80023d6:	43d1      	mvns	r1, r2
 80023d8:	697a      	ldr	r2, [r7, #20]
 80023da:	08d2      	lsrs	r2, r2, #3
 80023dc:	4019      	ands	r1, r3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	3208      	adds	r2, #8
 80023e2:	0092      	lsls	r2, r2, #2
 80023e4:	50d1      	str	r1, [r2, r3]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	68db      	ldr	r3, [r3, #12]
 80023ea:	697a      	ldr	r2, [r7, #20]
 80023ec:	0052      	lsls	r2, r2, #1
 80023ee:	2103      	movs	r1, #3
 80023f0:	4091      	lsls	r1, r2
 80023f2:	000a      	movs	r2, r1
 80023f4:	43d2      	mvns	r2, r2
 80023f6:	401a      	ands	r2, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	2101      	movs	r1, #1
 8002402:	697a      	ldr	r2, [r7, #20]
 8002404:	4091      	lsls	r1, r2
 8002406:	000a      	movs	r2, r1
 8002408:	43d2      	mvns	r2, r2
 800240a:	401a      	ands	r2, r3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	697a      	ldr	r2, [r7, #20]
 8002416:	0052      	lsls	r2, r2, #1
 8002418:	2103      	movs	r1, #3
 800241a:	4091      	lsls	r1, r2
 800241c:	000a      	movs	r2, r1
 800241e:	43d2      	mvns	r2, r2
 8002420:	401a      	ands	r2, r3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	609a      	str	r2, [r3, #8]

    }

    position++;
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	3301      	adds	r3, #1
 800242a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800242c:	683a      	ldr	r2, [r7, #0]
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	40da      	lsrs	r2, r3
 8002432:	1e13      	subs	r3, r2, #0
 8002434:	d000      	beq.n	8002438 <HAL_GPIO_DeInit+0x180>
 8002436:	e747      	b.n	80022c8 <HAL_GPIO_DeInit+0x10>
  }
}
 8002438:	46c0      	nop			; (mov r8, r8)
 800243a:	46c0      	nop			; (mov r8, r8)
 800243c:	46bd      	mov	sp, r7
 800243e:	b006      	add	sp, #24
 8002440:	bd80      	pop	{r7, pc}
 8002442:	46c0      	nop			; (mov r8, r8)
 8002444:	40010000 	.word	0x40010000
 8002448:	48000400 	.word	0x48000400
 800244c:	48000800 	.word	0x48000800
 8002450:	48000c00 	.word	0x48000c00
 8002454:	40010400 	.word	0x40010400

08002458 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b084      	sub	sp, #16
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
 8002460:	000a      	movs	r2, r1
 8002462:	1cbb      	adds	r3, r7, #2
 8002464:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	691b      	ldr	r3, [r3, #16]
 800246a:	1cba      	adds	r2, r7, #2
 800246c:	8812      	ldrh	r2, [r2, #0]
 800246e:	4013      	ands	r3, r2
 8002470:	d004      	beq.n	800247c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002472:	230f      	movs	r3, #15
 8002474:	18fb      	adds	r3, r7, r3
 8002476:	2201      	movs	r2, #1
 8002478:	701a      	strb	r2, [r3, #0]
 800247a:	e003      	b.n	8002484 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800247c:	230f      	movs	r3, #15
 800247e:	18fb      	adds	r3, r7, r3
 8002480:	2200      	movs	r2, #0
 8002482:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002484:	230f      	movs	r3, #15
 8002486:	18fb      	adds	r3, r7, r3
 8002488:	781b      	ldrb	r3, [r3, #0]
  }
 800248a:	0018      	movs	r0, r3
 800248c:	46bd      	mov	sp, r7
 800248e:	b004      	add	sp, #16
 8002490:	bd80      	pop	{r7, pc}

08002492 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002492:	b580      	push	{r7, lr}
 8002494:	b082      	sub	sp, #8
 8002496:	af00      	add	r7, sp, #0
 8002498:	6078      	str	r0, [r7, #4]
 800249a:	0008      	movs	r0, r1
 800249c:	0011      	movs	r1, r2
 800249e:	1cbb      	adds	r3, r7, #2
 80024a0:	1c02      	adds	r2, r0, #0
 80024a2:	801a      	strh	r2, [r3, #0]
 80024a4:	1c7b      	adds	r3, r7, #1
 80024a6:	1c0a      	adds	r2, r1, #0
 80024a8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80024aa:	1c7b      	adds	r3, r7, #1
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d004      	beq.n	80024bc <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80024b2:	1cbb      	adds	r3, r7, #2
 80024b4:	881a      	ldrh	r2, [r3, #0]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80024ba:	e003      	b.n	80024c4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80024bc:	1cbb      	adds	r3, r7, #2
 80024be:	881a      	ldrh	r2, [r3, #0]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80024c4:	46c0      	nop			; (mov r8, r8)
 80024c6:	46bd      	mov	sp, r7
 80024c8:	b002      	add	sp, #8
 80024ca:	bd80      	pop	{r7, pc}

080024cc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b084      	sub	sp, #16
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
 80024d4:	000a      	movs	r2, r1
 80024d6:	1cbb      	adds	r3, r7, #2
 80024d8:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	695b      	ldr	r3, [r3, #20]
 80024de:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80024e0:	1cbb      	adds	r3, r7, #2
 80024e2:	881b      	ldrh	r3, [r3, #0]
 80024e4:	68fa      	ldr	r2, [r7, #12]
 80024e6:	4013      	ands	r3, r2
 80024e8:	041a      	lsls	r2, r3, #16
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	43db      	mvns	r3, r3
 80024ee:	1cb9      	adds	r1, r7, #2
 80024f0:	8809      	ldrh	r1, [r1, #0]
 80024f2:	400b      	ands	r3, r1
 80024f4:	431a      	orrs	r2, r3
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	619a      	str	r2, [r3, #24]
}
 80024fa:	46c0      	nop			; (mov r8, r8)
 80024fc:	46bd      	mov	sp, r7
 80024fe:	b004      	add	sp, #16
 8002500:	bd80      	pop	{r7, pc}
	...

08002504 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b088      	sub	sp, #32
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d101      	bne.n	8002516 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e301      	b.n	8002b1a <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	2201      	movs	r2, #1
 800251c:	4013      	ands	r3, r2
 800251e:	d100      	bne.n	8002522 <HAL_RCC_OscConfig+0x1e>
 8002520:	e08d      	b.n	800263e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002522:	4bc3      	ldr	r3, [pc, #780]	; (8002830 <HAL_RCC_OscConfig+0x32c>)
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	220c      	movs	r2, #12
 8002528:	4013      	ands	r3, r2
 800252a:	2b04      	cmp	r3, #4
 800252c:	d00e      	beq.n	800254c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800252e:	4bc0      	ldr	r3, [pc, #768]	; (8002830 <HAL_RCC_OscConfig+0x32c>)
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	220c      	movs	r2, #12
 8002534:	4013      	ands	r3, r2
 8002536:	2b08      	cmp	r3, #8
 8002538:	d116      	bne.n	8002568 <HAL_RCC_OscConfig+0x64>
 800253a:	4bbd      	ldr	r3, [pc, #756]	; (8002830 <HAL_RCC_OscConfig+0x32c>)
 800253c:	685a      	ldr	r2, [r3, #4]
 800253e:	2380      	movs	r3, #128	; 0x80
 8002540:	025b      	lsls	r3, r3, #9
 8002542:	401a      	ands	r2, r3
 8002544:	2380      	movs	r3, #128	; 0x80
 8002546:	025b      	lsls	r3, r3, #9
 8002548:	429a      	cmp	r2, r3
 800254a:	d10d      	bne.n	8002568 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800254c:	4bb8      	ldr	r3, [pc, #736]	; (8002830 <HAL_RCC_OscConfig+0x32c>)
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	2380      	movs	r3, #128	; 0x80
 8002552:	029b      	lsls	r3, r3, #10
 8002554:	4013      	ands	r3, r2
 8002556:	d100      	bne.n	800255a <HAL_RCC_OscConfig+0x56>
 8002558:	e070      	b.n	800263c <HAL_RCC_OscConfig+0x138>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d000      	beq.n	8002564 <HAL_RCC_OscConfig+0x60>
 8002562:	e06b      	b.n	800263c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e2d8      	b.n	8002b1a <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	2b01      	cmp	r3, #1
 800256e:	d107      	bne.n	8002580 <HAL_RCC_OscConfig+0x7c>
 8002570:	4baf      	ldr	r3, [pc, #700]	; (8002830 <HAL_RCC_OscConfig+0x32c>)
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	4bae      	ldr	r3, [pc, #696]	; (8002830 <HAL_RCC_OscConfig+0x32c>)
 8002576:	2180      	movs	r1, #128	; 0x80
 8002578:	0249      	lsls	r1, r1, #9
 800257a:	430a      	orrs	r2, r1
 800257c:	601a      	str	r2, [r3, #0]
 800257e:	e02f      	b.n	80025e0 <HAL_RCC_OscConfig+0xdc>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d10c      	bne.n	80025a2 <HAL_RCC_OscConfig+0x9e>
 8002588:	4ba9      	ldr	r3, [pc, #676]	; (8002830 <HAL_RCC_OscConfig+0x32c>)
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	4ba8      	ldr	r3, [pc, #672]	; (8002830 <HAL_RCC_OscConfig+0x32c>)
 800258e:	49a9      	ldr	r1, [pc, #676]	; (8002834 <HAL_RCC_OscConfig+0x330>)
 8002590:	400a      	ands	r2, r1
 8002592:	601a      	str	r2, [r3, #0]
 8002594:	4ba6      	ldr	r3, [pc, #664]	; (8002830 <HAL_RCC_OscConfig+0x32c>)
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	4ba5      	ldr	r3, [pc, #660]	; (8002830 <HAL_RCC_OscConfig+0x32c>)
 800259a:	49a7      	ldr	r1, [pc, #668]	; (8002838 <HAL_RCC_OscConfig+0x334>)
 800259c:	400a      	ands	r2, r1
 800259e:	601a      	str	r2, [r3, #0]
 80025a0:	e01e      	b.n	80025e0 <HAL_RCC_OscConfig+0xdc>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	2b05      	cmp	r3, #5
 80025a8:	d10e      	bne.n	80025c8 <HAL_RCC_OscConfig+0xc4>
 80025aa:	4ba1      	ldr	r3, [pc, #644]	; (8002830 <HAL_RCC_OscConfig+0x32c>)
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	4ba0      	ldr	r3, [pc, #640]	; (8002830 <HAL_RCC_OscConfig+0x32c>)
 80025b0:	2180      	movs	r1, #128	; 0x80
 80025b2:	02c9      	lsls	r1, r1, #11
 80025b4:	430a      	orrs	r2, r1
 80025b6:	601a      	str	r2, [r3, #0]
 80025b8:	4b9d      	ldr	r3, [pc, #628]	; (8002830 <HAL_RCC_OscConfig+0x32c>)
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	4b9c      	ldr	r3, [pc, #624]	; (8002830 <HAL_RCC_OscConfig+0x32c>)
 80025be:	2180      	movs	r1, #128	; 0x80
 80025c0:	0249      	lsls	r1, r1, #9
 80025c2:	430a      	orrs	r2, r1
 80025c4:	601a      	str	r2, [r3, #0]
 80025c6:	e00b      	b.n	80025e0 <HAL_RCC_OscConfig+0xdc>
 80025c8:	4b99      	ldr	r3, [pc, #612]	; (8002830 <HAL_RCC_OscConfig+0x32c>)
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	4b98      	ldr	r3, [pc, #608]	; (8002830 <HAL_RCC_OscConfig+0x32c>)
 80025ce:	4999      	ldr	r1, [pc, #612]	; (8002834 <HAL_RCC_OscConfig+0x330>)
 80025d0:	400a      	ands	r2, r1
 80025d2:	601a      	str	r2, [r3, #0]
 80025d4:	4b96      	ldr	r3, [pc, #600]	; (8002830 <HAL_RCC_OscConfig+0x32c>)
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	4b95      	ldr	r3, [pc, #596]	; (8002830 <HAL_RCC_OscConfig+0x32c>)
 80025da:	4997      	ldr	r1, [pc, #604]	; (8002838 <HAL_RCC_OscConfig+0x334>)
 80025dc:	400a      	ands	r2, r1
 80025de:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d014      	beq.n	8002612 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025e8:	f7ff fa20 	bl	8001a2c <HAL_GetTick>
 80025ec:	0003      	movs	r3, r0
 80025ee:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025f0:	e008      	b.n	8002604 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025f2:	f7ff fa1b 	bl	8001a2c <HAL_GetTick>
 80025f6:	0002      	movs	r2, r0
 80025f8:	69bb      	ldr	r3, [r7, #24]
 80025fa:	1ad3      	subs	r3, r2, r3
 80025fc:	2b64      	cmp	r3, #100	; 0x64
 80025fe:	d901      	bls.n	8002604 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8002600:	2303      	movs	r3, #3
 8002602:	e28a      	b.n	8002b1a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002604:	4b8a      	ldr	r3, [pc, #552]	; (8002830 <HAL_RCC_OscConfig+0x32c>)
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	2380      	movs	r3, #128	; 0x80
 800260a:	029b      	lsls	r3, r3, #10
 800260c:	4013      	ands	r3, r2
 800260e:	d0f0      	beq.n	80025f2 <HAL_RCC_OscConfig+0xee>
 8002610:	e015      	b.n	800263e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002612:	f7ff fa0b 	bl	8001a2c <HAL_GetTick>
 8002616:	0003      	movs	r3, r0
 8002618:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800261a:	e008      	b.n	800262e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800261c:	f7ff fa06 	bl	8001a2c <HAL_GetTick>
 8002620:	0002      	movs	r2, r0
 8002622:	69bb      	ldr	r3, [r7, #24]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	2b64      	cmp	r3, #100	; 0x64
 8002628:	d901      	bls.n	800262e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e275      	b.n	8002b1a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800262e:	4b80      	ldr	r3, [pc, #512]	; (8002830 <HAL_RCC_OscConfig+0x32c>)
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	2380      	movs	r3, #128	; 0x80
 8002634:	029b      	lsls	r3, r3, #10
 8002636:	4013      	ands	r3, r2
 8002638:	d1f0      	bne.n	800261c <HAL_RCC_OscConfig+0x118>
 800263a:	e000      	b.n	800263e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800263c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	2202      	movs	r2, #2
 8002644:	4013      	ands	r3, r2
 8002646:	d100      	bne.n	800264a <HAL_RCC_OscConfig+0x146>
 8002648:	e069      	b.n	800271e <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800264a:	4b79      	ldr	r3, [pc, #484]	; (8002830 <HAL_RCC_OscConfig+0x32c>)
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	220c      	movs	r2, #12
 8002650:	4013      	ands	r3, r2
 8002652:	d00b      	beq.n	800266c <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002654:	4b76      	ldr	r3, [pc, #472]	; (8002830 <HAL_RCC_OscConfig+0x32c>)
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	220c      	movs	r2, #12
 800265a:	4013      	ands	r3, r2
 800265c:	2b08      	cmp	r3, #8
 800265e:	d11c      	bne.n	800269a <HAL_RCC_OscConfig+0x196>
 8002660:	4b73      	ldr	r3, [pc, #460]	; (8002830 <HAL_RCC_OscConfig+0x32c>)
 8002662:	685a      	ldr	r2, [r3, #4]
 8002664:	2380      	movs	r3, #128	; 0x80
 8002666:	025b      	lsls	r3, r3, #9
 8002668:	4013      	ands	r3, r2
 800266a:	d116      	bne.n	800269a <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800266c:	4b70      	ldr	r3, [pc, #448]	; (8002830 <HAL_RCC_OscConfig+0x32c>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	2202      	movs	r2, #2
 8002672:	4013      	ands	r3, r2
 8002674:	d005      	beq.n	8002682 <HAL_RCC_OscConfig+0x17e>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	68db      	ldr	r3, [r3, #12]
 800267a:	2b01      	cmp	r3, #1
 800267c:	d001      	beq.n	8002682 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e24b      	b.n	8002b1a <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002682:	4b6b      	ldr	r3, [pc, #428]	; (8002830 <HAL_RCC_OscConfig+0x32c>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	22f8      	movs	r2, #248	; 0xf8
 8002688:	4393      	bics	r3, r2
 800268a:	0019      	movs	r1, r3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	691b      	ldr	r3, [r3, #16]
 8002690:	00da      	lsls	r2, r3, #3
 8002692:	4b67      	ldr	r3, [pc, #412]	; (8002830 <HAL_RCC_OscConfig+0x32c>)
 8002694:	430a      	orrs	r2, r1
 8002696:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002698:	e041      	b.n	800271e <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d024      	beq.n	80026ec <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026a2:	4b63      	ldr	r3, [pc, #396]	; (8002830 <HAL_RCC_OscConfig+0x32c>)
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	4b62      	ldr	r3, [pc, #392]	; (8002830 <HAL_RCC_OscConfig+0x32c>)
 80026a8:	2101      	movs	r1, #1
 80026aa:	430a      	orrs	r2, r1
 80026ac:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ae:	f7ff f9bd 	bl	8001a2c <HAL_GetTick>
 80026b2:	0003      	movs	r3, r0
 80026b4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026b6:	e008      	b.n	80026ca <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026b8:	f7ff f9b8 	bl	8001a2c <HAL_GetTick>
 80026bc:	0002      	movs	r2, r0
 80026be:	69bb      	ldr	r3, [r7, #24]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d901      	bls.n	80026ca <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	e227      	b.n	8002b1a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026ca:	4b59      	ldr	r3, [pc, #356]	; (8002830 <HAL_RCC_OscConfig+0x32c>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	2202      	movs	r2, #2
 80026d0:	4013      	ands	r3, r2
 80026d2:	d0f1      	beq.n	80026b8 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026d4:	4b56      	ldr	r3, [pc, #344]	; (8002830 <HAL_RCC_OscConfig+0x32c>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	22f8      	movs	r2, #248	; 0xf8
 80026da:	4393      	bics	r3, r2
 80026dc:	0019      	movs	r1, r3
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	691b      	ldr	r3, [r3, #16]
 80026e2:	00da      	lsls	r2, r3, #3
 80026e4:	4b52      	ldr	r3, [pc, #328]	; (8002830 <HAL_RCC_OscConfig+0x32c>)
 80026e6:	430a      	orrs	r2, r1
 80026e8:	601a      	str	r2, [r3, #0]
 80026ea:	e018      	b.n	800271e <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026ec:	4b50      	ldr	r3, [pc, #320]	; (8002830 <HAL_RCC_OscConfig+0x32c>)
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	4b4f      	ldr	r3, [pc, #316]	; (8002830 <HAL_RCC_OscConfig+0x32c>)
 80026f2:	2101      	movs	r1, #1
 80026f4:	438a      	bics	r2, r1
 80026f6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f8:	f7ff f998 	bl	8001a2c <HAL_GetTick>
 80026fc:	0003      	movs	r3, r0
 80026fe:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002700:	e008      	b.n	8002714 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002702:	f7ff f993 	bl	8001a2c <HAL_GetTick>
 8002706:	0002      	movs	r2, r0
 8002708:	69bb      	ldr	r3, [r7, #24]
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	2b02      	cmp	r3, #2
 800270e:	d901      	bls.n	8002714 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8002710:	2303      	movs	r3, #3
 8002712:	e202      	b.n	8002b1a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002714:	4b46      	ldr	r3, [pc, #280]	; (8002830 <HAL_RCC_OscConfig+0x32c>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	2202      	movs	r2, #2
 800271a:	4013      	ands	r3, r2
 800271c:	d1f1      	bne.n	8002702 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	2208      	movs	r2, #8
 8002724:	4013      	ands	r3, r2
 8002726:	d036      	beq.n	8002796 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	69db      	ldr	r3, [r3, #28]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d019      	beq.n	8002764 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002730:	4b3f      	ldr	r3, [pc, #252]	; (8002830 <HAL_RCC_OscConfig+0x32c>)
 8002732:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002734:	4b3e      	ldr	r3, [pc, #248]	; (8002830 <HAL_RCC_OscConfig+0x32c>)
 8002736:	2101      	movs	r1, #1
 8002738:	430a      	orrs	r2, r1
 800273a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800273c:	f7ff f976 	bl	8001a2c <HAL_GetTick>
 8002740:	0003      	movs	r3, r0
 8002742:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002744:	e008      	b.n	8002758 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002746:	f7ff f971 	bl	8001a2c <HAL_GetTick>
 800274a:	0002      	movs	r2, r0
 800274c:	69bb      	ldr	r3, [r7, #24]
 800274e:	1ad3      	subs	r3, r2, r3
 8002750:	2b02      	cmp	r3, #2
 8002752:	d901      	bls.n	8002758 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8002754:	2303      	movs	r3, #3
 8002756:	e1e0      	b.n	8002b1a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002758:	4b35      	ldr	r3, [pc, #212]	; (8002830 <HAL_RCC_OscConfig+0x32c>)
 800275a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800275c:	2202      	movs	r2, #2
 800275e:	4013      	ands	r3, r2
 8002760:	d0f1      	beq.n	8002746 <HAL_RCC_OscConfig+0x242>
 8002762:	e018      	b.n	8002796 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002764:	4b32      	ldr	r3, [pc, #200]	; (8002830 <HAL_RCC_OscConfig+0x32c>)
 8002766:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002768:	4b31      	ldr	r3, [pc, #196]	; (8002830 <HAL_RCC_OscConfig+0x32c>)
 800276a:	2101      	movs	r1, #1
 800276c:	438a      	bics	r2, r1
 800276e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002770:	f7ff f95c 	bl	8001a2c <HAL_GetTick>
 8002774:	0003      	movs	r3, r0
 8002776:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002778:	e008      	b.n	800278c <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800277a:	f7ff f957 	bl	8001a2c <HAL_GetTick>
 800277e:	0002      	movs	r2, r0
 8002780:	69bb      	ldr	r3, [r7, #24]
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	2b02      	cmp	r3, #2
 8002786:	d901      	bls.n	800278c <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8002788:	2303      	movs	r3, #3
 800278a:	e1c6      	b.n	8002b1a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800278c:	4b28      	ldr	r3, [pc, #160]	; (8002830 <HAL_RCC_OscConfig+0x32c>)
 800278e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002790:	2202      	movs	r2, #2
 8002792:	4013      	ands	r3, r2
 8002794:	d1f1      	bne.n	800277a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	2204      	movs	r2, #4
 800279c:	4013      	ands	r3, r2
 800279e:	d100      	bne.n	80027a2 <HAL_RCC_OscConfig+0x29e>
 80027a0:	e0b4      	b.n	800290c <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027a2:	201f      	movs	r0, #31
 80027a4:	183b      	adds	r3, r7, r0
 80027a6:	2200      	movs	r2, #0
 80027a8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027aa:	4b21      	ldr	r3, [pc, #132]	; (8002830 <HAL_RCC_OscConfig+0x32c>)
 80027ac:	69da      	ldr	r2, [r3, #28]
 80027ae:	2380      	movs	r3, #128	; 0x80
 80027b0:	055b      	lsls	r3, r3, #21
 80027b2:	4013      	ands	r3, r2
 80027b4:	d110      	bne.n	80027d8 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027b6:	4b1e      	ldr	r3, [pc, #120]	; (8002830 <HAL_RCC_OscConfig+0x32c>)
 80027b8:	69da      	ldr	r2, [r3, #28]
 80027ba:	4b1d      	ldr	r3, [pc, #116]	; (8002830 <HAL_RCC_OscConfig+0x32c>)
 80027bc:	2180      	movs	r1, #128	; 0x80
 80027be:	0549      	lsls	r1, r1, #21
 80027c0:	430a      	orrs	r2, r1
 80027c2:	61da      	str	r2, [r3, #28]
 80027c4:	4b1a      	ldr	r3, [pc, #104]	; (8002830 <HAL_RCC_OscConfig+0x32c>)
 80027c6:	69da      	ldr	r2, [r3, #28]
 80027c8:	2380      	movs	r3, #128	; 0x80
 80027ca:	055b      	lsls	r3, r3, #21
 80027cc:	4013      	ands	r3, r2
 80027ce:	60fb      	str	r3, [r7, #12]
 80027d0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80027d2:	183b      	adds	r3, r7, r0
 80027d4:	2201      	movs	r2, #1
 80027d6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027d8:	4b18      	ldr	r3, [pc, #96]	; (800283c <HAL_RCC_OscConfig+0x338>)
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	2380      	movs	r3, #128	; 0x80
 80027de:	005b      	lsls	r3, r3, #1
 80027e0:	4013      	ands	r3, r2
 80027e2:	d11a      	bne.n	800281a <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027e4:	4b15      	ldr	r3, [pc, #84]	; (800283c <HAL_RCC_OscConfig+0x338>)
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	4b14      	ldr	r3, [pc, #80]	; (800283c <HAL_RCC_OscConfig+0x338>)
 80027ea:	2180      	movs	r1, #128	; 0x80
 80027ec:	0049      	lsls	r1, r1, #1
 80027ee:	430a      	orrs	r2, r1
 80027f0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027f2:	f7ff f91b 	bl	8001a2c <HAL_GetTick>
 80027f6:	0003      	movs	r3, r0
 80027f8:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027fa:	e008      	b.n	800280e <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027fc:	f7ff f916 	bl	8001a2c <HAL_GetTick>
 8002800:	0002      	movs	r2, r0
 8002802:	69bb      	ldr	r3, [r7, #24]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	2b64      	cmp	r3, #100	; 0x64
 8002808:	d901      	bls.n	800280e <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	e185      	b.n	8002b1a <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800280e:	4b0b      	ldr	r3, [pc, #44]	; (800283c <HAL_RCC_OscConfig+0x338>)
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	2380      	movs	r3, #128	; 0x80
 8002814:	005b      	lsls	r3, r3, #1
 8002816:	4013      	ands	r3, r2
 8002818:	d0f0      	beq.n	80027fc <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	2b01      	cmp	r3, #1
 8002820:	d10e      	bne.n	8002840 <HAL_RCC_OscConfig+0x33c>
 8002822:	4b03      	ldr	r3, [pc, #12]	; (8002830 <HAL_RCC_OscConfig+0x32c>)
 8002824:	6a1a      	ldr	r2, [r3, #32]
 8002826:	4b02      	ldr	r3, [pc, #8]	; (8002830 <HAL_RCC_OscConfig+0x32c>)
 8002828:	2101      	movs	r1, #1
 800282a:	430a      	orrs	r2, r1
 800282c:	621a      	str	r2, [r3, #32]
 800282e:	e035      	b.n	800289c <HAL_RCC_OscConfig+0x398>
 8002830:	40021000 	.word	0x40021000
 8002834:	fffeffff 	.word	0xfffeffff
 8002838:	fffbffff 	.word	0xfffbffff
 800283c:	40007000 	.word	0x40007000
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d10c      	bne.n	8002862 <HAL_RCC_OscConfig+0x35e>
 8002848:	4bb6      	ldr	r3, [pc, #728]	; (8002b24 <HAL_RCC_OscConfig+0x620>)
 800284a:	6a1a      	ldr	r2, [r3, #32]
 800284c:	4bb5      	ldr	r3, [pc, #724]	; (8002b24 <HAL_RCC_OscConfig+0x620>)
 800284e:	2101      	movs	r1, #1
 8002850:	438a      	bics	r2, r1
 8002852:	621a      	str	r2, [r3, #32]
 8002854:	4bb3      	ldr	r3, [pc, #716]	; (8002b24 <HAL_RCC_OscConfig+0x620>)
 8002856:	6a1a      	ldr	r2, [r3, #32]
 8002858:	4bb2      	ldr	r3, [pc, #712]	; (8002b24 <HAL_RCC_OscConfig+0x620>)
 800285a:	2104      	movs	r1, #4
 800285c:	438a      	bics	r2, r1
 800285e:	621a      	str	r2, [r3, #32]
 8002860:	e01c      	b.n	800289c <HAL_RCC_OscConfig+0x398>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	2b05      	cmp	r3, #5
 8002868:	d10c      	bne.n	8002884 <HAL_RCC_OscConfig+0x380>
 800286a:	4bae      	ldr	r3, [pc, #696]	; (8002b24 <HAL_RCC_OscConfig+0x620>)
 800286c:	6a1a      	ldr	r2, [r3, #32]
 800286e:	4bad      	ldr	r3, [pc, #692]	; (8002b24 <HAL_RCC_OscConfig+0x620>)
 8002870:	2104      	movs	r1, #4
 8002872:	430a      	orrs	r2, r1
 8002874:	621a      	str	r2, [r3, #32]
 8002876:	4bab      	ldr	r3, [pc, #684]	; (8002b24 <HAL_RCC_OscConfig+0x620>)
 8002878:	6a1a      	ldr	r2, [r3, #32]
 800287a:	4baa      	ldr	r3, [pc, #680]	; (8002b24 <HAL_RCC_OscConfig+0x620>)
 800287c:	2101      	movs	r1, #1
 800287e:	430a      	orrs	r2, r1
 8002880:	621a      	str	r2, [r3, #32]
 8002882:	e00b      	b.n	800289c <HAL_RCC_OscConfig+0x398>
 8002884:	4ba7      	ldr	r3, [pc, #668]	; (8002b24 <HAL_RCC_OscConfig+0x620>)
 8002886:	6a1a      	ldr	r2, [r3, #32]
 8002888:	4ba6      	ldr	r3, [pc, #664]	; (8002b24 <HAL_RCC_OscConfig+0x620>)
 800288a:	2101      	movs	r1, #1
 800288c:	438a      	bics	r2, r1
 800288e:	621a      	str	r2, [r3, #32]
 8002890:	4ba4      	ldr	r3, [pc, #656]	; (8002b24 <HAL_RCC_OscConfig+0x620>)
 8002892:	6a1a      	ldr	r2, [r3, #32]
 8002894:	4ba3      	ldr	r3, [pc, #652]	; (8002b24 <HAL_RCC_OscConfig+0x620>)
 8002896:	2104      	movs	r1, #4
 8002898:	438a      	bics	r2, r1
 800289a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d014      	beq.n	80028ce <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028a4:	f7ff f8c2 	bl	8001a2c <HAL_GetTick>
 80028a8:	0003      	movs	r3, r0
 80028aa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028ac:	e009      	b.n	80028c2 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028ae:	f7ff f8bd 	bl	8001a2c <HAL_GetTick>
 80028b2:	0002      	movs	r2, r0
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	4a9b      	ldr	r2, [pc, #620]	; (8002b28 <HAL_RCC_OscConfig+0x624>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d901      	bls.n	80028c2 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	e12b      	b.n	8002b1a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028c2:	4b98      	ldr	r3, [pc, #608]	; (8002b24 <HAL_RCC_OscConfig+0x620>)
 80028c4:	6a1b      	ldr	r3, [r3, #32]
 80028c6:	2202      	movs	r2, #2
 80028c8:	4013      	ands	r3, r2
 80028ca:	d0f0      	beq.n	80028ae <HAL_RCC_OscConfig+0x3aa>
 80028cc:	e013      	b.n	80028f6 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028ce:	f7ff f8ad 	bl	8001a2c <HAL_GetTick>
 80028d2:	0003      	movs	r3, r0
 80028d4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028d6:	e009      	b.n	80028ec <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028d8:	f7ff f8a8 	bl	8001a2c <HAL_GetTick>
 80028dc:	0002      	movs	r2, r0
 80028de:	69bb      	ldr	r3, [r7, #24]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	4a91      	ldr	r2, [pc, #580]	; (8002b28 <HAL_RCC_OscConfig+0x624>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d901      	bls.n	80028ec <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80028e8:	2303      	movs	r3, #3
 80028ea:	e116      	b.n	8002b1a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028ec:	4b8d      	ldr	r3, [pc, #564]	; (8002b24 <HAL_RCC_OscConfig+0x620>)
 80028ee:	6a1b      	ldr	r3, [r3, #32]
 80028f0:	2202      	movs	r2, #2
 80028f2:	4013      	ands	r3, r2
 80028f4:	d1f0      	bne.n	80028d8 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80028f6:	231f      	movs	r3, #31
 80028f8:	18fb      	adds	r3, r7, r3
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d105      	bne.n	800290c <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002900:	4b88      	ldr	r3, [pc, #544]	; (8002b24 <HAL_RCC_OscConfig+0x620>)
 8002902:	69da      	ldr	r2, [r3, #28]
 8002904:	4b87      	ldr	r3, [pc, #540]	; (8002b24 <HAL_RCC_OscConfig+0x620>)
 8002906:	4989      	ldr	r1, [pc, #548]	; (8002b2c <HAL_RCC_OscConfig+0x628>)
 8002908:	400a      	ands	r2, r1
 800290a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	2210      	movs	r2, #16
 8002912:	4013      	ands	r3, r2
 8002914:	d063      	beq.n	80029de <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	695b      	ldr	r3, [r3, #20]
 800291a:	2b01      	cmp	r3, #1
 800291c:	d12a      	bne.n	8002974 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800291e:	4b81      	ldr	r3, [pc, #516]	; (8002b24 <HAL_RCC_OscConfig+0x620>)
 8002920:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002922:	4b80      	ldr	r3, [pc, #512]	; (8002b24 <HAL_RCC_OscConfig+0x620>)
 8002924:	2104      	movs	r1, #4
 8002926:	430a      	orrs	r2, r1
 8002928:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800292a:	4b7e      	ldr	r3, [pc, #504]	; (8002b24 <HAL_RCC_OscConfig+0x620>)
 800292c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800292e:	4b7d      	ldr	r3, [pc, #500]	; (8002b24 <HAL_RCC_OscConfig+0x620>)
 8002930:	2101      	movs	r1, #1
 8002932:	430a      	orrs	r2, r1
 8002934:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002936:	f7ff f879 	bl	8001a2c <HAL_GetTick>
 800293a:	0003      	movs	r3, r0
 800293c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800293e:	e008      	b.n	8002952 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002940:	f7ff f874 	bl	8001a2c <HAL_GetTick>
 8002944:	0002      	movs	r2, r0
 8002946:	69bb      	ldr	r3, [r7, #24]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	2b02      	cmp	r3, #2
 800294c:	d901      	bls.n	8002952 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e0e3      	b.n	8002b1a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002952:	4b74      	ldr	r3, [pc, #464]	; (8002b24 <HAL_RCC_OscConfig+0x620>)
 8002954:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002956:	2202      	movs	r2, #2
 8002958:	4013      	ands	r3, r2
 800295a:	d0f1      	beq.n	8002940 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800295c:	4b71      	ldr	r3, [pc, #452]	; (8002b24 <HAL_RCC_OscConfig+0x620>)
 800295e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002960:	22f8      	movs	r2, #248	; 0xf8
 8002962:	4393      	bics	r3, r2
 8002964:	0019      	movs	r1, r3
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	699b      	ldr	r3, [r3, #24]
 800296a:	00da      	lsls	r2, r3, #3
 800296c:	4b6d      	ldr	r3, [pc, #436]	; (8002b24 <HAL_RCC_OscConfig+0x620>)
 800296e:	430a      	orrs	r2, r1
 8002970:	635a      	str	r2, [r3, #52]	; 0x34
 8002972:	e034      	b.n	80029de <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	695b      	ldr	r3, [r3, #20]
 8002978:	3305      	adds	r3, #5
 800297a:	d111      	bne.n	80029a0 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800297c:	4b69      	ldr	r3, [pc, #420]	; (8002b24 <HAL_RCC_OscConfig+0x620>)
 800297e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002980:	4b68      	ldr	r3, [pc, #416]	; (8002b24 <HAL_RCC_OscConfig+0x620>)
 8002982:	2104      	movs	r1, #4
 8002984:	438a      	bics	r2, r1
 8002986:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002988:	4b66      	ldr	r3, [pc, #408]	; (8002b24 <HAL_RCC_OscConfig+0x620>)
 800298a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800298c:	22f8      	movs	r2, #248	; 0xf8
 800298e:	4393      	bics	r3, r2
 8002990:	0019      	movs	r1, r3
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	699b      	ldr	r3, [r3, #24]
 8002996:	00da      	lsls	r2, r3, #3
 8002998:	4b62      	ldr	r3, [pc, #392]	; (8002b24 <HAL_RCC_OscConfig+0x620>)
 800299a:	430a      	orrs	r2, r1
 800299c:	635a      	str	r2, [r3, #52]	; 0x34
 800299e:	e01e      	b.n	80029de <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80029a0:	4b60      	ldr	r3, [pc, #384]	; (8002b24 <HAL_RCC_OscConfig+0x620>)
 80029a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029a4:	4b5f      	ldr	r3, [pc, #380]	; (8002b24 <HAL_RCC_OscConfig+0x620>)
 80029a6:	2104      	movs	r1, #4
 80029a8:	430a      	orrs	r2, r1
 80029aa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80029ac:	4b5d      	ldr	r3, [pc, #372]	; (8002b24 <HAL_RCC_OscConfig+0x620>)
 80029ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029b0:	4b5c      	ldr	r3, [pc, #368]	; (8002b24 <HAL_RCC_OscConfig+0x620>)
 80029b2:	2101      	movs	r1, #1
 80029b4:	438a      	bics	r2, r1
 80029b6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029b8:	f7ff f838 	bl	8001a2c <HAL_GetTick>
 80029bc:	0003      	movs	r3, r0
 80029be:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80029c0:	e008      	b.n	80029d4 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80029c2:	f7ff f833 	bl	8001a2c <HAL_GetTick>
 80029c6:	0002      	movs	r2, r0
 80029c8:	69bb      	ldr	r3, [r7, #24]
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	2b02      	cmp	r3, #2
 80029ce:	d901      	bls.n	80029d4 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80029d0:	2303      	movs	r3, #3
 80029d2:	e0a2      	b.n	8002b1a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80029d4:	4b53      	ldr	r3, [pc, #332]	; (8002b24 <HAL_RCC_OscConfig+0x620>)
 80029d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029d8:	2202      	movs	r2, #2
 80029da:	4013      	ands	r3, r2
 80029dc:	d1f1      	bne.n	80029c2 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6a1b      	ldr	r3, [r3, #32]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d100      	bne.n	80029e8 <HAL_RCC_OscConfig+0x4e4>
 80029e6:	e097      	b.n	8002b18 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029e8:	4b4e      	ldr	r3, [pc, #312]	; (8002b24 <HAL_RCC_OscConfig+0x620>)
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	220c      	movs	r2, #12
 80029ee:	4013      	ands	r3, r2
 80029f0:	2b08      	cmp	r3, #8
 80029f2:	d100      	bne.n	80029f6 <HAL_RCC_OscConfig+0x4f2>
 80029f4:	e06b      	b.n	8002ace <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6a1b      	ldr	r3, [r3, #32]
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d14c      	bne.n	8002a98 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029fe:	4b49      	ldr	r3, [pc, #292]	; (8002b24 <HAL_RCC_OscConfig+0x620>)
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	4b48      	ldr	r3, [pc, #288]	; (8002b24 <HAL_RCC_OscConfig+0x620>)
 8002a04:	494a      	ldr	r1, [pc, #296]	; (8002b30 <HAL_RCC_OscConfig+0x62c>)
 8002a06:	400a      	ands	r2, r1
 8002a08:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a0a:	f7ff f80f 	bl	8001a2c <HAL_GetTick>
 8002a0e:	0003      	movs	r3, r0
 8002a10:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a12:	e008      	b.n	8002a26 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a14:	f7ff f80a 	bl	8001a2c <HAL_GetTick>
 8002a18:	0002      	movs	r2, r0
 8002a1a:	69bb      	ldr	r3, [r7, #24]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	2b02      	cmp	r3, #2
 8002a20:	d901      	bls.n	8002a26 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e079      	b.n	8002b1a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a26:	4b3f      	ldr	r3, [pc, #252]	; (8002b24 <HAL_RCC_OscConfig+0x620>)
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	2380      	movs	r3, #128	; 0x80
 8002a2c:	049b      	lsls	r3, r3, #18
 8002a2e:	4013      	ands	r3, r2
 8002a30:	d1f0      	bne.n	8002a14 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a32:	4b3c      	ldr	r3, [pc, #240]	; (8002b24 <HAL_RCC_OscConfig+0x620>)
 8002a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a36:	220f      	movs	r2, #15
 8002a38:	4393      	bics	r3, r2
 8002a3a:	0019      	movs	r1, r3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a40:	4b38      	ldr	r3, [pc, #224]	; (8002b24 <HAL_RCC_OscConfig+0x620>)
 8002a42:	430a      	orrs	r2, r1
 8002a44:	62da      	str	r2, [r3, #44]	; 0x2c
 8002a46:	4b37      	ldr	r3, [pc, #220]	; (8002b24 <HAL_RCC_OscConfig+0x620>)
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	4a3a      	ldr	r2, [pc, #232]	; (8002b34 <HAL_RCC_OscConfig+0x630>)
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	0019      	movs	r1, r3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a58:	431a      	orrs	r2, r3
 8002a5a:	4b32      	ldr	r3, [pc, #200]	; (8002b24 <HAL_RCC_OscConfig+0x620>)
 8002a5c:	430a      	orrs	r2, r1
 8002a5e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a60:	4b30      	ldr	r3, [pc, #192]	; (8002b24 <HAL_RCC_OscConfig+0x620>)
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	4b2f      	ldr	r3, [pc, #188]	; (8002b24 <HAL_RCC_OscConfig+0x620>)
 8002a66:	2180      	movs	r1, #128	; 0x80
 8002a68:	0449      	lsls	r1, r1, #17
 8002a6a:	430a      	orrs	r2, r1
 8002a6c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a6e:	f7fe ffdd 	bl	8001a2c <HAL_GetTick>
 8002a72:	0003      	movs	r3, r0
 8002a74:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a76:	e008      	b.n	8002a8a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a78:	f7fe ffd8 	bl	8001a2c <HAL_GetTick>
 8002a7c:	0002      	movs	r2, r0
 8002a7e:	69bb      	ldr	r3, [r7, #24]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d901      	bls.n	8002a8a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e047      	b.n	8002b1a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a8a:	4b26      	ldr	r3, [pc, #152]	; (8002b24 <HAL_RCC_OscConfig+0x620>)
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	2380      	movs	r3, #128	; 0x80
 8002a90:	049b      	lsls	r3, r3, #18
 8002a92:	4013      	ands	r3, r2
 8002a94:	d0f0      	beq.n	8002a78 <HAL_RCC_OscConfig+0x574>
 8002a96:	e03f      	b.n	8002b18 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a98:	4b22      	ldr	r3, [pc, #136]	; (8002b24 <HAL_RCC_OscConfig+0x620>)
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	4b21      	ldr	r3, [pc, #132]	; (8002b24 <HAL_RCC_OscConfig+0x620>)
 8002a9e:	4924      	ldr	r1, [pc, #144]	; (8002b30 <HAL_RCC_OscConfig+0x62c>)
 8002aa0:	400a      	ands	r2, r1
 8002aa2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aa4:	f7fe ffc2 	bl	8001a2c <HAL_GetTick>
 8002aa8:	0003      	movs	r3, r0
 8002aaa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002aac:	e008      	b.n	8002ac0 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002aae:	f7fe ffbd 	bl	8001a2c <HAL_GetTick>
 8002ab2:	0002      	movs	r2, r0
 8002ab4:	69bb      	ldr	r3, [r7, #24]
 8002ab6:	1ad3      	subs	r3, r2, r3
 8002ab8:	2b02      	cmp	r3, #2
 8002aba:	d901      	bls.n	8002ac0 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8002abc:	2303      	movs	r3, #3
 8002abe:	e02c      	b.n	8002b1a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ac0:	4b18      	ldr	r3, [pc, #96]	; (8002b24 <HAL_RCC_OscConfig+0x620>)
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	2380      	movs	r3, #128	; 0x80
 8002ac6:	049b      	lsls	r3, r3, #18
 8002ac8:	4013      	ands	r3, r2
 8002aca:	d1f0      	bne.n	8002aae <HAL_RCC_OscConfig+0x5aa>
 8002acc:	e024      	b.n	8002b18 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6a1b      	ldr	r3, [r3, #32]
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d101      	bne.n	8002ada <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e01f      	b.n	8002b1a <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002ada:	4b12      	ldr	r3, [pc, #72]	; (8002b24 <HAL_RCC_OscConfig+0x620>)
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002ae0:	4b10      	ldr	r3, [pc, #64]	; (8002b24 <HAL_RCC_OscConfig+0x620>)
 8002ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae4:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ae6:	697a      	ldr	r2, [r7, #20]
 8002ae8:	2380      	movs	r3, #128	; 0x80
 8002aea:	025b      	lsls	r3, r3, #9
 8002aec:	401a      	ands	r2, r3
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d10e      	bne.n	8002b14 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	220f      	movs	r2, #15
 8002afa:	401a      	ands	r2, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d107      	bne.n	8002b14 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002b04:	697a      	ldr	r2, [r7, #20]
 8002b06:	23f0      	movs	r3, #240	; 0xf0
 8002b08:	039b      	lsls	r3, r3, #14
 8002b0a:	401a      	ands	r2, r3
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d001      	beq.n	8002b18 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	e000      	b.n	8002b1a <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8002b18:	2300      	movs	r3, #0
}
 8002b1a:	0018      	movs	r0, r3
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	b008      	add	sp, #32
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	46c0      	nop			; (mov r8, r8)
 8002b24:	40021000 	.word	0x40021000
 8002b28:	00001388 	.word	0x00001388
 8002b2c:	efffffff 	.word	0xefffffff
 8002b30:	feffffff 	.word	0xfeffffff
 8002b34:	ffc2ffff 	.word	0xffc2ffff

08002b38 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b084      	sub	sp, #16
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
 8002b40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d101      	bne.n	8002b4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e0b3      	b.n	8002cb4 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b4c:	4b5b      	ldr	r3, [pc, #364]	; (8002cbc <HAL_RCC_ClockConfig+0x184>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	2201      	movs	r2, #1
 8002b52:	4013      	ands	r3, r2
 8002b54:	683a      	ldr	r2, [r7, #0]
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d911      	bls.n	8002b7e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b5a:	4b58      	ldr	r3, [pc, #352]	; (8002cbc <HAL_RCC_ClockConfig+0x184>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	4393      	bics	r3, r2
 8002b62:	0019      	movs	r1, r3
 8002b64:	4b55      	ldr	r3, [pc, #340]	; (8002cbc <HAL_RCC_ClockConfig+0x184>)
 8002b66:	683a      	ldr	r2, [r7, #0]
 8002b68:	430a      	orrs	r2, r1
 8002b6a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b6c:	4b53      	ldr	r3, [pc, #332]	; (8002cbc <HAL_RCC_ClockConfig+0x184>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2201      	movs	r2, #1
 8002b72:	4013      	ands	r3, r2
 8002b74:	683a      	ldr	r2, [r7, #0]
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d001      	beq.n	8002b7e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e09a      	b.n	8002cb4 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	2202      	movs	r2, #2
 8002b84:	4013      	ands	r3, r2
 8002b86:	d015      	beq.n	8002bb4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2204      	movs	r2, #4
 8002b8e:	4013      	ands	r3, r2
 8002b90:	d006      	beq.n	8002ba0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002b92:	4b4b      	ldr	r3, [pc, #300]	; (8002cc0 <HAL_RCC_ClockConfig+0x188>)
 8002b94:	685a      	ldr	r2, [r3, #4]
 8002b96:	4b4a      	ldr	r3, [pc, #296]	; (8002cc0 <HAL_RCC_ClockConfig+0x188>)
 8002b98:	21e0      	movs	r1, #224	; 0xe0
 8002b9a:	00c9      	lsls	r1, r1, #3
 8002b9c:	430a      	orrs	r2, r1
 8002b9e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ba0:	4b47      	ldr	r3, [pc, #284]	; (8002cc0 <HAL_RCC_ClockConfig+0x188>)
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	22f0      	movs	r2, #240	; 0xf0
 8002ba6:	4393      	bics	r3, r2
 8002ba8:	0019      	movs	r1, r3
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	689a      	ldr	r2, [r3, #8]
 8002bae:	4b44      	ldr	r3, [pc, #272]	; (8002cc0 <HAL_RCC_ClockConfig+0x188>)
 8002bb0:	430a      	orrs	r2, r1
 8002bb2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	2201      	movs	r2, #1
 8002bba:	4013      	ands	r3, r2
 8002bbc:	d040      	beq.n	8002c40 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d107      	bne.n	8002bd6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bc6:	4b3e      	ldr	r3, [pc, #248]	; (8002cc0 <HAL_RCC_ClockConfig+0x188>)
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	2380      	movs	r3, #128	; 0x80
 8002bcc:	029b      	lsls	r3, r3, #10
 8002bce:	4013      	ands	r3, r2
 8002bd0:	d114      	bne.n	8002bfc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e06e      	b.n	8002cb4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d107      	bne.n	8002bee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bde:	4b38      	ldr	r3, [pc, #224]	; (8002cc0 <HAL_RCC_ClockConfig+0x188>)
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	2380      	movs	r3, #128	; 0x80
 8002be4:	049b      	lsls	r3, r3, #18
 8002be6:	4013      	ands	r3, r2
 8002be8:	d108      	bne.n	8002bfc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e062      	b.n	8002cb4 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bee:	4b34      	ldr	r3, [pc, #208]	; (8002cc0 <HAL_RCC_ClockConfig+0x188>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	2202      	movs	r2, #2
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	d101      	bne.n	8002bfc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e05b      	b.n	8002cb4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bfc:	4b30      	ldr	r3, [pc, #192]	; (8002cc0 <HAL_RCC_ClockConfig+0x188>)
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	2203      	movs	r2, #3
 8002c02:	4393      	bics	r3, r2
 8002c04:	0019      	movs	r1, r3
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	685a      	ldr	r2, [r3, #4]
 8002c0a:	4b2d      	ldr	r3, [pc, #180]	; (8002cc0 <HAL_RCC_ClockConfig+0x188>)
 8002c0c:	430a      	orrs	r2, r1
 8002c0e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c10:	f7fe ff0c 	bl	8001a2c <HAL_GetTick>
 8002c14:	0003      	movs	r3, r0
 8002c16:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c18:	e009      	b.n	8002c2e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c1a:	f7fe ff07 	bl	8001a2c <HAL_GetTick>
 8002c1e:	0002      	movs	r2, r0
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	1ad3      	subs	r3, r2, r3
 8002c24:	4a27      	ldr	r2, [pc, #156]	; (8002cc4 <HAL_RCC_ClockConfig+0x18c>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d901      	bls.n	8002c2e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e042      	b.n	8002cb4 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c2e:	4b24      	ldr	r3, [pc, #144]	; (8002cc0 <HAL_RCC_ClockConfig+0x188>)
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	220c      	movs	r2, #12
 8002c34:	401a      	ands	r2, r3
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d1ec      	bne.n	8002c1a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c40:	4b1e      	ldr	r3, [pc, #120]	; (8002cbc <HAL_RCC_ClockConfig+0x184>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	2201      	movs	r2, #1
 8002c46:	4013      	ands	r3, r2
 8002c48:	683a      	ldr	r2, [r7, #0]
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	d211      	bcs.n	8002c72 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c4e:	4b1b      	ldr	r3, [pc, #108]	; (8002cbc <HAL_RCC_ClockConfig+0x184>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	2201      	movs	r2, #1
 8002c54:	4393      	bics	r3, r2
 8002c56:	0019      	movs	r1, r3
 8002c58:	4b18      	ldr	r3, [pc, #96]	; (8002cbc <HAL_RCC_ClockConfig+0x184>)
 8002c5a:	683a      	ldr	r2, [r7, #0]
 8002c5c:	430a      	orrs	r2, r1
 8002c5e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c60:	4b16      	ldr	r3, [pc, #88]	; (8002cbc <HAL_RCC_ClockConfig+0x184>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	2201      	movs	r2, #1
 8002c66:	4013      	ands	r3, r2
 8002c68:	683a      	ldr	r2, [r7, #0]
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d001      	beq.n	8002c72 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e020      	b.n	8002cb4 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	2204      	movs	r2, #4
 8002c78:	4013      	ands	r3, r2
 8002c7a:	d009      	beq.n	8002c90 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002c7c:	4b10      	ldr	r3, [pc, #64]	; (8002cc0 <HAL_RCC_ClockConfig+0x188>)
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	4a11      	ldr	r2, [pc, #68]	; (8002cc8 <HAL_RCC_ClockConfig+0x190>)
 8002c82:	4013      	ands	r3, r2
 8002c84:	0019      	movs	r1, r3
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	68da      	ldr	r2, [r3, #12]
 8002c8a:	4b0d      	ldr	r3, [pc, #52]	; (8002cc0 <HAL_RCC_ClockConfig+0x188>)
 8002c8c:	430a      	orrs	r2, r1
 8002c8e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002c90:	f000 f820 	bl	8002cd4 <HAL_RCC_GetSysClockFreq>
 8002c94:	0001      	movs	r1, r0
 8002c96:	4b0a      	ldr	r3, [pc, #40]	; (8002cc0 <HAL_RCC_ClockConfig+0x188>)
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	091b      	lsrs	r3, r3, #4
 8002c9c:	220f      	movs	r2, #15
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	4a0a      	ldr	r2, [pc, #40]	; (8002ccc <HAL_RCC_ClockConfig+0x194>)
 8002ca2:	5cd3      	ldrb	r3, [r2, r3]
 8002ca4:	000a      	movs	r2, r1
 8002ca6:	40da      	lsrs	r2, r3
 8002ca8:	4b09      	ldr	r3, [pc, #36]	; (8002cd0 <HAL_RCC_ClockConfig+0x198>)
 8002caa:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002cac:	2003      	movs	r0, #3
 8002cae:	f7fe fe77 	bl	80019a0 <HAL_InitTick>
  
  return HAL_OK;
 8002cb2:	2300      	movs	r3, #0
}
 8002cb4:	0018      	movs	r0, r3
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	b004      	add	sp, #16
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	40022000 	.word	0x40022000
 8002cc0:	40021000 	.word	0x40021000
 8002cc4:	00001388 	.word	0x00001388
 8002cc8:	fffff8ff 	.word	0xfffff8ff
 8002ccc:	08005668 	.word	0x08005668
 8002cd0:	20000068 	.word	0x20000068

08002cd4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b086      	sub	sp, #24
 8002cd8:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	60fb      	str	r3, [r7, #12]
 8002cde:	2300      	movs	r3, #0
 8002ce0:	60bb      	str	r3, [r7, #8]
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	617b      	str	r3, [r7, #20]
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002cea:	2300      	movs	r3, #0
 8002cec:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002cee:	4b20      	ldr	r3, [pc, #128]	; (8002d70 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	220c      	movs	r2, #12
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	2b04      	cmp	r3, #4
 8002cfc:	d002      	beq.n	8002d04 <HAL_RCC_GetSysClockFreq+0x30>
 8002cfe:	2b08      	cmp	r3, #8
 8002d00:	d003      	beq.n	8002d0a <HAL_RCC_GetSysClockFreq+0x36>
 8002d02:	e02c      	b.n	8002d5e <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d04:	4b1b      	ldr	r3, [pc, #108]	; (8002d74 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002d06:	613b      	str	r3, [r7, #16]
      break;
 8002d08:	e02c      	b.n	8002d64 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	0c9b      	lsrs	r3, r3, #18
 8002d0e:	220f      	movs	r2, #15
 8002d10:	4013      	ands	r3, r2
 8002d12:	4a19      	ldr	r2, [pc, #100]	; (8002d78 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002d14:	5cd3      	ldrb	r3, [r2, r3]
 8002d16:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002d18:	4b15      	ldr	r3, [pc, #84]	; (8002d70 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d1c:	220f      	movs	r2, #15
 8002d1e:	4013      	ands	r3, r2
 8002d20:	4a16      	ldr	r2, [pc, #88]	; (8002d7c <HAL_RCC_GetSysClockFreq+0xa8>)
 8002d22:	5cd3      	ldrb	r3, [r2, r3]
 8002d24:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002d26:	68fa      	ldr	r2, [r7, #12]
 8002d28:	2380      	movs	r3, #128	; 0x80
 8002d2a:	025b      	lsls	r3, r3, #9
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	d009      	beq.n	8002d44 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002d30:	68b9      	ldr	r1, [r7, #8]
 8002d32:	4810      	ldr	r0, [pc, #64]	; (8002d74 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002d34:	f7fd f9f2 	bl	800011c <__udivsi3>
 8002d38:	0003      	movs	r3, r0
 8002d3a:	001a      	movs	r2, r3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	4353      	muls	r3, r2
 8002d40:	617b      	str	r3, [r7, #20]
 8002d42:	e009      	b.n	8002d58 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002d44:	6879      	ldr	r1, [r7, #4]
 8002d46:	000a      	movs	r2, r1
 8002d48:	0152      	lsls	r2, r2, #5
 8002d4a:	1a52      	subs	r2, r2, r1
 8002d4c:	0193      	lsls	r3, r2, #6
 8002d4e:	1a9b      	subs	r3, r3, r2
 8002d50:	00db      	lsls	r3, r3, #3
 8002d52:	185b      	adds	r3, r3, r1
 8002d54:	021b      	lsls	r3, r3, #8
 8002d56:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	613b      	str	r3, [r7, #16]
      break;
 8002d5c:	e002      	b.n	8002d64 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d5e:	4b05      	ldr	r3, [pc, #20]	; (8002d74 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002d60:	613b      	str	r3, [r7, #16]
      break;
 8002d62:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002d64:	693b      	ldr	r3, [r7, #16]
}
 8002d66:	0018      	movs	r0, r3
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	b006      	add	sp, #24
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	46c0      	nop			; (mov r8, r8)
 8002d70:	40021000 	.word	0x40021000
 8002d74:	007a1200 	.word	0x007a1200
 8002d78:	08005880 	.word	0x08005880
 8002d7c:	08005890 	.word	0x08005890

08002d80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d84:	4b02      	ldr	r3, [pc, #8]	; (8002d90 <HAL_RCC_GetHCLKFreq+0x10>)
 8002d86:	681b      	ldr	r3, [r3, #0]
}
 8002d88:	0018      	movs	r0, r3
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	46c0      	nop			; (mov r8, r8)
 8002d90:	20000068 	.word	0x20000068

08002d94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002d98:	f7ff fff2 	bl	8002d80 <HAL_RCC_GetHCLKFreq>
 8002d9c:	0001      	movs	r1, r0
 8002d9e:	4b06      	ldr	r3, [pc, #24]	; (8002db8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	0a1b      	lsrs	r3, r3, #8
 8002da4:	2207      	movs	r2, #7
 8002da6:	4013      	ands	r3, r2
 8002da8:	4a04      	ldr	r2, [pc, #16]	; (8002dbc <HAL_RCC_GetPCLK1Freq+0x28>)
 8002daa:	5cd3      	ldrb	r3, [r2, r3]
 8002dac:	40d9      	lsrs	r1, r3
 8002dae:	000b      	movs	r3, r1
}    
 8002db0:	0018      	movs	r0, r3
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	46c0      	nop			; (mov r8, r8)
 8002db8:	40021000 	.word	0x40021000
 8002dbc:	08005678 	.word	0x08005678

08002dc0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b086      	sub	sp, #24
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	2380      	movs	r3, #128	; 0x80
 8002dd6:	025b      	lsls	r3, r3, #9
 8002dd8:	4013      	ands	r3, r2
 8002dda:	d100      	bne.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002ddc:	e08e      	b.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002dde:	2017      	movs	r0, #23
 8002de0:	183b      	adds	r3, r7, r0
 8002de2:	2200      	movs	r2, #0
 8002de4:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002de6:	4b5f      	ldr	r3, [pc, #380]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002de8:	69da      	ldr	r2, [r3, #28]
 8002dea:	2380      	movs	r3, #128	; 0x80
 8002dec:	055b      	lsls	r3, r3, #21
 8002dee:	4013      	ands	r3, r2
 8002df0:	d110      	bne.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002df2:	4b5c      	ldr	r3, [pc, #368]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002df4:	69da      	ldr	r2, [r3, #28]
 8002df6:	4b5b      	ldr	r3, [pc, #364]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002df8:	2180      	movs	r1, #128	; 0x80
 8002dfa:	0549      	lsls	r1, r1, #21
 8002dfc:	430a      	orrs	r2, r1
 8002dfe:	61da      	str	r2, [r3, #28]
 8002e00:	4b58      	ldr	r3, [pc, #352]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002e02:	69da      	ldr	r2, [r3, #28]
 8002e04:	2380      	movs	r3, #128	; 0x80
 8002e06:	055b      	lsls	r3, r3, #21
 8002e08:	4013      	ands	r3, r2
 8002e0a:	60bb      	str	r3, [r7, #8]
 8002e0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e0e:	183b      	adds	r3, r7, r0
 8002e10:	2201      	movs	r2, #1
 8002e12:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e14:	4b54      	ldr	r3, [pc, #336]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	2380      	movs	r3, #128	; 0x80
 8002e1a:	005b      	lsls	r3, r3, #1
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	d11a      	bne.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e20:	4b51      	ldr	r3, [pc, #324]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	4b50      	ldr	r3, [pc, #320]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002e26:	2180      	movs	r1, #128	; 0x80
 8002e28:	0049      	lsls	r1, r1, #1
 8002e2a:	430a      	orrs	r2, r1
 8002e2c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e2e:	f7fe fdfd 	bl	8001a2c <HAL_GetTick>
 8002e32:	0003      	movs	r3, r0
 8002e34:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e36:	e008      	b.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e38:	f7fe fdf8 	bl	8001a2c <HAL_GetTick>
 8002e3c:	0002      	movs	r2, r0
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	2b64      	cmp	r3, #100	; 0x64
 8002e44:	d901      	bls.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	e087      	b.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e4a:	4b47      	ldr	r3, [pc, #284]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	2380      	movs	r3, #128	; 0x80
 8002e50:	005b      	lsls	r3, r3, #1
 8002e52:	4013      	ands	r3, r2
 8002e54:	d0f0      	beq.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002e56:	4b43      	ldr	r3, [pc, #268]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002e58:	6a1a      	ldr	r2, [r3, #32]
 8002e5a:	23c0      	movs	r3, #192	; 0xc0
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	4013      	ands	r3, r2
 8002e60:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d034      	beq.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	685a      	ldr	r2, [r3, #4]
 8002e6c:	23c0      	movs	r3, #192	; 0xc0
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	4013      	ands	r3, r2
 8002e72:	68fa      	ldr	r2, [r7, #12]
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d02c      	beq.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e78:	4b3a      	ldr	r3, [pc, #232]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002e7a:	6a1b      	ldr	r3, [r3, #32]
 8002e7c:	4a3b      	ldr	r2, [pc, #236]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e7e:	4013      	ands	r3, r2
 8002e80:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e82:	4b38      	ldr	r3, [pc, #224]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002e84:	6a1a      	ldr	r2, [r3, #32]
 8002e86:	4b37      	ldr	r3, [pc, #220]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002e88:	2180      	movs	r1, #128	; 0x80
 8002e8a:	0249      	lsls	r1, r1, #9
 8002e8c:	430a      	orrs	r2, r1
 8002e8e:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e90:	4b34      	ldr	r3, [pc, #208]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002e92:	6a1a      	ldr	r2, [r3, #32]
 8002e94:	4b33      	ldr	r3, [pc, #204]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002e96:	4936      	ldr	r1, [pc, #216]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002e98:	400a      	ands	r2, r1
 8002e9a:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002e9c:	4b31      	ldr	r3, [pc, #196]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002e9e:	68fa      	ldr	r2, [r7, #12]
 8002ea0:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	d013      	beq.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eaa:	f7fe fdbf 	bl	8001a2c <HAL_GetTick>
 8002eae:	0003      	movs	r3, r0
 8002eb0:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eb2:	e009      	b.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eb4:	f7fe fdba 	bl	8001a2c <HAL_GetTick>
 8002eb8:	0002      	movs	r2, r0
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	4a2d      	ldr	r2, [pc, #180]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d901      	bls.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002ec4:	2303      	movs	r3, #3
 8002ec6:	e048      	b.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ec8:	4b26      	ldr	r3, [pc, #152]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002eca:	6a1b      	ldr	r3, [r3, #32]
 8002ecc:	2202      	movs	r2, #2
 8002ece:	4013      	ands	r3, r2
 8002ed0:	d0f0      	beq.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ed2:	4b24      	ldr	r3, [pc, #144]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002ed4:	6a1b      	ldr	r3, [r3, #32]
 8002ed6:	4a25      	ldr	r2, [pc, #148]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ed8:	4013      	ands	r3, r2
 8002eda:	0019      	movs	r1, r3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	685a      	ldr	r2, [r3, #4]
 8002ee0:	4b20      	ldr	r3, [pc, #128]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002ee2:	430a      	orrs	r2, r1
 8002ee4:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002ee6:	2317      	movs	r3, #23
 8002ee8:	18fb      	adds	r3, r7, r3
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d105      	bne.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ef0:	4b1c      	ldr	r3, [pc, #112]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002ef2:	69da      	ldr	r2, [r3, #28]
 8002ef4:	4b1b      	ldr	r3, [pc, #108]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002ef6:	4920      	ldr	r1, [pc, #128]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002ef8:	400a      	ands	r2, r1
 8002efa:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	2201      	movs	r2, #1
 8002f02:	4013      	ands	r3, r2
 8002f04:	d009      	beq.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f06:	4b17      	ldr	r3, [pc, #92]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f0a:	2203      	movs	r2, #3
 8002f0c:	4393      	bics	r3, r2
 8002f0e:	0019      	movs	r1, r3
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	689a      	ldr	r2, [r3, #8]
 8002f14:	4b13      	ldr	r3, [pc, #76]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002f16:	430a      	orrs	r2, r1
 8002f18:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	2220      	movs	r2, #32
 8002f20:	4013      	ands	r3, r2
 8002f22:	d009      	beq.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f24:	4b0f      	ldr	r3, [pc, #60]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f28:	2210      	movs	r2, #16
 8002f2a:	4393      	bics	r3, r2
 8002f2c:	0019      	movs	r1, r3
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	68da      	ldr	r2, [r3, #12]
 8002f32:	4b0c      	ldr	r3, [pc, #48]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002f34:	430a      	orrs	r2, r1
 8002f36:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	2380      	movs	r3, #128	; 0x80
 8002f3e:	00db      	lsls	r3, r3, #3
 8002f40:	4013      	ands	r3, r2
 8002f42:	d009      	beq.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002f44:	4b07      	ldr	r3, [pc, #28]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f48:	2240      	movs	r2, #64	; 0x40
 8002f4a:	4393      	bics	r3, r2
 8002f4c:	0019      	movs	r1, r3
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	691a      	ldr	r2, [r3, #16]
 8002f52:	4b04      	ldr	r3, [pc, #16]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002f54:	430a      	orrs	r2, r1
 8002f56:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002f58:	2300      	movs	r3, #0
}
 8002f5a:	0018      	movs	r0, r3
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	b006      	add	sp, #24
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	46c0      	nop			; (mov r8, r8)
 8002f64:	40021000 	.word	0x40021000
 8002f68:	40007000 	.word	0x40007000
 8002f6c:	fffffcff 	.word	0xfffffcff
 8002f70:	fffeffff 	.word	0xfffeffff
 8002f74:	00001388 	.word	0x00001388
 8002f78:	efffffff 	.word	0xefffffff

08002f7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b082      	sub	sp, #8
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d101      	bne.n	8002f8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e044      	b.n	8003018 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d107      	bne.n	8002fa6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2278      	movs	r2, #120	; 0x78
 8002f9a:	2100      	movs	r1, #0
 8002f9c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	0018      	movs	r0, r3
 8002fa2:	f7fe f8ff 	bl	80011a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2224      	movs	r2, #36	; 0x24
 8002faa:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	2101      	movs	r1, #1
 8002fb8:	438a      	bics	r2, r1
 8002fba:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	0018      	movs	r0, r3
 8002fc0:	f000 fbfe 	bl	80037c0 <UART_SetConfig>
 8002fc4:	0003      	movs	r3, r0
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d101      	bne.n	8002fce <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e024      	b.n	8003018 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d003      	beq.n	8002fde <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	0018      	movs	r0, r3
 8002fda:	f000 fd31 	bl	8003a40 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	685a      	ldr	r2, [r3, #4]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	490d      	ldr	r1, [pc, #52]	; (8003020 <HAL_UART_Init+0xa4>)
 8002fea:	400a      	ands	r2, r1
 8002fec:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	689a      	ldr	r2, [r3, #8]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	212a      	movs	r1, #42	; 0x2a
 8002ffa:	438a      	bics	r2, r1
 8002ffc:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	2101      	movs	r1, #1
 800300a:	430a      	orrs	r2, r1
 800300c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	0018      	movs	r0, r3
 8003012:	f000 fdc9 	bl	8003ba8 <UART_CheckIdleState>
 8003016:	0003      	movs	r3, r0
}
 8003018:	0018      	movs	r0, r3
 800301a:	46bd      	mov	sp, r7
 800301c:	b002      	add	sp, #8
 800301e:	bd80      	pop	{r7, pc}
 8003020:	ffffb7ff 	.word	0xffffb7ff

08003024 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b082      	sub	sp, #8
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d101      	bne.n	8003036 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e030      	b.n	8003098 <HAL_UART_DeInit+0x74>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2224      	movs	r2, #36	; 0x24
 800303a:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	2101      	movs	r1, #1
 8003048:	438a      	bics	r2, r1
 800304a:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	2200      	movs	r2, #0
 8003052:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	2200      	movs	r2, #0
 800305a:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	2200      	movs	r2, #0
 8003062:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	0018      	movs	r0, r3
 8003068:	f7fe f988 	bl	800137c <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2284      	movs	r2, #132	; 0x84
 8003070:	2100      	movs	r1, #0
 8003072:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2200      	movs	r2, #0
 8003078:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_RESET;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2280      	movs	r2, #128	; 0x80
 800307e:	2100      	movs	r1, #0
 8003080:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2278      	movs	r2, #120	; 0x78
 8003092:	2100      	movs	r1, #0
 8003094:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003096:	2300      	movs	r3, #0
}
 8003098:	0018      	movs	r0, r3
 800309a:	46bd      	mov	sp, r7
 800309c:	b002      	add	sp, #8
 800309e:	bd80      	pop	{r7, pc}

080030a0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b08a      	sub	sp, #40	; 0x28
 80030a4:	af02      	add	r7, sp, #8
 80030a6:	60f8      	str	r0, [r7, #12]
 80030a8:	60b9      	str	r1, [r7, #8]
 80030aa:	603b      	str	r3, [r7, #0]
 80030ac:	1dbb      	adds	r3, r7, #6
 80030ae:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030b4:	2b20      	cmp	r3, #32
 80030b6:	d000      	beq.n	80030ba <HAL_UART_Transmit+0x1a>
 80030b8:	e08d      	b.n	80031d6 <HAL_UART_Transmit+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d003      	beq.n	80030c8 <HAL_UART_Transmit+0x28>
 80030c0:	1dbb      	adds	r3, r7, #6
 80030c2:	881b      	ldrh	r3, [r3, #0]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d101      	bne.n	80030cc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e085      	b.n	80031d8 <HAL_UART_Transmit+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	689a      	ldr	r2, [r3, #8]
 80030d0:	2380      	movs	r3, #128	; 0x80
 80030d2:	015b      	lsls	r3, r3, #5
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d109      	bne.n	80030ec <HAL_UART_Transmit+0x4c>
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	691b      	ldr	r3, [r3, #16]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d105      	bne.n	80030ec <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	2201      	movs	r2, #1
 80030e4:	4013      	ands	r3, r2
 80030e6:	d001      	beq.n	80030ec <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	e075      	b.n	80031d8 <HAL_UART_Transmit+0x138>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2284      	movs	r2, #132	; 0x84
 80030f0:	2100      	movs	r1, #0
 80030f2:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2221      	movs	r2, #33	; 0x21
 80030f8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80030fa:	f7fe fc97 	bl	8001a2c <HAL_GetTick>
 80030fe:	0003      	movs	r3, r0
 8003100:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	1dba      	adds	r2, r7, #6
 8003106:	2150      	movs	r1, #80	; 0x50
 8003108:	8812      	ldrh	r2, [r2, #0]
 800310a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	1dba      	adds	r2, r7, #6
 8003110:	2152      	movs	r1, #82	; 0x52
 8003112:	8812      	ldrh	r2, [r2, #0]
 8003114:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	689a      	ldr	r2, [r3, #8]
 800311a:	2380      	movs	r3, #128	; 0x80
 800311c:	015b      	lsls	r3, r3, #5
 800311e:	429a      	cmp	r2, r3
 8003120:	d108      	bne.n	8003134 <HAL_UART_Transmit+0x94>
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	691b      	ldr	r3, [r3, #16]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d104      	bne.n	8003134 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800312a:	2300      	movs	r3, #0
 800312c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	61bb      	str	r3, [r7, #24]
 8003132:	e003      	b.n	800313c <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003138:	2300      	movs	r3, #0
 800313a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800313c:	e030      	b.n	80031a0 <HAL_UART_Transmit+0x100>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800313e:	697a      	ldr	r2, [r7, #20]
 8003140:	68f8      	ldr	r0, [r7, #12]
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	9300      	str	r3, [sp, #0]
 8003146:	0013      	movs	r3, r2
 8003148:	2200      	movs	r2, #0
 800314a:	2180      	movs	r1, #128	; 0x80
 800314c:	f000 fdd4 	bl	8003cf8 <UART_WaitOnFlagUntilTimeout>
 8003150:	1e03      	subs	r3, r0, #0
 8003152:	d004      	beq.n	800315e <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2220      	movs	r2, #32
 8003158:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800315a:	2303      	movs	r3, #3
 800315c:	e03c      	b.n	80031d8 <HAL_UART_Transmit+0x138>
      }
      if (pdata8bits == NULL)
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d10b      	bne.n	800317c <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003164:	69bb      	ldr	r3, [r7, #24]
 8003166:	881a      	ldrh	r2, [r3, #0]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	05d2      	lsls	r2, r2, #23
 800316e:	0dd2      	lsrs	r2, r2, #23
 8003170:	b292      	uxth	r2, r2
 8003172:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003174:	69bb      	ldr	r3, [r7, #24]
 8003176:	3302      	adds	r3, #2
 8003178:	61bb      	str	r3, [r7, #24]
 800317a:	e008      	b.n	800318e <HAL_UART_Transmit+0xee>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800317c:	69fb      	ldr	r3, [r7, #28]
 800317e:	781a      	ldrb	r2, [r3, #0]
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	b292      	uxth	r2, r2
 8003186:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003188:	69fb      	ldr	r3, [r7, #28]
 800318a:	3301      	adds	r3, #1
 800318c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2252      	movs	r2, #82	; 0x52
 8003192:	5a9b      	ldrh	r3, [r3, r2]
 8003194:	b29b      	uxth	r3, r3
 8003196:	3b01      	subs	r3, #1
 8003198:	b299      	uxth	r1, r3
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2252      	movs	r2, #82	; 0x52
 800319e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2252      	movs	r2, #82	; 0x52
 80031a4:	5a9b      	ldrh	r3, [r3, r2]
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d1c8      	bne.n	800313e <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80031ac:	697a      	ldr	r2, [r7, #20]
 80031ae:	68f8      	ldr	r0, [r7, #12]
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	9300      	str	r3, [sp, #0]
 80031b4:	0013      	movs	r3, r2
 80031b6:	2200      	movs	r2, #0
 80031b8:	2140      	movs	r1, #64	; 0x40
 80031ba:	f000 fd9d 	bl	8003cf8 <UART_WaitOnFlagUntilTimeout>
 80031be:	1e03      	subs	r3, r0, #0
 80031c0:	d004      	beq.n	80031cc <HAL_UART_Transmit+0x12c>
    {
      huart->gState = HAL_UART_STATE_READY;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2220      	movs	r2, #32
 80031c6:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80031c8:	2303      	movs	r3, #3
 80031ca:	e005      	b.n	80031d8 <HAL_UART_Transmit+0x138>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2220      	movs	r2, #32
 80031d0:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80031d2:	2300      	movs	r3, #0
 80031d4:	e000      	b.n	80031d8 <HAL_UART_Transmit+0x138>
  }
  else
  {
    return HAL_BUSY;
 80031d6:	2302      	movs	r3, #2
  }
}
 80031d8:	0018      	movs	r0, r3
 80031da:	46bd      	mov	sp, r7
 80031dc:	b008      	add	sp, #32
 80031de:	bd80      	pop	{r7, pc}

080031e0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80031e0:	b590      	push	{r4, r7, lr}
 80031e2:	b0ab      	sub	sp, #172	; 0xac
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	69db      	ldr	r3, [r3, #28]
 80031ee:	22a4      	movs	r2, #164	; 0xa4
 80031f0:	18b9      	adds	r1, r7, r2
 80031f2:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	20a0      	movs	r0, #160	; 0xa0
 80031fc:	1839      	adds	r1, r7, r0
 80031fe:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	219c      	movs	r1, #156	; 0x9c
 8003208:	1879      	adds	r1, r7, r1
 800320a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800320c:	0011      	movs	r1, r2
 800320e:	18bb      	adds	r3, r7, r2
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a99      	ldr	r2, [pc, #612]	; (8003478 <HAL_UART_IRQHandler+0x298>)
 8003214:	4013      	ands	r3, r2
 8003216:	2298      	movs	r2, #152	; 0x98
 8003218:	18bc      	adds	r4, r7, r2
 800321a:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 800321c:	18bb      	adds	r3, r7, r2
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d114      	bne.n	800324e <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003224:	187b      	adds	r3, r7, r1
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	2220      	movs	r2, #32
 800322a:	4013      	ands	r3, r2
 800322c:	d00f      	beq.n	800324e <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800322e:	183b      	adds	r3, r7, r0
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	2220      	movs	r2, #32
 8003234:	4013      	ands	r3, r2
 8003236:	d00a      	beq.n	800324e <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800323c:	2b00      	cmp	r3, #0
 800323e:	d100      	bne.n	8003242 <HAL_UART_IRQHandler+0x62>
 8003240:	e29e      	b.n	8003780 <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	0010      	movs	r0, r2
 800324a:	4798      	blx	r3
      }
      return;
 800324c:	e298      	b.n	8003780 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800324e:	2398      	movs	r3, #152	; 0x98
 8003250:	18fb      	adds	r3, r7, r3
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d100      	bne.n	800325a <HAL_UART_IRQHandler+0x7a>
 8003258:	e114      	b.n	8003484 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800325a:	239c      	movs	r3, #156	; 0x9c
 800325c:	18fb      	adds	r3, r7, r3
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	2201      	movs	r2, #1
 8003262:	4013      	ands	r3, r2
 8003264:	d106      	bne.n	8003274 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003266:	23a0      	movs	r3, #160	; 0xa0
 8003268:	18fb      	adds	r3, r7, r3
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a83      	ldr	r2, [pc, #524]	; (800347c <HAL_UART_IRQHandler+0x29c>)
 800326e:	4013      	ands	r3, r2
 8003270:	d100      	bne.n	8003274 <HAL_UART_IRQHandler+0x94>
 8003272:	e107      	b.n	8003484 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003274:	23a4      	movs	r3, #164	; 0xa4
 8003276:	18fb      	adds	r3, r7, r3
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	2201      	movs	r2, #1
 800327c:	4013      	ands	r3, r2
 800327e:	d012      	beq.n	80032a6 <HAL_UART_IRQHandler+0xc6>
 8003280:	23a0      	movs	r3, #160	; 0xa0
 8003282:	18fb      	adds	r3, r7, r3
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	2380      	movs	r3, #128	; 0x80
 8003288:	005b      	lsls	r3, r3, #1
 800328a:	4013      	ands	r3, r2
 800328c:	d00b      	beq.n	80032a6 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	2201      	movs	r2, #1
 8003294:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2284      	movs	r2, #132	; 0x84
 800329a:	589b      	ldr	r3, [r3, r2]
 800329c:	2201      	movs	r2, #1
 800329e:	431a      	orrs	r2, r3
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2184      	movs	r1, #132	; 0x84
 80032a4:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80032a6:	23a4      	movs	r3, #164	; 0xa4
 80032a8:	18fb      	adds	r3, r7, r3
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	2202      	movs	r2, #2
 80032ae:	4013      	ands	r3, r2
 80032b0:	d011      	beq.n	80032d6 <HAL_UART_IRQHandler+0xf6>
 80032b2:	239c      	movs	r3, #156	; 0x9c
 80032b4:	18fb      	adds	r3, r7, r3
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	2201      	movs	r2, #1
 80032ba:	4013      	ands	r3, r2
 80032bc:	d00b      	beq.n	80032d6 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	2202      	movs	r2, #2
 80032c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2284      	movs	r2, #132	; 0x84
 80032ca:	589b      	ldr	r3, [r3, r2]
 80032cc:	2204      	movs	r2, #4
 80032ce:	431a      	orrs	r2, r3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2184      	movs	r1, #132	; 0x84
 80032d4:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80032d6:	23a4      	movs	r3, #164	; 0xa4
 80032d8:	18fb      	adds	r3, r7, r3
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	2204      	movs	r2, #4
 80032de:	4013      	ands	r3, r2
 80032e0:	d011      	beq.n	8003306 <HAL_UART_IRQHandler+0x126>
 80032e2:	239c      	movs	r3, #156	; 0x9c
 80032e4:	18fb      	adds	r3, r7, r3
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	2201      	movs	r2, #1
 80032ea:	4013      	ands	r3, r2
 80032ec:	d00b      	beq.n	8003306 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	2204      	movs	r2, #4
 80032f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2284      	movs	r2, #132	; 0x84
 80032fa:	589b      	ldr	r3, [r3, r2]
 80032fc:	2202      	movs	r2, #2
 80032fe:	431a      	orrs	r2, r3
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2184      	movs	r1, #132	; 0x84
 8003304:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003306:	23a4      	movs	r3, #164	; 0xa4
 8003308:	18fb      	adds	r3, r7, r3
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	2208      	movs	r2, #8
 800330e:	4013      	ands	r3, r2
 8003310:	d017      	beq.n	8003342 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003312:	23a0      	movs	r3, #160	; 0xa0
 8003314:	18fb      	adds	r3, r7, r3
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	2220      	movs	r2, #32
 800331a:	4013      	ands	r3, r2
 800331c:	d105      	bne.n	800332a <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800331e:	239c      	movs	r3, #156	; 0x9c
 8003320:	18fb      	adds	r3, r7, r3
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	2201      	movs	r2, #1
 8003326:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003328:	d00b      	beq.n	8003342 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	2208      	movs	r2, #8
 8003330:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2284      	movs	r2, #132	; 0x84
 8003336:	589b      	ldr	r3, [r3, r2]
 8003338:	2208      	movs	r2, #8
 800333a:	431a      	orrs	r2, r3
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2184      	movs	r1, #132	; 0x84
 8003340:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003342:	23a4      	movs	r3, #164	; 0xa4
 8003344:	18fb      	adds	r3, r7, r3
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	2380      	movs	r3, #128	; 0x80
 800334a:	011b      	lsls	r3, r3, #4
 800334c:	4013      	ands	r3, r2
 800334e:	d013      	beq.n	8003378 <HAL_UART_IRQHandler+0x198>
 8003350:	23a0      	movs	r3, #160	; 0xa0
 8003352:	18fb      	adds	r3, r7, r3
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	2380      	movs	r3, #128	; 0x80
 8003358:	04db      	lsls	r3, r3, #19
 800335a:	4013      	ands	r3, r2
 800335c:	d00c      	beq.n	8003378 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	2280      	movs	r2, #128	; 0x80
 8003364:	0112      	lsls	r2, r2, #4
 8003366:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2284      	movs	r2, #132	; 0x84
 800336c:	589b      	ldr	r3, [r3, r2]
 800336e:	2220      	movs	r2, #32
 8003370:	431a      	orrs	r2, r3
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2184      	movs	r1, #132	; 0x84
 8003376:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2284      	movs	r2, #132	; 0x84
 800337c:	589b      	ldr	r3, [r3, r2]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d100      	bne.n	8003384 <HAL_UART_IRQHandler+0x1a4>
 8003382:	e1ff      	b.n	8003784 <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003384:	23a4      	movs	r3, #164	; 0xa4
 8003386:	18fb      	adds	r3, r7, r3
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	2220      	movs	r2, #32
 800338c:	4013      	ands	r3, r2
 800338e:	d00e      	beq.n	80033ae <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003390:	23a0      	movs	r3, #160	; 0xa0
 8003392:	18fb      	adds	r3, r7, r3
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	2220      	movs	r2, #32
 8003398:	4013      	ands	r3, r2
 800339a:	d008      	beq.n	80033ae <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d004      	beq.n	80033ae <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033a8:	687a      	ldr	r2, [r7, #4]
 80033aa:	0010      	movs	r0, r2
 80033ac:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2284      	movs	r2, #132	; 0x84
 80033b2:	589b      	ldr	r3, [r3, r2]
 80033b4:	2194      	movs	r1, #148	; 0x94
 80033b6:	187a      	adds	r2, r7, r1
 80033b8:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	2240      	movs	r2, #64	; 0x40
 80033c2:	4013      	ands	r3, r2
 80033c4:	2b40      	cmp	r3, #64	; 0x40
 80033c6:	d004      	beq.n	80033d2 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80033c8:	187b      	adds	r3, r7, r1
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	2228      	movs	r2, #40	; 0x28
 80033ce:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80033d0:	d047      	beq.n	8003462 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	0018      	movs	r0, r3
 80033d6:	f000 fdbd 	bl	8003f54 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	2240      	movs	r2, #64	; 0x40
 80033e2:	4013      	ands	r3, r2
 80033e4:	2b40      	cmp	r3, #64	; 0x40
 80033e6:	d137      	bne.n	8003458 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033e8:	f3ef 8310 	mrs	r3, PRIMASK
 80033ec:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80033ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033f0:	2090      	movs	r0, #144	; 0x90
 80033f2:	183a      	adds	r2, r7, r0
 80033f4:	6013      	str	r3, [r2, #0]
 80033f6:	2301      	movs	r3, #1
 80033f8:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80033fc:	f383 8810 	msr	PRIMASK, r3
}
 8003400:	46c0      	nop			; (mov r8, r8)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	689a      	ldr	r2, [r3, #8]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	2140      	movs	r1, #64	; 0x40
 800340e:	438a      	bics	r2, r1
 8003410:	609a      	str	r2, [r3, #8]
 8003412:	183b      	adds	r3, r7, r0
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003418:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800341a:	f383 8810 	msr	PRIMASK, r3
}
 800341e:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003424:	2b00      	cmp	r3, #0
 8003426:	d012      	beq.n	800344e <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800342c:	4a14      	ldr	r2, [pc, #80]	; (8003480 <HAL_UART_IRQHandler+0x2a0>)
 800342e:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003434:	0018      	movs	r0, r3
 8003436:	f7fe fd42 	bl	8001ebe <HAL_DMA_Abort_IT>
 800343a:	1e03      	subs	r3, r0, #0
 800343c:	d01a      	beq.n	8003474 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003442:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003448:	0018      	movs	r0, r3
 800344a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800344c:	e012      	b.n	8003474 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	0018      	movs	r0, r3
 8003452:	f7fd fddd 	bl	8001010 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003456:	e00d      	b.n	8003474 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	0018      	movs	r0, r3
 800345c:	f7fd fdd8 	bl	8001010 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003460:	e008      	b.n	8003474 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	0018      	movs	r0, r3
 8003466:	f7fd fdd3 	bl	8001010 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2284      	movs	r2, #132	; 0x84
 800346e:	2100      	movs	r1, #0
 8003470:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8003472:	e187      	b.n	8003784 <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003474:	46c0      	nop			; (mov r8, r8)
    return;
 8003476:	e185      	b.n	8003784 <HAL_UART_IRQHandler+0x5a4>
 8003478:	0000080f 	.word	0x0000080f
 800347c:	04000120 	.word	0x04000120
 8003480:	0800420f 	.word	0x0800420f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003488:	2b01      	cmp	r3, #1
 800348a:	d000      	beq.n	800348e <HAL_UART_IRQHandler+0x2ae>
 800348c:	e139      	b.n	8003702 <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800348e:	23a4      	movs	r3, #164	; 0xa4
 8003490:	18fb      	adds	r3, r7, r3
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	2210      	movs	r2, #16
 8003496:	4013      	ands	r3, r2
 8003498:	d100      	bne.n	800349c <HAL_UART_IRQHandler+0x2bc>
 800349a:	e132      	b.n	8003702 <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800349c:	23a0      	movs	r3, #160	; 0xa0
 800349e:	18fb      	adds	r3, r7, r3
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	2210      	movs	r2, #16
 80034a4:	4013      	ands	r3, r2
 80034a6:	d100      	bne.n	80034aa <HAL_UART_IRQHandler+0x2ca>
 80034a8:	e12b      	b.n	8003702 <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	2210      	movs	r2, #16
 80034b0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	2240      	movs	r2, #64	; 0x40
 80034ba:	4013      	ands	r3, r2
 80034bc:	2b40      	cmp	r3, #64	; 0x40
 80034be:	d000      	beq.n	80034c2 <HAL_UART_IRQHandler+0x2e2>
 80034c0:	e09f      	b.n	8003602 <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	685a      	ldr	r2, [r3, #4]
 80034ca:	217e      	movs	r1, #126	; 0x7e
 80034cc:	187b      	adds	r3, r7, r1
 80034ce:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80034d0:	187b      	adds	r3, r7, r1
 80034d2:	881b      	ldrh	r3, [r3, #0]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d100      	bne.n	80034da <HAL_UART_IRQHandler+0x2fa>
 80034d8:	e156      	b.n	8003788 <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2258      	movs	r2, #88	; 0x58
 80034de:	5a9b      	ldrh	r3, [r3, r2]
 80034e0:	187a      	adds	r2, r7, r1
 80034e2:	8812      	ldrh	r2, [r2, #0]
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d300      	bcc.n	80034ea <HAL_UART_IRQHandler+0x30a>
 80034e8:	e14e      	b.n	8003788 <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	187a      	adds	r2, r7, r1
 80034ee:	215a      	movs	r1, #90	; 0x5a
 80034f0:	8812      	ldrh	r2, [r2, #0]
 80034f2:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034f8:	699b      	ldr	r3, [r3, #24]
 80034fa:	2b20      	cmp	r3, #32
 80034fc:	d06f      	beq.n	80035de <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034fe:	f3ef 8310 	mrs	r3, PRIMASK
 8003502:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003506:	67bb      	str	r3, [r7, #120]	; 0x78
 8003508:	2301      	movs	r3, #1
 800350a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800350c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800350e:	f383 8810 	msr	PRIMASK, r3
}
 8003512:	46c0      	nop			; (mov r8, r8)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	499e      	ldr	r1, [pc, #632]	; (8003798 <HAL_UART_IRQHandler+0x5b8>)
 8003520:	400a      	ands	r2, r1
 8003522:	601a      	str	r2, [r3, #0]
 8003524:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003526:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800352a:	f383 8810 	msr	PRIMASK, r3
}
 800352e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003530:	f3ef 8310 	mrs	r3, PRIMASK
 8003534:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8003536:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003538:	677b      	str	r3, [r7, #116]	; 0x74
 800353a:	2301      	movs	r3, #1
 800353c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800353e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003540:	f383 8810 	msr	PRIMASK, r3
}
 8003544:	46c0      	nop			; (mov r8, r8)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	689a      	ldr	r2, [r3, #8]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	2101      	movs	r1, #1
 8003552:	438a      	bics	r2, r1
 8003554:	609a      	str	r2, [r3, #8]
 8003556:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003558:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800355a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800355c:	f383 8810 	msr	PRIMASK, r3
}
 8003560:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003562:	f3ef 8310 	mrs	r3, PRIMASK
 8003566:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8003568:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800356a:	673b      	str	r3, [r7, #112]	; 0x70
 800356c:	2301      	movs	r3, #1
 800356e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003570:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003572:	f383 8810 	msr	PRIMASK, r3
}
 8003576:	46c0      	nop			; (mov r8, r8)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	689a      	ldr	r2, [r3, #8]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	2140      	movs	r1, #64	; 0x40
 8003584:	438a      	bics	r2, r1
 8003586:	609a      	str	r2, [r3, #8]
 8003588:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800358a:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800358c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800358e:	f383 8810 	msr	PRIMASK, r3
}
 8003592:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2280      	movs	r2, #128	; 0x80
 8003598:	2120      	movs	r1, #32
 800359a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2200      	movs	r2, #0
 80035a0:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035a2:	f3ef 8310 	mrs	r3, PRIMASK
 80035a6:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80035a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035aa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80035ac:	2301      	movs	r3, #1
 80035ae:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035b2:	f383 8810 	msr	PRIMASK, r3
}
 80035b6:	46c0      	nop			; (mov r8, r8)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	2110      	movs	r1, #16
 80035c4:	438a      	bics	r2, r1
 80035c6:	601a      	str	r2, [r3, #0]
 80035c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035ca:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035ce:	f383 8810 	msr	PRIMASK, r3
}
 80035d2:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035d8:	0018      	movs	r0, r3
 80035da:	f7fe fc38 	bl	8001e4e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2202      	movs	r2, #2
 80035e2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2258      	movs	r2, #88	; 0x58
 80035e8:	5a9a      	ldrh	r2, [r3, r2]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	215a      	movs	r1, #90	; 0x5a
 80035ee:	5a5b      	ldrh	r3, [r3, r1]
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	1ad3      	subs	r3, r2, r3
 80035f4:	b29a      	uxth	r2, r3
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	0011      	movs	r1, r2
 80035fa:	0018      	movs	r0, r3
 80035fc:	f7fd fd10 	bl	8001020 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003600:	e0c2      	b.n	8003788 <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2258      	movs	r2, #88	; 0x58
 8003606:	5a99      	ldrh	r1, [r3, r2]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	225a      	movs	r2, #90	; 0x5a
 800360c:	5a9b      	ldrh	r3, [r3, r2]
 800360e:	b29a      	uxth	r2, r3
 8003610:	208e      	movs	r0, #142	; 0x8e
 8003612:	183b      	adds	r3, r7, r0
 8003614:	1a8a      	subs	r2, r1, r2
 8003616:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	225a      	movs	r2, #90	; 0x5a
 800361c:	5a9b      	ldrh	r3, [r3, r2]
 800361e:	b29b      	uxth	r3, r3
 8003620:	2b00      	cmp	r3, #0
 8003622:	d100      	bne.n	8003626 <HAL_UART_IRQHandler+0x446>
 8003624:	e0b2      	b.n	800378c <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 8003626:	183b      	adds	r3, r7, r0
 8003628:	881b      	ldrh	r3, [r3, #0]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d100      	bne.n	8003630 <HAL_UART_IRQHandler+0x450>
 800362e:	e0ad      	b.n	800378c <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003630:	f3ef 8310 	mrs	r3, PRIMASK
 8003634:	60fb      	str	r3, [r7, #12]
  return(result);
 8003636:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003638:	2488      	movs	r4, #136	; 0x88
 800363a:	193a      	adds	r2, r7, r4
 800363c:	6013      	str	r3, [r2, #0]
 800363e:	2301      	movs	r3, #1
 8003640:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	f383 8810 	msr	PRIMASK, r3
}
 8003648:	46c0      	nop			; (mov r8, r8)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4951      	ldr	r1, [pc, #324]	; (800379c <HAL_UART_IRQHandler+0x5bc>)
 8003656:	400a      	ands	r2, r1
 8003658:	601a      	str	r2, [r3, #0]
 800365a:	193b      	adds	r3, r7, r4
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	f383 8810 	msr	PRIMASK, r3
}
 8003666:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003668:	f3ef 8310 	mrs	r3, PRIMASK
 800366c:	61bb      	str	r3, [r7, #24]
  return(result);
 800366e:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003670:	2484      	movs	r4, #132	; 0x84
 8003672:	193a      	adds	r2, r7, r4
 8003674:	6013      	str	r3, [r2, #0]
 8003676:	2301      	movs	r3, #1
 8003678:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800367a:	69fb      	ldr	r3, [r7, #28]
 800367c:	f383 8810 	msr	PRIMASK, r3
}
 8003680:	46c0      	nop			; (mov r8, r8)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	689a      	ldr	r2, [r3, #8]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	2101      	movs	r1, #1
 800368e:	438a      	bics	r2, r1
 8003690:	609a      	str	r2, [r3, #8]
 8003692:	193b      	adds	r3, r7, r4
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003698:	6a3b      	ldr	r3, [r7, #32]
 800369a:	f383 8810 	msr	PRIMASK, r3
}
 800369e:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2280      	movs	r2, #128	; 0x80
 80036a4:	2120      	movs	r1, #32
 80036a6:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036b4:	f3ef 8310 	mrs	r3, PRIMASK
 80036b8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80036ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036bc:	2480      	movs	r4, #128	; 0x80
 80036be:	193a      	adds	r2, r7, r4
 80036c0:	6013      	str	r3, [r2, #0]
 80036c2:	2301      	movs	r3, #1
 80036c4:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036c8:	f383 8810 	msr	PRIMASK, r3
}
 80036cc:	46c0      	nop			; (mov r8, r8)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	2110      	movs	r1, #16
 80036da:	438a      	bics	r2, r1
 80036dc:	601a      	str	r2, [r3, #0]
 80036de:	193b      	adds	r3, r7, r4
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036e6:	f383 8810 	msr	PRIMASK, r3
}
 80036ea:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2202      	movs	r2, #2
 80036f0:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80036f2:	183b      	adds	r3, r7, r0
 80036f4:	881a      	ldrh	r2, [r3, #0]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	0011      	movs	r1, r2
 80036fa:	0018      	movs	r0, r3
 80036fc:	f7fd fc90 	bl	8001020 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003700:	e044      	b.n	800378c <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003702:	23a4      	movs	r3, #164	; 0xa4
 8003704:	18fb      	adds	r3, r7, r3
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	2380      	movs	r3, #128	; 0x80
 800370a:	035b      	lsls	r3, r3, #13
 800370c:	4013      	ands	r3, r2
 800370e:	d010      	beq.n	8003732 <HAL_UART_IRQHandler+0x552>
 8003710:	239c      	movs	r3, #156	; 0x9c
 8003712:	18fb      	adds	r3, r7, r3
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	2380      	movs	r3, #128	; 0x80
 8003718:	03db      	lsls	r3, r3, #15
 800371a:	4013      	ands	r3, r2
 800371c:	d009      	beq.n	8003732 <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	2280      	movs	r2, #128	; 0x80
 8003724:	0352      	lsls	r2, r2, #13
 8003726:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	0018      	movs	r0, r3
 800372c:	f000 fdb1 	bl	8004292 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003730:	e02f      	b.n	8003792 <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003732:	23a4      	movs	r3, #164	; 0xa4
 8003734:	18fb      	adds	r3, r7, r3
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	2280      	movs	r2, #128	; 0x80
 800373a:	4013      	ands	r3, r2
 800373c:	d00f      	beq.n	800375e <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800373e:	23a0      	movs	r3, #160	; 0xa0
 8003740:	18fb      	adds	r3, r7, r3
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	2280      	movs	r2, #128	; 0x80
 8003746:	4013      	ands	r3, r2
 8003748:	d009      	beq.n	800375e <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800374e:	2b00      	cmp	r3, #0
 8003750:	d01e      	beq.n	8003790 <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	0010      	movs	r0, r2
 800375a:	4798      	blx	r3
    }
    return;
 800375c:	e018      	b.n	8003790 <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800375e:	23a4      	movs	r3, #164	; 0xa4
 8003760:	18fb      	adds	r3, r7, r3
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	2240      	movs	r2, #64	; 0x40
 8003766:	4013      	ands	r3, r2
 8003768:	d013      	beq.n	8003792 <HAL_UART_IRQHandler+0x5b2>
 800376a:	23a0      	movs	r3, #160	; 0xa0
 800376c:	18fb      	adds	r3, r7, r3
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	2240      	movs	r2, #64	; 0x40
 8003772:	4013      	ands	r3, r2
 8003774:	d00d      	beq.n	8003792 <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	0018      	movs	r0, r3
 800377a:	f000 fd5f 	bl	800423c <UART_EndTransmit_IT>
    return;
 800377e:	e008      	b.n	8003792 <HAL_UART_IRQHandler+0x5b2>
      return;
 8003780:	46c0      	nop			; (mov r8, r8)
 8003782:	e006      	b.n	8003792 <HAL_UART_IRQHandler+0x5b2>
    return;
 8003784:	46c0      	nop			; (mov r8, r8)
 8003786:	e004      	b.n	8003792 <HAL_UART_IRQHandler+0x5b2>
      return;
 8003788:	46c0      	nop			; (mov r8, r8)
 800378a:	e002      	b.n	8003792 <HAL_UART_IRQHandler+0x5b2>
      return;
 800378c:	46c0      	nop			; (mov r8, r8)
 800378e:	e000      	b.n	8003792 <HAL_UART_IRQHandler+0x5b2>
    return;
 8003790:	46c0      	nop			; (mov r8, r8)
  }

}
 8003792:	46bd      	mov	sp, r7
 8003794:	b02b      	add	sp, #172	; 0xac
 8003796:	bd90      	pop	{r4, r7, pc}
 8003798:	fffffeff 	.word	0xfffffeff
 800379c:	fffffedf 	.word	0xfffffedf

080037a0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b082      	sub	sp, #8
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80037a8:	46c0      	nop			; (mov r8, r8)
 80037aa:	46bd      	mov	sp, r7
 80037ac:	b002      	add	sp, #8
 80037ae:	bd80      	pop	{r7, pc}

080037b0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b082      	sub	sp, #8
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80037b8:	46c0      	nop			; (mov r8, r8)
 80037ba:	46bd      	mov	sp, r7
 80037bc:	b002      	add	sp, #8
 80037be:	bd80      	pop	{r7, pc}

080037c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b088      	sub	sp, #32
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80037c8:	231e      	movs	r3, #30
 80037ca:	18fb      	adds	r3, r7, r3
 80037cc:	2200      	movs	r2, #0
 80037ce:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	689a      	ldr	r2, [r3, #8]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	691b      	ldr	r3, [r3, #16]
 80037d8:	431a      	orrs	r2, r3
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	695b      	ldr	r3, [r3, #20]
 80037de:	431a      	orrs	r2, r3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	69db      	ldr	r3, [r3, #28]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a8d      	ldr	r2, [pc, #564]	; (8003a24 <UART_SetConfig+0x264>)
 80037f0:	4013      	ands	r3, r2
 80037f2:	0019      	movs	r1, r3
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	697a      	ldr	r2, [r7, #20]
 80037fa:	430a      	orrs	r2, r1
 80037fc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	4a88      	ldr	r2, [pc, #544]	; (8003a28 <UART_SetConfig+0x268>)
 8003806:	4013      	ands	r3, r2
 8003808:	0019      	movs	r1, r3
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	68da      	ldr	r2, [r3, #12]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	430a      	orrs	r2, r1
 8003814:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	699b      	ldr	r3, [r3, #24]
 800381a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6a1b      	ldr	r3, [r3, #32]
 8003820:	697a      	ldr	r2, [r7, #20]
 8003822:	4313      	orrs	r3, r2
 8003824:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	4a7f      	ldr	r2, [pc, #508]	; (8003a2c <UART_SetConfig+0x26c>)
 800382e:	4013      	ands	r3, r2
 8003830:	0019      	movs	r1, r3
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	697a      	ldr	r2, [r7, #20]
 8003838:	430a      	orrs	r2, r1
 800383a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a7b      	ldr	r2, [pc, #492]	; (8003a30 <UART_SetConfig+0x270>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d127      	bne.n	8003896 <UART_SetConfig+0xd6>
 8003846:	4b7b      	ldr	r3, [pc, #492]	; (8003a34 <UART_SetConfig+0x274>)
 8003848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800384a:	2203      	movs	r2, #3
 800384c:	4013      	ands	r3, r2
 800384e:	2b03      	cmp	r3, #3
 8003850:	d00d      	beq.n	800386e <UART_SetConfig+0xae>
 8003852:	d81b      	bhi.n	800388c <UART_SetConfig+0xcc>
 8003854:	2b02      	cmp	r3, #2
 8003856:	d014      	beq.n	8003882 <UART_SetConfig+0xc2>
 8003858:	d818      	bhi.n	800388c <UART_SetConfig+0xcc>
 800385a:	2b00      	cmp	r3, #0
 800385c:	d002      	beq.n	8003864 <UART_SetConfig+0xa4>
 800385e:	2b01      	cmp	r3, #1
 8003860:	d00a      	beq.n	8003878 <UART_SetConfig+0xb8>
 8003862:	e013      	b.n	800388c <UART_SetConfig+0xcc>
 8003864:	231f      	movs	r3, #31
 8003866:	18fb      	adds	r3, r7, r3
 8003868:	2200      	movs	r2, #0
 800386a:	701a      	strb	r2, [r3, #0]
 800386c:	e021      	b.n	80038b2 <UART_SetConfig+0xf2>
 800386e:	231f      	movs	r3, #31
 8003870:	18fb      	adds	r3, r7, r3
 8003872:	2202      	movs	r2, #2
 8003874:	701a      	strb	r2, [r3, #0]
 8003876:	e01c      	b.n	80038b2 <UART_SetConfig+0xf2>
 8003878:	231f      	movs	r3, #31
 800387a:	18fb      	adds	r3, r7, r3
 800387c:	2204      	movs	r2, #4
 800387e:	701a      	strb	r2, [r3, #0]
 8003880:	e017      	b.n	80038b2 <UART_SetConfig+0xf2>
 8003882:	231f      	movs	r3, #31
 8003884:	18fb      	adds	r3, r7, r3
 8003886:	2208      	movs	r2, #8
 8003888:	701a      	strb	r2, [r3, #0]
 800388a:	e012      	b.n	80038b2 <UART_SetConfig+0xf2>
 800388c:	231f      	movs	r3, #31
 800388e:	18fb      	adds	r3, r7, r3
 8003890:	2210      	movs	r2, #16
 8003892:	701a      	strb	r2, [r3, #0]
 8003894:	e00d      	b.n	80038b2 <UART_SetConfig+0xf2>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a67      	ldr	r2, [pc, #412]	; (8003a38 <UART_SetConfig+0x278>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d104      	bne.n	80038aa <UART_SetConfig+0xea>
 80038a0:	231f      	movs	r3, #31
 80038a2:	18fb      	adds	r3, r7, r3
 80038a4:	2200      	movs	r2, #0
 80038a6:	701a      	strb	r2, [r3, #0]
 80038a8:	e003      	b.n	80038b2 <UART_SetConfig+0xf2>
 80038aa:	231f      	movs	r3, #31
 80038ac:	18fb      	adds	r3, r7, r3
 80038ae:	2210      	movs	r2, #16
 80038b0:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	69da      	ldr	r2, [r3, #28]
 80038b6:	2380      	movs	r3, #128	; 0x80
 80038b8:	021b      	lsls	r3, r3, #8
 80038ba:	429a      	cmp	r2, r3
 80038bc:	d15c      	bne.n	8003978 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 80038be:	231f      	movs	r3, #31
 80038c0:	18fb      	adds	r3, r7, r3
 80038c2:	781b      	ldrb	r3, [r3, #0]
 80038c4:	2b08      	cmp	r3, #8
 80038c6:	d015      	beq.n	80038f4 <UART_SetConfig+0x134>
 80038c8:	dc18      	bgt.n	80038fc <UART_SetConfig+0x13c>
 80038ca:	2b04      	cmp	r3, #4
 80038cc:	d00d      	beq.n	80038ea <UART_SetConfig+0x12a>
 80038ce:	dc15      	bgt.n	80038fc <UART_SetConfig+0x13c>
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d002      	beq.n	80038da <UART_SetConfig+0x11a>
 80038d4:	2b02      	cmp	r3, #2
 80038d6:	d005      	beq.n	80038e4 <UART_SetConfig+0x124>
 80038d8:	e010      	b.n	80038fc <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038da:	f7ff fa5b 	bl	8002d94 <HAL_RCC_GetPCLK1Freq>
 80038de:	0003      	movs	r3, r0
 80038e0:	61bb      	str	r3, [r7, #24]
        break;
 80038e2:	e012      	b.n	800390a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038e4:	4b55      	ldr	r3, [pc, #340]	; (8003a3c <UART_SetConfig+0x27c>)
 80038e6:	61bb      	str	r3, [r7, #24]
        break;
 80038e8:	e00f      	b.n	800390a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038ea:	f7ff f9f3 	bl	8002cd4 <HAL_RCC_GetSysClockFreq>
 80038ee:	0003      	movs	r3, r0
 80038f0:	61bb      	str	r3, [r7, #24]
        break;
 80038f2:	e00a      	b.n	800390a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038f4:	2380      	movs	r3, #128	; 0x80
 80038f6:	021b      	lsls	r3, r3, #8
 80038f8:	61bb      	str	r3, [r7, #24]
        break;
 80038fa:	e006      	b.n	800390a <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 80038fc:	2300      	movs	r3, #0
 80038fe:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003900:	231e      	movs	r3, #30
 8003902:	18fb      	adds	r3, r7, r3
 8003904:	2201      	movs	r2, #1
 8003906:	701a      	strb	r2, [r3, #0]
        break;
 8003908:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800390a:	69bb      	ldr	r3, [r7, #24]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d100      	bne.n	8003912 <UART_SetConfig+0x152>
 8003910:	e07a      	b.n	8003a08 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003912:	69bb      	ldr	r3, [r7, #24]
 8003914:	005a      	lsls	r2, r3, #1
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	085b      	lsrs	r3, r3, #1
 800391c:	18d2      	adds	r2, r2, r3
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	0019      	movs	r1, r3
 8003924:	0010      	movs	r0, r2
 8003926:	f7fc fbf9 	bl	800011c <__udivsi3>
 800392a:	0003      	movs	r3, r0
 800392c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	2b0f      	cmp	r3, #15
 8003932:	d91c      	bls.n	800396e <UART_SetConfig+0x1ae>
 8003934:	693a      	ldr	r2, [r7, #16]
 8003936:	2380      	movs	r3, #128	; 0x80
 8003938:	025b      	lsls	r3, r3, #9
 800393a:	429a      	cmp	r2, r3
 800393c:	d217      	bcs.n	800396e <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	b29a      	uxth	r2, r3
 8003942:	200e      	movs	r0, #14
 8003944:	183b      	adds	r3, r7, r0
 8003946:	210f      	movs	r1, #15
 8003948:	438a      	bics	r2, r1
 800394a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	085b      	lsrs	r3, r3, #1
 8003950:	b29b      	uxth	r3, r3
 8003952:	2207      	movs	r2, #7
 8003954:	4013      	ands	r3, r2
 8003956:	b299      	uxth	r1, r3
 8003958:	183b      	adds	r3, r7, r0
 800395a:	183a      	adds	r2, r7, r0
 800395c:	8812      	ldrh	r2, [r2, #0]
 800395e:	430a      	orrs	r2, r1
 8003960:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	183a      	adds	r2, r7, r0
 8003968:	8812      	ldrh	r2, [r2, #0]
 800396a:	60da      	str	r2, [r3, #12]
 800396c:	e04c      	b.n	8003a08 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 800396e:	231e      	movs	r3, #30
 8003970:	18fb      	adds	r3, r7, r3
 8003972:	2201      	movs	r2, #1
 8003974:	701a      	strb	r2, [r3, #0]
 8003976:	e047      	b.n	8003a08 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003978:	231f      	movs	r3, #31
 800397a:	18fb      	adds	r3, r7, r3
 800397c:	781b      	ldrb	r3, [r3, #0]
 800397e:	2b08      	cmp	r3, #8
 8003980:	d015      	beq.n	80039ae <UART_SetConfig+0x1ee>
 8003982:	dc18      	bgt.n	80039b6 <UART_SetConfig+0x1f6>
 8003984:	2b04      	cmp	r3, #4
 8003986:	d00d      	beq.n	80039a4 <UART_SetConfig+0x1e4>
 8003988:	dc15      	bgt.n	80039b6 <UART_SetConfig+0x1f6>
 800398a:	2b00      	cmp	r3, #0
 800398c:	d002      	beq.n	8003994 <UART_SetConfig+0x1d4>
 800398e:	2b02      	cmp	r3, #2
 8003990:	d005      	beq.n	800399e <UART_SetConfig+0x1de>
 8003992:	e010      	b.n	80039b6 <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003994:	f7ff f9fe 	bl	8002d94 <HAL_RCC_GetPCLK1Freq>
 8003998:	0003      	movs	r3, r0
 800399a:	61bb      	str	r3, [r7, #24]
        break;
 800399c:	e012      	b.n	80039c4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800399e:	4b27      	ldr	r3, [pc, #156]	; (8003a3c <UART_SetConfig+0x27c>)
 80039a0:	61bb      	str	r3, [r7, #24]
        break;
 80039a2:	e00f      	b.n	80039c4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039a4:	f7ff f996 	bl	8002cd4 <HAL_RCC_GetSysClockFreq>
 80039a8:	0003      	movs	r3, r0
 80039aa:	61bb      	str	r3, [r7, #24]
        break;
 80039ac:	e00a      	b.n	80039c4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039ae:	2380      	movs	r3, #128	; 0x80
 80039b0:	021b      	lsls	r3, r3, #8
 80039b2:	61bb      	str	r3, [r7, #24]
        break;
 80039b4:	e006      	b.n	80039c4 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80039b6:	2300      	movs	r3, #0
 80039b8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80039ba:	231e      	movs	r3, #30
 80039bc:	18fb      	adds	r3, r7, r3
 80039be:	2201      	movs	r2, #1
 80039c0:	701a      	strb	r2, [r3, #0]
        break;
 80039c2:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80039c4:	69bb      	ldr	r3, [r7, #24]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d01e      	beq.n	8003a08 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	085a      	lsrs	r2, r3, #1
 80039d0:	69bb      	ldr	r3, [r7, #24]
 80039d2:	18d2      	adds	r2, r2, r3
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	0019      	movs	r1, r3
 80039da:	0010      	movs	r0, r2
 80039dc:	f7fc fb9e 	bl	800011c <__udivsi3>
 80039e0:	0003      	movs	r3, r0
 80039e2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	2b0f      	cmp	r3, #15
 80039e8:	d90a      	bls.n	8003a00 <UART_SetConfig+0x240>
 80039ea:	693a      	ldr	r2, [r7, #16]
 80039ec:	2380      	movs	r3, #128	; 0x80
 80039ee:	025b      	lsls	r3, r3, #9
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d205      	bcs.n	8003a00 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	b29a      	uxth	r2, r3
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	60da      	str	r2, [r3, #12]
 80039fe:	e003      	b.n	8003a08 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8003a00:	231e      	movs	r3, #30
 8003a02:	18fb      	adds	r3, r7, r3
 8003a04:	2201      	movs	r2, #1
 8003a06:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2200      	movs	r2, #0
 8003a12:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003a14:	231e      	movs	r3, #30
 8003a16:	18fb      	adds	r3, r7, r3
 8003a18:	781b      	ldrb	r3, [r3, #0]
}
 8003a1a:	0018      	movs	r0, r3
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	b008      	add	sp, #32
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	46c0      	nop			; (mov r8, r8)
 8003a24:	ffff69f3 	.word	0xffff69f3
 8003a28:	ffffcfff 	.word	0xffffcfff
 8003a2c:	fffff4ff 	.word	0xfffff4ff
 8003a30:	40013800 	.word	0x40013800
 8003a34:	40021000 	.word	0x40021000
 8003a38:	40004400 	.word	0x40004400
 8003a3c:	007a1200 	.word	0x007a1200

08003a40 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b082      	sub	sp, #8
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	4013      	ands	r3, r2
 8003a50:	d00b      	beq.n	8003a6a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	4a4a      	ldr	r2, [pc, #296]	; (8003b84 <UART_AdvFeatureConfig+0x144>)
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	0019      	movs	r1, r3
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	430a      	orrs	r2, r1
 8003a68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6e:	2202      	movs	r2, #2
 8003a70:	4013      	ands	r3, r2
 8003a72:	d00b      	beq.n	8003a8c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	4a43      	ldr	r2, [pc, #268]	; (8003b88 <UART_AdvFeatureConfig+0x148>)
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	0019      	movs	r1, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	430a      	orrs	r2, r1
 8003a8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a90:	2204      	movs	r2, #4
 8003a92:	4013      	ands	r3, r2
 8003a94:	d00b      	beq.n	8003aae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	4a3b      	ldr	r2, [pc, #236]	; (8003b8c <UART_AdvFeatureConfig+0x14c>)
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	0019      	movs	r1, r3
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	430a      	orrs	r2, r1
 8003aac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab2:	2208      	movs	r2, #8
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	d00b      	beq.n	8003ad0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	4a34      	ldr	r2, [pc, #208]	; (8003b90 <UART_AdvFeatureConfig+0x150>)
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	0019      	movs	r1, r3
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	430a      	orrs	r2, r1
 8003ace:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad4:	2210      	movs	r2, #16
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	d00b      	beq.n	8003af2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	4a2c      	ldr	r2, [pc, #176]	; (8003b94 <UART_AdvFeatureConfig+0x154>)
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	0019      	movs	r1, r3
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	430a      	orrs	r2, r1
 8003af0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af6:	2220      	movs	r2, #32
 8003af8:	4013      	ands	r3, r2
 8003afa:	d00b      	beq.n	8003b14 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	4a25      	ldr	r2, [pc, #148]	; (8003b98 <UART_AdvFeatureConfig+0x158>)
 8003b04:	4013      	ands	r3, r2
 8003b06:	0019      	movs	r1, r3
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	430a      	orrs	r2, r1
 8003b12:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b18:	2240      	movs	r2, #64	; 0x40
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	d01d      	beq.n	8003b5a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	4a1d      	ldr	r2, [pc, #116]	; (8003b9c <UART_AdvFeatureConfig+0x15c>)
 8003b26:	4013      	ands	r3, r2
 8003b28:	0019      	movs	r1, r3
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	430a      	orrs	r2, r1
 8003b34:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b3a:	2380      	movs	r3, #128	; 0x80
 8003b3c:	035b      	lsls	r3, r3, #13
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d10b      	bne.n	8003b5a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	4a15      	ldr	r2, [pc, #84]	; (8003ba0 <UART_AdvFeatureConfig+0x160>)
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	0019      	movs	r1, r3
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	430a      	orrs	r2, r1
 8003b58:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b5e:	2280      	movs	r2, #128	; 0x80
 8003b60:	4013      	ands	r3, r2
 8003b62:	d00b      	beq.n	8003b7c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	4a0e      	ldr	r2, [pc, #56]	; (8003ba4 <UART_AdvFeatureConfig+0x164>)
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	0019      	movs	r1, r3
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	430a      	orrs	r2, r1
 8003b7a:	605a      	str	r2, [r3, #4]
  }
}
 8003b7c:	46c0      	nop			; (mov r8, r8)
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	b002      	add	sp, #8
 8003b82:	bd80      	pop	{r7, pc}
 8003b84:	fffdffff 	.word	0xfffdffff
 8003b88:	fffeffff 	.word	0xfffeffff
 8003b8c:	fffbffff 	.word	0xfffbffff
 8003b90:	ffff7fff 	.word	0xffff7fff
 8003b94:	ffffefff 	.word	0xffffefff
 8003b98:	ffffdfff 	.word	0xffffdfff
 8003b9c:	ffefffff 	.word	0xffefffff
 8003ba0:	ff9fffff 	.word	0xff9fffff
 8003ba4:	fff7ffff 	.word	0xfff7ffff

08003ba8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b092      	sub	sp, #72	; 0x48
 8003bac:	af02      	add	r7, sp, #8
 8003bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2284      	movs	r2, #132	; 0x84
 8003bb4:	2100      	movs	r1, #0
 8003bb6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003bb8:	f7fd ff38 	bl	8001a2c <HAL_GetTick>
 8003bbc:	0003      	movs	r3, r0
 8003bbe:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	2208      	movs	r2, #8
 8003bc8:	4013      	ands	r3, r2
 8003bca:	2b08      	cmp	r3, #8
 8003bcc:	d12c      	bne.n	8003c28 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003bce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bd0:	2280      	movs	r2, #128	; 0x80
 8003bd2:	0391      	lsls	r1, r2, #14
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	4a46      	ldr	r2, [pc, #280]	; (8003cf0 <UART_CheckIdleState+0x148>)
 8003bd8:	9200      	str	r2, [sp, #0]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f000 f88c 	bl	8003cf8 <UART_WaitOnFlagUntilTimeout>
 8003be0:	1e03      	subs	r3, r0, #0
 8003be2:	d021      	beq.n	8003c28 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003be4:	f3ef 8310 	mrs	r3, PRIMASK
 8003be8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003bec:	63bb      	str	r3, [r7, #56]	; 0x38
 8003bee:	2301      	movs	r3, #1
 8003bf0:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bf4:	f383 8810 	msr	PRIMASK, r3
}
 8003bf8:	46c0      	nop			; (mov r8, r8)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	2180      	movs	r1, #128	; 0x80
 8003c06:	438a      	bics	r2, r1
 8003c08:	601a      	str	r2, [r3, #0]
 8003c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c10:	f383 8810 	msr	PRIMASK, r3
}
 8003c14:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2220      	movs	r2, #32
 8003c1a:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2278      	movs	r2, #120	; 0x78
 8003c20:	2100      	movs	r1, #0
 8003c22:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c24:	2303      	movs	r3, #3
 8003c26:	e05f      	b.n	8003ce8 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	2204      	movs	r2, #4
 8003c30:	4013      	ands	r3, r2
 8003c32:	2b04      	cmp	r3, #4
 8003c34:	d146      	bne.n	8003cc4 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c38:	2280      	movs	r2, #128	; 0x80
 8003c3a:	03d1      	lsls	r1, r2, #15
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	4a2c      	ldr	r2, [pc, #176]	; (8003cf0 <UART_CheckIdleState+0x148>)
 8003c40:	9200      	str	r2, [sp, #0]
 8003c42:	2200      	movs	r2, #0
 8003c44:	f000 f858 	bl	8003cf8 <UART_WaitOnFlagUntilTimeout>
 8003c48:	1e03      	subs	r3, r0, #0
 8003c4a:	d03b      	beq.n	8003cc4 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c4c:	f3ef 8310 	mrs	r3, PRIMASK
 8003c50:	60fb      	str	r3, [r7, #12]
  return(result);
 8003c52:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c54:	637b      	str	r3, [r7, #52]	; 0x34
 8003c56:	2301      	movs	r3, #1
 8003c58:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	f383 8810 	msr	PRIMASK, r3
}
 8003c60:	46c0      	nop			; (mov r8, r8)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4921      	ldr	r1, [pc, #132]	; (8003cf4 <UART_CheckIdleState+0x14c>)
 8003c6e:	400a      	ands	r2, r1
 8003c70:	601a      	str	r2, [r3, #0]
 8003c72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c74:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	f383 8810 	msr	PRIMASK, r3
}
 8003c7c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c7e:	f3ef 8310 	mrs	r3, PRIMASK
 8003c82:	61bb      	str	r3, [r7, #24]
  return(result);
 8003c84:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c86:	633b      	str	r3, [r7, #48]	; 0x30
 8003c88:	2301      	movs	r3, #1
 8003c8a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c8c:	69fb      	ldr	r3, [r7, #28]
 8003c8e:	f383 8810 	msr	PRIMASK, r3
}
 8003c92:	46c0      	nop			; (mov r8, r8)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	689a      	ldr	r2, [r3, #8]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	2101      	movs	r1, #1
 8003ca0:	438a      	bics	r2, r1
 8003ca2:	609a      	str	r2, [r3, #8]
 8003ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ca6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ca8:	6a3b      	ldr	r3, [r7, #32]
 8003caa:	f383 8810 	msr	PRIMASK, r3
}
 8003cae:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2280      	movs	r2, #128	; 0x80
 8003cb4:	2120      	movs	r1, #32
 8003cb6:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2278      	movs	r2, #120	; 0x78
 8003cbc:	2100      	movs	r1, #0
 8003cbe:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003cc0:	2303      	movs	r3, #3
 8003cc2:	e011      	b.n	8003ce8 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2220      	movs	r2, #32
 8003cc8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2280      	movs	r2, #128	; 0x80
 8003cce:	2120      	movs	r1, #32
 8003cd0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2278      	movs	r2, #120	; 0x78
 8003ce2:	2100      	movs	r1, #0
 8003ce4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ce6:	2300      	movs	r3, #0
}
 8003ce8:	0018      	movs	r0, r3
 8003cea:	46bd      	mov	sp, r7
 8003cec:	b010      	add	sp, #64	; 0x40
 8003cee:	bd80      	pop	{r7, pc}
 8003cf0:	01ffffff 	.word	0x01ffffff
 8003cf4:	fffffedf 	.word	0xfffffedf

08003cf8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b084      	sub	sp, #16
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	60f8      	str	r0, [r7, #12]
 8003d00:	60b9      	str	r1, [r7, #8]
 8003d02:	603b      	str	r3, [r7, #0]
 8003d04:	1dfb      	adds	r3, r7, #7
 8003d06:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d08:	e04b      	b.n	8003da2 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d0a:	69bb      	ldr	r3, [r7, #24]
 8003d0c:	3301      	adds	r3, #1
 8003d0e:	d048      	beq.n	8003da2 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d10:	f7fd fe8c 	bl	8001a2c <HAL_GetTick>
 8003d14:	0002      	movs	r2, r0
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	69ba      	ldr	r2, [r7, #24]
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d302      	bcc.n	8003d26 <UART_WaitOnFlagUntilTimeout+0x2e>
 8003d20:	69bb      	ldr	r3, [r7, #24]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d101      	bne.n	8003d2a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003d26:	2303      	movs	r3, #3
 8003d28:	e04b      	b.n	8003dc2 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	2204      	movs	r2, #4
 8003d32:	4013      	ands	r3, r2
 8003d34:	d035      	beq.n	8003da2 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	69db      	ldr	r3, [r3, #28]
 8003d3c:	2208      	movs	r2, #8
 8003d3e:	4013      	ands	r3, r2
 8003d40:	2b08      	cmp	r3, #8
 8003d42:	d111      	bne.n	8003d68 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	2208      	movs	r2, #8
 8003d4a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	0018      	movs	r0, r3
 8003d50:	f000 f900 	bl	8003f54 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2284      	movs	r2, #132	; 0x84
 8003d58:	2108      	movs	r1, #8
 8003d5a:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2278      	movs	r2, #120	; 0x78
 8003d60:	2100      	movs	r1, #0
 8003d62:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	e02c      	b.n	8003dc2 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	69da      	ldr	r2, [r3, #28]
 8003d6e:	2380      	movs	r3, #128	; 0x80
 8003d70:	011b      	lsls	r3, r3, #4
 8003d72:	401a      	ands	r2, r3
 8003d74:	2380      	movs	r3, #128	; 0x80
 8003d76:	011b      	lsls	r3, r3, #4
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d112      	bne.n	8003da2 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	2280      	movs	r2, #128	; 0x80
 8003d82:	0112      	lsls	r2, r2, #4
 8003d84:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	0018      	movs	r0, r3
 8003d8a:	f000 f8e3 	bl	8003f54 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2284      	movs	r2, #132	; 0x84
 8003d92:	2120      	movs	r1, #32
 8003d94:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2278      	movs	r2, #120	; 0x78
 8003d9a:	2100      	movs	r1, #0
 8003d9c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003d9e:	2303      	movs	r3, #3
 8003da0:	e00f      	b.n	8003dc2 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	69db      	ldr	r3, [r3, #28]
 8003da8:	68ba      	ldr	r2, [r7, #8]
 8003daa:	4013      	ands	r3, r2
 8003dac:	68ba      	ldr	r2, [r7, #8]
 8003dae:	1ad3      	subs	r3, r2, r3
 8003db0:	425a      	negs	r2, r3
 8003db2:	4153      	adcs	r3, r2
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	001a      	movs	r2, r3
 8003db8:	1dfb      	adds	r3, r7, #7
 8003dba:	781b      	ldrb	r3, [r3, #0]
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d0a4      	beq.n	8003d0a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003dc0:	2300      	movs	r3, #0
}
 8003dc2:	0018      	movs	r0, r3
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	b004      	add	sp, #16
 8003dc8:	bd80      	pop	{r7, pc}
	...

08003dcc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b090      	sub	sp, #64	; 0x40
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	60f8      	str	r0, [r7, #12]
 8003dd4:	60b9      	str	r1, [r7, #8]
 8003dd6:	1dbb      	adds	r3, r7, #6
 8003dd8:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	68ba      	ldr	r2, [r7, #8]
 8003dde:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	1dba      	adds	r2, r7, #6
 8003de4:	2158      	movs	r1, #88	; 0x58
 8003de6:	8812      	ldrh	r2, [r2, #0]
 8003de8:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2284      	movs	r2, #132	; 0x84
 8003dee:	2100      	movs	r1, #0
 8003df0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2280      	movs	r2, #128	; 0x80
 8003df6:	2122      	movs	r1, #34	; 0x22
 8003df8:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d028      	beq.n	8003e54 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e06:	4a3e      	ldr	r2, [pc, #248]	; (8003f00 <UART_Start_Receive_DMA+0x134>)
 8003e08:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e0e:	4a3d      	ldr	r2, [pc, #244]	; (8003f04 <UART_Start_Receive_DMA+0x138>)
 8003e10:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e16:	4a3c      	ldr	r2, [pc, #240]	; (8003f08 <UART_Start_Receive_DMA+0x13c>)
 8003e18:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e1e:	2200      	movs	r2, #0
 8003e20:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	3324      	adds	r3, #36	; 0x24
 8003e2c:	0019      	movs	r1, r3
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e32:	001a      	movs	r2, r3
 8003e34:	1dbb      	adds	r3, r7, #6
 8003e36:	881b      	ldrh	r3, [r3, #0]
 8003e38:	f7fd ffa3 	bl	8001d82 <HAL_DMA_Start_IT>
 8003e3c:	1e03      	subs	r3, r0, #0
 8003e3e:	d009      	beq.n	8003e54 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2284      	movs	r2, #132	; 0x84
 8003e44:	2110      	movs	r1, #16
 8003e46:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2280      	movs	r2, #128	; 0x80
 8003e4c:	2120      	movs	r1, #32
 8003e4e:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	e050      	b.n	8003ef6 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	691b      	ldr	r3, [r3, #16]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d019      	beq.n	8003e90 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e5c:	f3ef 8310 	mrs	r3, PRIMASK
 8003e60:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e64:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e66:	2301      	movs	r3, #1
 8003e68:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e6c:	f383 8810 	msr	PRIMASK, r3
}
 8003e70:	46c0      	nop			; (mov r8, r8)
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	2180      	movs	r1, #128	; 0x80
 8003e7e:	0049      	lsls	r1, r1, #1
 8003e80:	430a      	orrs	r2, r1
 8003e82:	601a      	str	r2, [r3, #0]
 8003e84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e86:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e8a:	f383 8810 	msr	PRIMASK, r3
}
 8003e8e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e90:	f3ef 8310 	mrs	r3, PRIMASK
 8003e94:	613b      	str	r3, [r7, #16]
  return(result);
 8003e96:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e98:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	f383 8810 	msr	PRIMASK, r3
}
 8003ea4:	46c0      	nop			; (mov r8, r8)
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	689a      	ldr	r2, [r3, #8]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	2101      	movs	r1, #1
 8003eb2:	430a      	orrs	r2, r1
 8003eb4:	609a      	str	r2, [r3, #8]
 8003eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eb8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003eba:	69bb      	ldr	r3, [r7, #24]
 8003ebc:	f383 8810 	msr	PRIMASK, r3
}
 8003ec0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ec2:	f3ef 8310 	mrs	r3, PRIMASK
 8003ec6:	61fb      	str	r3, [r7, #28]
  return(result);
 8003ec8:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003eca:	637b      	str	r3, [r7, #52]	; 0x34
 8003ecc:	2301      	movs	r3, #1
 8003ece:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ed0:	6a3b      	ldr	r3, [r7, #32]
 8003ed2:	f383 8810 	msr	PRIMASK, r3
}
 8003ed6:	46c0      	nop			; (mov r8, r8)
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	689a      	ldr	r2, [r3, #8]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	2140      	movs	r1, #64	; 0x40
 8003ee4:	430a      	orrs	r2, r1
 8003ee6:	609a      	str	r2, [r3, #8]
 8003ee8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003eea:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eee:	f383 8810 	msr	PRIMASK, r3
}
 8003ef2:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 8003ef4:	2300      	movs	r3, #0
}
 8003ef6:	0018      	movs	r0, r3
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	b010      	add	sp, #64	; 0x40
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	46c0      	nop			; (mov r8, r8)
 8003f00:	0800401d 	.word	0x0800401d
 8003f04:	08004149 	.word	0x08004149
 8003f08:	0800418b 	.word	0x0800418b

08003f0c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b086      	sub	sp, #24
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f14:	f3ef 8310 	mrs	r3, PRIMASK
 8003f18:	60bb      	str	r3, [r7, #8]
  return(result);
 8003f1a:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003f1c:	617b      	str	r3, [r7, #20]
 8003f1e:	2301      	movs	r3, #1
 8003f20:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	f383 8810 	msr	PRIMASK, r3
}
 8003f28:	46c0      	nop			; (mov r8, r8)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	21c0      	movs	r1, #192	; 0xc0
 8003f36:	438a      	bics	r2, r1
 8003f38:	601a      	str	r2, [r3, #0]
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	f383 8810 	msr	PRIMASK, r3
}
 8003f44:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2220      	movs	r2, #32
 8003f4a:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8003f4c:	46c0      	nop			; (mov r8, r8)
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	b006      	add	sp, #24
 8003f52:	bd80      	pop	{r7, pc}

08003f54 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b08e      	sub	sp, #56	; 0x38
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f5c:	f3ef 8310 	mrs	r3, PRIMASK
 8003f60:	617b      	str	r3, [r7, #20]
  return(result);
 8003f62:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f64:	637b      	str	r3, [r7, #52]	; 0x34
 8003f66:	2301      	movs	r3, #1
 8003f68:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f6a:	69bb      	ldr	r3, [r7, #24]
 8003f6c:	f383 8810 	msr	PRIMASK, r3
}
 8003f70:	46c0      	nop			; (mov r8, r8)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4926      	ldr	r1, [pc, #152]	; (8004018 <UART_EndRxTransfer+0xc4>)
 8003f7e:	400a      	ands	r2, r1
 8003f80:	601a      	str	r2, [r3, #0]
 8003f82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f84:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f86:	69fb      	ldr	r3, [r7, #28]
 8003f88:	f383 8810 	msr	PRIMASK, r3
}
 8003f8c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f8e:	f3ef 8310 	mrs	r3, PRIMASK
 8003f92:	623b      	str	r3, [r7, #32]
  return(result);
 8003f94:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f96:	633b      	str	r3, [r7, #48]	; 0x30
 8003f98:	2301      	movs	r3, #1
 8003f9a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9e:	f383 8810 	msr	PRIMASK, r3
}
 8003fa2:	46c0      	nop			; (mov r8, r8)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	689a      	ldr	r2, [r3, #8]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	2101      	movs	r1, #1
 8003fb0:	438a      	bics	r2, r1
 8003fb2:	609a      	str	r2, [r3, #8]
 8003fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fb6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fba:	f383 8810 	msr	PRIMASK, r3
}
 8003fbe:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d118      	bne.n	8003ffa <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fc8:	f3ef 8310 	mrs	r3, PRIMASK
 8003fcc:	60bb      	str	r3, [r7, #8]
  return(result);
 8003fce:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	f383 8810 	msr	PRIMASK, r3
}
 8003fdc:	46c0      	nop			; (mov r8, r8)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	2110      	movs	r1, #16
 8003fea:	438a      	bics	r2, r1
 8003fec:	601a      	str	r2, [r3, #0]
 8003fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ff0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	f383 8810 	msr	PRIMASK, r3
}
 8003ff8:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2280      	movs	r2, #128	; 0x80
 8003ffe:	2120      	movs	r1, #32
 8004000:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2200      	movs	r2, #0
 8004006:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2200      	movs	r2, #0
 800400c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800400e:	46c0      	nop			; (mov r8, r8)
 8004010:	46bd      	mov	sp, r7
 8004012:	b00e      	add	sp, #56	; 0x38
 8004014:	bd80      	pop	{r7, pc}
 8004016:	46c0      	nop			; (mov r8, r8)
 8004018:	fffffedf 	.word	0xfffffedf

0800401c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b094      	sub	sp, #80	; 0x50
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004028:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	699b      	ldr	r3, [r3, #24]
 800402e:	2b20      	cmp	r3, #32
 8004030:	d06f      	beq.n	8004112 <UART_DMAReceiveCplt+0xf6>
  {
    huart->RxXferCount = 0U;
 8004032:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004034:	225a      	movs	r2, #90	; 0x5a
 8004036:	2100      	movs	r1, #0
 8004038:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800403a:	f3ef 8310 	mrs	r3, PRIMASK
 800403e:	61bb      	str	r3, [r7, #24]
  return(result);
 8004040:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004042:	64bb      	str	r3, [r7, #72]	; 0x48
 8004044:	2301      	movs	r3, #1
 8004046:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004048:	69fb      	ldr	r3, [r7, #28]
 800404a:	f383 8810 	msr	PRIMASK, r3
}
 800404e:	46c0      	nop			; (mov r8, r8)
 8004050:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	493a      	ldr	r1, [pc, #232]	; (8004144 <UART_DMAReceiveCplt+0x128>)
 800405c:	400a      	ands	r2, r1
 800405e:	601a      	str	r2, [r3, #0]
 8004060:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004062:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004064:	6a3b      	ldr	r3, [r7, #32]
 8004066:	f383 8810 	msr	PRIMASK, r3
}
 800406a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800406c:	f3ef 8310 	mrs	r3, PRIMASK
 8004070:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004074:	647b      	str	r3, [r7, #68]	; 0x44
 8004076:	2301      	movs	r3, #1
 8004078:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800407a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800407c:	f383 8810 	msr	PRIMASK, r3
}
 8004080:	46c0      	nop			; (mov r8, r8)
 8004082:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	689a      	ldr	r2, [r3, #8]
 8004088:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	2101      	movs	r1, #1
 800408e:	438a      	bics	r2, r1
 8004090:	609a      	str	r2, [r3, #8]
 8004092:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004094:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004098:	f383 8810 	msr	PRIMASK, r3
}
 800409c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800409e:	f3ef 8310 	mrs	r3, PRIMASK
 80040a2:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80040a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040a6:	643b      	str	r3, [r7, #64]	; 0x40
 80040a8:	2301      	movs	r3, #1
 80040aa:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040ae:	f383 8810 	msr	PRIMASK, r3
}
 80040b2:	46c0      	nop			; (mov r8, r8)
 80040b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	689a      	ldr	r2, [r3, #8]
 80040ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	2140      	movs	r1, #64	; 0x40
 80040c0:	438a      	bics	r2, r1
 80040c2:	609a      	str	r2, [r3, #8]
 80040c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040c6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040ca:	f383 8810 	msr	PRIMASK, r3
}
 80040ce:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80040d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040d2:	2280      	movs	r2, #128	; 0x80
 80040d4:	2120      	movs	r1, #32
 80040d6:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d118      	bne.n	8004112 <UART_DMAReceiveCplt+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040e0:	f3ef 8310 	mrs	r3, PRIMASK
 80040e4:	60fb      	str	r3, [r7, #12]
  return(result);
 80040e6:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040ea:	2301      	movs	r3, #1
 80040ec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	f383 8810 	msr	PRIMASK, r3
}
 80040f4:	46c0      	nop			; (mov r8, r8)
 80040f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	2110      	movs	r1, #16
 8004102:	438a      	bics	r2, r1
 8004104:	601a      	str	r2, [r3, #0]
 8004106:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004108:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	f383 8810 	msr	PRIMASK, r3
}
 8004110:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004112:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004114:	2200      	movs	r2, #0
 8004116:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004118:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800411a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800411c:	2b01      	cmp	r3, #1
 800411e:	d108      	bne.n	8004132 <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004120:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004122:	2258      	movs	r2, #88	; 0x58
 8004124:	5a9a      	ldrh	r2, [r3, r2]
 8004126:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004128:	0011      	movs	r1, r2
 800412a:	0018      	movs	r0, r3
 800412c:	f7fc ff78 	bl	8001020 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004130:	e003      	b.n	800413a <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8004132:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004134:	0018      	movs	r0, r3
 8004136:	f7fd f82d 	bl	8001194 <HAL_UART_RxCpltCallback>
}
 800413a:	46c0      	nop			; (mov r8, r8)
 800413c:	46bd      	mov	sp, r7
 800413e:	b014      	add	sp, #80	; 0x50
 8004140:	bd80      	pop	{r7, pc}
 8004142:	46c0      	nop			; (mov r8, r8)
 8004144:	fffffeff 	.word	0xfffffeff

08004148 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b084      	sub	sp, #16
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004154:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2201      	movs	r2, #1
 800415a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004160:	2b01      	cmp	r3, #1
 8004162:	d10a      	bne.n	800417a <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2258      	movs	r2, #88	; 0x58
 8004168:	5a9b      	ldrh	r3, [r3, r2]
 800416a:	085b      	lsrs	r3, r3, #1
 800416c:	b29a      	uxth	r2, r3
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	0011      	movs	r1, r2
 8004172:	0018      	movs	r0, r3
 8004174:	f7fc ff54 	bl	8001020 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004178:	e003      	b.n	8004182 <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	0018      	movs	r0, r3
 800417e:	f7ff fb17 	bl	80037b0 <HAL_UART_RxHalfCpltCallback>
}
 8004182:	46c0      	nop			; (mov r8, r8)
 8004184:	46bd      	mov	sp, r7
 8004186:	b004      	add	sp, #16
 8004188:	bd80      	pop	{r7, pc}

0800418a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800418a:	b580      	push	{r7, lr}
 800418c:	b086      	sub	sp, #24
 800418e:	af00      	add	r7, sp, #0
 8004190:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004196:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800419c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	2280      	movs	r2, #128	; 0x80
 80041a2:	589b      	ldr	r3, [r3, r2]
 80041a4:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	2280      	movs	r2, #128	; 0x80
 80041ae:	4013      	ands	r3, r2
 80041b0:	2b80      	cmp	r3, #128	; 0x80
 80041b2:	d10a      	bne.n	80041ca <UART_DMAError+0x40>
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	2b21      	cmp	r3, #33	; 0x21
 80041b8:	d107      	bne.n	80041ca <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	2252      	movs	r2, #82	; 0x52
 80041be:	2100      	movs	r1, #0
 80041c0:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	0018      	movs	r0, r3
 80041c6:	f7ff fea1 	bl	8003f0c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	2240      	movs	r2, #64	; 0x40
 80041d2:	4013      	ands	r3, r2
 80041d4:	2b40      	cmp	r3, #64	; 0x40
 80041d6:	d10a      	bne.n	80041ee <UART_DMAError+0x64>
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2b22      	cmp	r3, #34	; 0x22
 80041dc:	d107      	bne.n	80041ee <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	225a      	movs	r2, #90	; 0x5a
 80041e2:	2100      	movs	r1, #0
 80041e4:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	0018      	movs	r0, r3
 80041ea:	f7ff feb3 	bl	8003f54 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	2284      	movs	r2, #132	; 0x84
 80041f2:	589b      	ldr	r3, [r3, r2]
 80041f4:	2210      	movs	r2, #16
 80041f6:	431a      	orrs	r2, r3
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	2184      	movs	r1, #132	; 0x84
 80041fc:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	0018      	movs	r0, r3
 8004202:	f7fc ff05 	bl	8001010 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004206:	46c0      	nop			; (mov r8, r8)
 8004208:	46bd      	mov	sp, r7
 800420a:	b006      	add	sp, #24
 800420c:	bd80      	pop	{r7, pc}

0800420e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800420e:	b580      	push	{r7, lr}
 8004210:	b084      	sub	sp, #16
 8004212:	af00      	add	r7, sp, #0
 8004214:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	225a      	movs	r2, #90	; 0x5a
 8004220:	2100      	movs	r1, #0
 8004222:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2252      	movs	r2, #82	; 0x52
 8004228:	2100      	movs	r1, #0
 800422a:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	0018      	movs	r0, r3
 8004230:	f7fc feee 	bl	8001010 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004234:	46c0      	nop			; (mov r8, r8)
 8004236:	46bd      	mov	sp, r7
 8004238:	b004      	add	sp, #16
 800423a:	bd80      	pop	{r7, pc}

0800423c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b086      	sub	sp, #24
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004244:	f3ef 8310 	mrs	r3, PRIMASK
 8004248:	60bb      	str	r3, [r7, #8]
  return(result);
 800424a:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800424c:	617b      	str	r3, [r7, #20]
 800424e:	2301      	movs	r3, #1
 8004250:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	f383 8810 	msr	PRIMASK, r3
}
 8004258:	46c0      	nop			; (mov r8, r8)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	2140      	movs	r1, #64	; 0x40
 8004266:	438a      	bics	r2, r1
 8004268:	601a      	str	r2, [r3, #0]
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	f383 8810 	msr	PRIMASK, r3
}
 8004274:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2220      	movs	r2, #32
 800427a:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2200      	movs	r2, #0
 8004280:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	0018      	movs	r0, r3
 8004286:	f7ff fa8b 	bl	80037a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800428a:	46c0      	nop			; (mov r8, r8)
 800428c:	46bd      	mov	sp, r7
 800428e:	b006      	add	sp, #24
 8004290:	bd80      	pop	{r7, pc}

08004292 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004292:	b580      	push	{r7, lr}
 8004294:	b082      	sub	sp, #8
 8004296:	af00      	add	r7, sp, #0
 8004298:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800429a:	46c0      	nop			; (mov r8, r8)
 800429c:	46bd      	mov	sp, r7
 800429e:	b002      	add	sp, #8
 80042a0:	bd80      	pop	{r7, pc}

080042a2 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80042a2:	b5b0      	push	{r4, r5, r7, lr}
 80042a4:	b08a      	sub	sp, #40	; 0x28
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	60f8      	str	r0, [r7, #12]
 80042aa:	60b9      	str	r1, [r7, #8]
 80042ac:	1dbb      	adds	r3, r7, #6
 80042ae:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2280      	movs	r2, #128	; 0x80
 80042b4:	589b      	ldr	r3, [r3, r2]
 80042b6:	2b20      	cmp	r3, #32
 80042b8:	d156      	bne.n	8004368 <HAL_UARTEx_ReceiveToIdle_DMA+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d003      	beq.n	80042c8 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80042c0:	1dbb      	adds	r3, r7, #6
 80042c2:	881b      	ldrh	r3, [r3, #0]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d101      	bne.n	80042cc <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	e04e      	b.n	800436a <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data copy from RDR will be
       handled by DMA from a uint16_t frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	689a      	ldr	r2, [r3, #8]
 80042d0:	2380      	movs	r3, #128	; 0x80
 80042d2:	015b      	lsls	r3, r3, #5
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d109      	bne.n	80042ec <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	691b      	ldr	r3, [r3, #16]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d105      	bne.n	80042ec <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	2201      	movs	r2, #1
 80042e4:	4013      	ands	r3, r2
 80042e6:	d001      	beq.n	80042ec <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
      {
        return  HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	e03e      	b.n	800436a <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2201      	movs	r2, #1
 80042f0:	661a      	str	r2, [r3, #96]	; 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2200      	movs	r2, #0
 80042f6:	665a      	str	r2, [r3, #100]	; 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80042f8:	2527      	movs	r5, #39	; 0x27
 80042fa:	197c      	adds	r4, r7, r5
 80042fc:	1dbb      	adds	r3, r7, #6
 80042fe:	881a      	ldrh	r2, [r3, #0]
 8004300:	68b9      	ldr	r1, [r7, #8]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	0018      	movs	r0, r3
 8004306:	f7ff fd61 	bl	8003dcc <UART_Start_Receive_DMA>
 800430a:	0003      	movs	r3, r0
 800430c:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800430e:	197b      	adds	r3, r7, r5
 8004310:	781b      	ldrb	r3, [r3, #0]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d124      	bne.n	8004360 <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800431a:	2b01      	cmp	r3, #1
 800431c:	d11c      	bne.n	8004358 <HAL_UARTEx_ReceiveToIdle_DMA+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	2210      	movs	r2, #16
 8004324:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004326:	f3ef 8310 	mrs	r3, PRIMASK
 800432a:	617b      	str	r3, [r7, #20]
  return(result);
 800432c:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800432e:	623b      	str	r3, [r7, #32]
 8004330:	2301      	movs	r3, #1
 8004332:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004334:	69bb      	ldr	r3, [r7, #24]
 8004336:	f383 8810 	msr	PRIMASK, r3
}
 800433a:	46c0      	nop			; (mov r8, r8)
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	2110      	movs	r1, #16
 8004348:	430a      	orrs	r2, r1
 800434a:	601a      	str	r2, [r3, #0]
 800434c:	6a3b      	ldr	r3, [r7, #32]
 800434e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004350:	69fb      	ldr	r3, [r7, #28]
 8004352:	f383 8810 	msr	PRIMASK, r3
}
 8004356:	e003      	b.n	8004360 <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8004358:	2327      	movs	r3, #39	; 0x27
 800435a:	18fb      	adds	r3, r7, r3
 800435c:	2201      	movs	r2, #1
 800435e:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 8004360:	2327      	movs	r3, #39	; 0x27
 8004362:	18fb      	adds	r3, r7, r3
 8004364:	781b      	ldrb	r3, [r3, #0]
 8004366:	e000      	b.n	800436a <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
  }
  else
  {
    return HAL_BUSY;
 8004368:	2302      	movs	r3, #2
  }
}
 800436a:	0018      	movs	r0, r3
 800436c:	46bd      	mov	sp, r7
 800436e:	b00a      	add	sp, #40	; 0x28
 8004370:	bdb0      	pop	{r4, r5, r7, pc}

08004372 <main>:




int main(void)
{
 8004372:	b580      	push	{r7, lr}
 8004374:	af00      	add	r7, sp, #0
  hwInit();
 8004376:	f7fd faed 	bl	8001954 <hwInit>
  apInit();
 800437a:	f7fb ff5b 	bl	8000234 <apInit>

  apMain();
 800437e:	f7fb ff6b 	bl	8000258 <apMain>

  return 0;
 8004382:	2300      	movs	r3, #0
}
 8004384:	0018      	movs	r0, r3
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}
	...

0800438c <__errno>:
 800438c:	4b01      	ldr	r3, [pc, #4]	; (8004394 <__errno+0x8>)
 800438e:	6818      	ldr	r0, [r3, #0]
 8004390:	4770      	bx	lr
 8004392:	46c0      	nop			; (mov r8, r8)
 8004394:	200000b4 	.word	0x200000b4

08004398 <__libc_init_array>:
 8004398:	b570      	push	{r4, r5, r6, lr}
 800439a:	2600      	movs	r6, #0
 800439c:	4d0c      	ldr	r5, [pc, #48]	; (80043d0 <__libc_init_array+0x38>)
 800439e:	4c0d      	ldr	r4, [pc, #52]	; (80043d4 <__libc_init_array+0x3c>)
 80043a0:	1b64      	subs	r4, r4, r5
 80043a2:	10a4      	asrs	r4, r4, #2
 80043a4:	42a6      	cmp	r6, r4
 80043a6:	d109      	bne.n	80043bc <__libc_init_array+0x24>
 80043a8:	2600      	movs	r6, #0
 80043aa:	f001 f8e7 	bl	800557c <_init>
 80043ae:	4d0a      	ldr	r5, [pc, #40]	; (80043d8 <__libc_init_array+0x40>)
 80043b0:	4c0a      	ldr	r4, [pc, #40]	; (80043dc <__libc_init_array+0x44>)
 80043b2:	1b64      	subs	r4, r4, r5
 80043b4:	10a4      	asrs	r4, r4, #2
 80043b6:	42a6      	cmp	r6, r4
 80043b8:	d105      	bne.n	80043c6 <__libc_init_array+0x2e>
 80043ba:	bd70      	pop	{r4, r5, r6, pc}
 80043bc:	00b3      	lsls	r3, r6, #2
 80043be:	58eb      	ldr	r3, [r5, r3]
 80043c0:	4798      	blx	r3
 80043c2:	3601      	adds	r6, #1
 80043c4:	e7ee      	b.n	80043a4 <__libc_init_array+0xc>
 80043c6:	00b3      	lsls	r3, r6, #2
 80043c8:	58eb      	ldr	r3, [r5, r3]
 80043ca:	4798      	blx	r3
 80043cc:	3601      	adds	r6, #1
 80043ce:	e7f2      	b.n	80043b6 <__libc_init_array+0x1e>
 80043d0:	08005938 	.word	0x08005938
 80043d4:	08005938 	.word	0x08005938
 80043d8:	08005938 	.word	0x08005938
 80043dc:	0800593c 	.word	0x0800593c

080043e0 <memset>:
 80043e0:	0003      	movs	r3, r0
 80043e2:	1882      	adds	r2, r0, r2
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d100      	bne.n	80043ea <memset+0xa>
 80043e8:	4770      	bx	lr
 80043ea:	7019      	strb	r1, [r3, #0]
 80043ec:	3301      	adds	r3, #1
 80043ee:	e7f9      	b.n	80043e4 <memset+0x4>

080043f0 <_puts_r>:
 80043f0:	b570      	push	{r4, r5, r6, lr}
 80043f2:	0005      	movs	r5, r0
 80043f4:	000e      	movs	r6, r1
 80043f6:	2800      	cmp	r0, #0
 80043f8:	d004      	beq.n	8004404 <_puts_r+0x14>
 80043fa:	6983      	ldr	r3, [r0, #24]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d101      	bne.n	8004404 <_puts_r+0x14>
 8004400:	f000 faa6 	bl	8004950 <__sinit>
 8004404:	69ab      	ldr	r3, [r5, #24]
 8004406:	68ac      	ldr	r4, [r5, #8]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d102      	bne.n	8004412 <_puts_r+0x22>
 800440c:	0028      	movs	r0, r5
 800440e:	f000 fa9f 	bl	8004950 <__sinit>
 8004412:	4b2d      	ldr	r3, [pc, #180]	; (80044c8 <_puts_r+0xd8>)
 8004414:	429c      	cmp	r4, r3
 8004416:	d122      	bne.n	800445e <_puts_r+0x6e>
 8004418:	686c      	ldr	r4, [r5, #4]
 800441a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800441c:	07db      	lsls	r3, r3, #31
 800441e:	d405      	bmi.n	800442c <_puts_r+0x3c>
 8004420:	89a3      	ldrh	r3, [r4, #12]
 8004422:	059b      	lsls	r3, r3, #22
 8004424:	d402      	bmi.n	800442c <_puts_r+0x3c>
 8004426:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004428:	f000 fb33 	bl	8004a92 <__retarget_lock_acquire_recursive>
 800442c:	89a3      	ldrh	r3, [r4, #12]
 800442e:	071b      	lsls	r3, r3, #28
 8004430:	d502      	bpl.n	8004438 <_puts_r+0x48>
 8004432:	6923      	ldr	r3, [r4, #16]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d129      	bne.n	800448c <_puts_r+0x9c>
 8004438:	0021      	movs	r1, r4
 800443a:	0028      	movs	r0, r5
 800443c:	f000 f8e2 	bl	8004604 <__swsetup_r>
 8004440:	2800      	cmp	r0, #0
 8004442:	d023      	beq.n	800448c <_puts_r+0x9c>
 8004444:	2501      	movs	r5, #1
 8004446:	426d      	negs	r5, r5
 8004448:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800444a:	07db      	lsls	r3, r3, #31
 800444c:	d405      	bmi.n	800445a <_puts_r+0x6a>
 800444e:	89a3      	ldrh	r3, [r4, #12]
 8004450:	059b      	lsls	r3, r3, #22
 8004452:	d402      	bmi.n	800445a <_puts_r+0x6a>
 8004454:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004456:	f000 fb1d 	bl	8004a94 <__retarget_lock_release_recursive>
 800445a:	0028      	movs	r0, r5
 800445c:	bd70      	pop	{r4, r5, r6, pc}
 800445e:	4b1b      	ldr	r3, [pc, #108]	; (80044cc <_puts_r+0xdc>)
 8004460:	429c      	cmp	r4, r3
 8004462:	d101      	bne.n	8004468 <_puts_r+0x78>
 8004464:	68ac      	ldr	r4, [r5, #8]
 8004466:	e7d8      	b.n	800441a <_puts_r+0x2a>
 8004468:	4b19      	ldr	r3, [pc, #100]	; (80044d0 <_puts_r+0xe0>)
 800446a:	429c      	cmp	r4, r3
 800446c:	d1d5      	bne.n	800441a <_puts_r+0x2a>
 800446e:	68ec      	ldr	r4, [r5, #12]
 8004470:	e7d3      	b.n	800441a <_puts_r+0x2a>
 8004472:	3601      	adds	r6, #1
 8004474:	60a3      	str	r3, [r4, #8]
 8004476:	2b00      	cmp	r3, #0
 8004478:	da04      	bge.n	8004484 <_puts_r+0x94>
 800447a:	69a2      	ldr	r2, [r4, #24]
 800447c:	429a      	cmp	r2, r3
 800447e:	dc16      	bgt.n	80044ae <_puts_r+0xbe>
 8004480:	290a      	cmp	r1, #10
 8004482:	d014      	beq.n	80044ae <_puts_r+0xbe>
 8004484:	6823      	ldr	r3, [r4, #0]
 8004486:	1c5a      	adds	r2, r3, #1
 8004488:	6022      	str	r2, [r4, #0]
 800448a:	7019      	strb	r1, [r3, #0]
 800448c:	68a3      	ldr	r3, [r4, #8]
 800448e:	7831      	ldrb	r1, [r6, #0]
 8004490:	3b01      	subs	r3, #1
 8004492:	2900      	cmp	r1, #0
 8004494:	d1ed      	bne.n	8004472 <_puts_r+0x82>
 8004496:	60a3      	str	r3, [r4, #8]
 8004498:	2b00      	cmp	r3, #0
 800449a:	da0f      	bge.n	80044bc <_puts_r+0xcc>
 800449c:	0028      	movs	r0, r5
 800449e:	0022      	movs	r2, r4
 80044a0:	310a      	adds	r1, #10
 80044a2:	f000 f859 	bl	8004558 <__swbuf_r>
 80044a6:	250a      	movs	r5, #10
 80044a8:	1c43      	adds	r3, r0, #1
 80044aa:	d1cd      	bne.n	8004448 <_puts_r+0x58>
 80044ac:	e7ca      	b.n	8004444 <_puts_r+0x54>
 80044ae:	0022      	movs	r2, r4
 80044b0:	0028      	movs	r0, r5
 80044b2:	f000 f851 	bl	8004558 <__swbuf_r>
 80044b6:	1c43      	adds	r3, r0, #1
 80044b8:	d1e8      	bne.n	800448c <_puts_r+0x9c>
 80044ba:	e7c3      	b.n	8004444 <_puts_r+0x54>
 80044bc:	250a      	movs	r5, #10
 80044be:	6823      	ldr	r3, [r4, #0]
 80044c0:	1c5a      	adds	r2, r3, #1
 80044c2:	6022      	str	r2, [r4, #0]
 80044c4:	701d      	strb	r5, [r3, #0]
 80044c6:	e7bf      	b.n	8004448 <_puts_r+0x58>
 80044c8:	080058c4 	.word	0x080058c4
 80044cc:	080058e4 	.word	0x080058e4
 80044d0:	080058a4 	.word	0x080058a4

080044d4 <puts>:
 80044d4:	b510      	push	{r4, lr}
 80044d6:	4b03      	ldr	r3, [pc, #12]	; (80044e4 <puts+0x10>)
 80044d8:	0001      	movs	r1, r0
 80044da:	6818      	ldr	r0, [r3, #0]
 80044dc:	f7ff ff88 	bl	80043f0 <_puts_r>
 80044e0:	bd10      	pop	{r4, pc}
 80044e2:	46c0      	nop			; (mov r8, r8)
 80044e4:	200000b4 	.word	0x200000b4

080044e8 <_vsniprintf_r>:
 80044e8:	b530      	push	{r4, r5, lr}
 80044ea:	0014      	movs	r4, r2
 80044ec:	0005      	movs	r5, r0
 80044ee:	001a      	movs	r2, r3
 80044f0:	b09b      	sub	sp, #108	; 0x6c
 80044f2:	2c00      	cmp	r4, #0
 80044f4:	da05      	bge.n	8004502 <_vsniprintf_r+0x1a>
 80044f6:	238b      	movs	r3, #139	; 0x8b
 80044f8:	6003      	str	r3, [r0, #0]
 80044fa:	2001      	movs	r0, #1
 80044fc:	4240      	negs	r0, r0
 80044fe:	b01b      	add	sp, #108	; 0x6c
 8004500:	bd30      	pop	{r4, r5, pc}
 8004502:	2382      	movs	r3, #130	; 0x82
 8004504:	4668      	mov	r0, sp
 8004506:	009b      	lsls	r3, r3, #2
 8004508:	8183      	strh	r3, [r0, #12]
 800450a:	2300      	movs	r3, #0
 800450c:	9100      	str	r1, [sp, #0]
 800450e:	9104      	str	r1, [sp, #16]
 8004510:	429c      	cmp	r4, r3
 8004512:	d000      	beq.n	8004516 <_vsniprintf_r+0x2e>
 8004514:	1e63      	subs	r3, r4, #1
 8004516:	9302      	str	r3, [sp, #8]
 8004518:	9305      	str	r3, [sp, #20]
 800451a:	2301      	movs	r3, #1
 800451c:	4669      	mov	r1, sp
 800451e:	425b      	negs	r3, r3
 8004520:	81cb      	strh	r3, [r1, #14]
 8004522:	0028      	movs	r0, r5
 8004524:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004526:	f000 fc67 	bl	8004df8 <_svfiprintf_r>
 800452a:	1c43      	adds	r3, r0, #1
 800452c:	da01      	bge.n	8004532 <_vsniprintf_r+0x4a>
 800452e:	238b      	movs	r3, #139	; 0x8b
 8004530:	602b      	str	r3, [r5, #0]
 8004532:	2c00      	cmp	r4, #0
 8004534:	d0e3      	beq.n	80044fe <_vsniprintf_r+0x16>
 8004536:	2300      	movs	r3, #0
 8004538:	9a00      	ldr	r2, [sp, #0]
 800453a:	7013      	strb	r3, [r2, #0]
 800453c:	e7df      	b.n	80044fe <_vsniprintf_r+0x16>
	...

08004540 <vsniprintf>:
 8004540:	b507      	push	{r0, r1, r2, lr}
 8004542:	9300      	str	r3, [sp, #0]
 8004544:	0013      	movs	r3, r2
 8004546:	000a      	movs	r2, r1
 8004548:	0001      	movs	r1, r0
 800454a:	4802      	ldr	r0, [pc, #8]	; (8004554 <vsniprintf+0x14>)
 800454c:	6800      	ldr	r0, [r0, #0]
 800454e:	f7ff ffcb 	bl	80044e8 <_vsniprintf_r>
 8004552:	bd0e      	pop	{r1, r2, r3, pc}
 8004554:	200000b4 	.word	0x200000b4

08004558 <__swbuf_r>:
 8004558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800455a:	0005      	movs	r5, r0
 800455c:	000e      	movs	r6, r1
 800455e:	0014      	movs	r4, r2
 8004560:	2800      	cmp	r0, #0
 8004562:	d004      	beq.n	800456e <__swbuf_r+0x16>
 8004564:	6983      	ldr	r3, [r0, #24]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d101      	bne.n	800456e <__swbuf_r+0x16>
 800456a:	f000 f9f1 	bl	8004950 <__sinit>
 800456e:	4b22      	ldr	r3, [pc, #136]	; (80045f8 <__swbuf_r+0xa0>)
 8004570:	429c      	cmp	r4, r3
 8004572:	d12e      	bne.n	80045d2 <__swbuf_r+0x7a>
 8004574:	686c      	ldr	r4, [r5, #4]
 8004576:	69a3      	ldr	r3, [r4, #24]
 8004578:	60a3      	str	r3, [r4, #8]
 800457a:	89a3      	ldrh	r3, [r4, #12]
 800457c:	071b      	lsls	r3, r3, #28
 800457e:	d532      	bpl.n	80045e6 <__swbuf_r+0x8e>
 8004580:	6923      	ldr	r3, [r4, #16]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d02f      	beq.n	80045e6 <__swbuf_r+0x8e>
 8004586:	6823      	ldr	r3, [r4, #0]
 8004588:	6922      	ldr	r2, [r4, #16]
 800458a:	b2f7      	uxtb	r7, r6
 800458c:	1a98      	subs	r0, r3, r2
 800458e:	6963      	ldr	r3, [r4, #20]
 8004590:	b2f6      	uxtb	r6, r6
 8004592:	4283      	cmp	r3, r0
 8004594:	dc05      	bgt.n	80045a2 <__swbuf_r+0x4a>
 8004596:	0021      	movs	r1, r4
 8004598:	0028      	movs	r0, r5
 800459a:	f000 f937 	bl	800480c <_fflush_r>
 800459e:	2800      	cmp	r0, #0
 80045a0:	d127      	bne.n	80045f2 <__swbuf_r+0x9a>
 80045a2:	68a3      	ldr	r3, [r4, #8]
 80045a4:	3001      	adds	r0, #1
 80045a6:	3b01      	subs	r3, #1
 80045a8:	60a3      	str	r3, [r4, #8]
 80045aa:	6823      	ldr	r3, [r4, #0]
 80045ac:	1c5a      	adds	r2, r3, #1
 80045ae:	6022      	str	r2, [r4, #0]
 80045b0:	701f      	strb	r7, [r3, #0]
 80045b2:	6963      	ldr	r3, [r4, #20]
 80045b4:	4283      	cmp	r3, r0
 80045b6:	d004      	beq.n	80045c2 <__swbuf_r+0x6a>
 80045b8:	89a3      	ldrh	r3, [r4, #12]
 80045ba:	07db      	lsls	r3, r3, #31
 80045bc:	d507      	bpl.n	80045ce <__swbuf_r+0x76>
 80045be:	2e0a      	cmp	r6, #10
 80045c0:	d105      	bne.n	80045ce <__swbuf_r+0x76>
 80045c2:	0021      	movs	r1, r4
 80045c4:	0028      	movs	r0, r5
 80045c6:	f000 f921 	bl	800480c <_fflush_r>
 80045ca:	2800      	cmp	r0, #0
 80045cc:	d111      	bne.n	80045f2 <__swbuf_r+0x9a>
 80045ce:	0030      	movs	r0, r6
 80045d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045d2:	4b0a      	ldr	r3, [pc, #40]	; (80045fc <__swbuf_r+0xa4>)
 80045d4:	429c      	cmp	r4, r3
 80045d6:	d101      	bne.n	80045dc <__swbuf_r+0x84>
 80045d8:	68ac      	ldr	r4, [r5, #8]
 80045da:	e7cc      	b.n	8004576 <__swbuf_r+0x1e>
 80045dc:	4b08      	ldr	r3, [pc, #32]	; (8004600 <__swbuf_r+0xa8>)
 80045de:	429c      	cmp	r4, r3
 80045e0:	d1c9      	bne.n	8004576 <__swbuf_r+0x1e>
 80045e2:	68ec      	ldr	r4, [r5, #12]
 80045e4:	e7c7      	b.n	8004576 <__swbuf_r+0x1e>
 80045e6:	0021      	movs	r1, r4
 80045e8:	0028      	movs	r0, r5
 80045ea:	f000 f80b 	bl	8004604 <__swsetup_r>
 80045ee:	2800      	cmp	r0, #0
 80045f0:	d0c9      	beq.n	8004586 <__swbuf_r+0x2e>
 80045f2:	2601      	movs	r6, #1
 80045f4:	4276      	negs	r6, r6
 80045f6:	e7ea      	b.n	80045ce <__swbuf_r+0x76>
 80045f8:	080058c4 	.word	0x080058c4
 80045fc:	080058e4 	.word	0x080058e4
 8004600:	080058a4 	.word	0x080058a4

08004604 <__swsetup_r>:
 8004604:	4b37      	ldr	r3, [pc, #220]	; (80046e4 <__swsetup_r+0xe0>)
 8004606:	b570      	push	{r4, r5, r6, lr}
 8004608:	681d      	ldr	r5, [r3, #0]
 800460a:	0006      	movs	r6, r0
 800460c:	000c      	movs	r4, r1
 800460e:	2d00      	cmp	r5, #0
 8004610:	d005      	beq.n	800461e <__swsetup_r+0x1a>
 8004612:	69ab      	ldr	r3, [r5, #24]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d102      	bne.n	800461e <__swsetup_r+0x1a>
 8004618:	0028      	movs	r0, r5
 800461a:	f000 f999 	bl	8004950 <__sinit>
 800461e:	4b32      	ldr	r3, [pc, #200]	; (80046e8 <__swsetup_r+0xe4>)
 8004620:	429c      	cmp	r4, r3
 8004622:	d10f      	bne.n	8004644 <__swsetup_r+0x40>
 8004624:	686c      	ldr	r4, [r5, #4]
 8004626:	230c      	movs	r3, #12
 8004628:	5ee2      	ldrsh	r2, [r4, r3]
 800462a:	b293      	uxth	r3, r2
 800462c:	0711      	lsls	r1, r2, #28
 800462e:	d42d      	bmi.n	800468c <__swsetup_r+0x88>
 8004630:	06d9      	lsls	r1, r3, #27
 8004632:	d411      	bmi.n	8004658 <__swsetup_r+0x54>
 8004634:	2309      	movs	r3, #9
 8004636:	2001      	movs	r0, #1
 8004638:	6033      	str	r3, [r6, #0]
 800463a:	3337      	adds	r3, #55	; 0x37
 800463c:	4313      	orrs	r3, r2
 800463e:	81a3      	strh	r3, [r4, #12]
 8004640:	4240      	negs	r0, r0
 8004642:	bd70      	pop	{r4, r5, r6, pc}
 8004644:	4b29      	ldr	r3, [pc, #164]	; (80046ec <__swsetup_r+0xe8>)
 8004646:	429c      	cmp	r4, r3
 8004648:	d101      	bne.n	800464e <__swsetup_r+0x4a>
 800464a:	68ac      	ldr	r4, [r5, #8]
 800464c:	e7eb      	b.n	8004626 <__swsetup_r+0x22>
 800464e:	4b28      	ldr	r3, [pc, #160]	; (80046f0 <__swsetup_r+0xec>)
 8004650:	429c      	cmp	r4, r3
 8004652:	d1e8      	bne.n	8004626 <__swsetup_r+0x22>
 8004654:	68ec      	ldr	r4, [r5, #12]
 8004656:	e7e6      	b.n	8004626 <__swsetup_r+0x22>
 8004658:	075b      	lsls	r3, r3, #29
 800465a:	d513      	bpl.n	8004684 <__swsetup_r+0x80>
 800465c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800465e:	2900      	cmp	r1, #0
 8004660:	d008      	beq.n	8004674 <__swsetup_r+0x70>
 8004662:	0023      	movs	r3, r4
 8004664:	3344      	adds	r3, #68	; 0x44
 8004666:	4299      	cmp	r1, r3
 8004668:	d002      	beq.n	8004670 <__swsetup_r+0x6c>
 800466a:	0030      	movs	r0, r6
 800466c:	f000 fa80 	bl	8004b70 <_free_r>
 8004670:	2300      	movs	r3, #0
 8004672:	6363      	str	r3, [r4, #52]	; 0x34
 8004674:	2224      	movs	r2, #36	; 0x24
 8004676:	89a3      	ldrh	r3, [r4, #12]
 8004678:	4393      	bics	r3, r2
 800467a:	81a3      	strh	r3, [r4, #12]
 800467c:	2300      	movs	r3, #0
 800467e:	6063      	str	r3, [r4, #4]
 8004680:	6923      	ldr	r3, [r4, #16]
 8004682:	6023      	str	r3, [r4, #0]
 8004684:	2308      	movs	r3, #8
 8004686:	89a2      	ldrh	r2, [r4, #12]
 8004688:	4313      	orrs	r3, r2
 800468a:	81a3      	strh	r3, [r4, #12]
 800468c:	6923      	ldr	r3, [r4, #16]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d10b      	bne.n	80046aa <__swsetup_r+0xa6>
 8004692:	21a0      	movs	r1, #160	; 0xa0
 8004694:	2280      	movs	r2, #128	; 0x80
 8004696:	89a3      	ldrh	r3, [r4, #12]
 8004698:	0089      	lsls	r1, r1, #2
 800469a:	0092      	lsls	r2, r2, #2
 800469c:	400b      	ands	r3, r1
 800469e:	4293      	cmp	r3, r2
 80046a0:	d003      	beq.n	80046aa <__swsetup_r+0xa6>
 80046a2:	0021      	movs	r1, r4
 80046a4:	0030      	movs	r0, r6
 80046a6:	f000 fa1f 	bl	8004ae8 <__smakebuf_r>
 80046aa:	220c      	movs	r2, #12
 80046ac:	5ea3      	ldrsh	r3, [r4, r2]
 80046ae:	2001      	movs	r0, #1
 80046b0:	001a      	movs	r2, r3
 80046b2:	b299      	uxth	r1, r3
 80046b4:	4002      	ands	r2, r0
 80046b6:	4203      	tst	r3, r0
 80046b8:	d00f      	beq.n	80046da <__swsetup_r+0xd6>
 80046ba:	2200      	movs	r2, #0
 80046bc:	60a2      	str	r2, [r4, #8]
 80046be:	6962      	ldr	r2, [r4, #20]
 80046c0:	4252      	negs	r2, r2
 80046c2:	61a2      	str	r2, [r4, #24]
 80046c4:	2000      	movs	r0, #0
 80046c6:	6922      	ldr	r2, [r4, #16]
 80046c8:	4282      	cmp	r2, r0
 80046ca:	d1ba      	bne.n	8004642 <__swsetup_r+0x3e>
 80046cc:	060a      	lsls	r2, r1, #24
 80046ce:	d5b8      	bpl.n	8004642 <__swsetup_r+0x3e>
 80046d0:	2240      	movs	r2, #64	; 0x40
 80046d2:	4313      	orrs	r3, r2
 80046d4:	81a3      	strh	r3, [r4, #12]
 80046d6:	3801      	subs	r0, #1
 80046d8:	e7b3      	b.n	8004642 <__swsetup_r+0x3e>
 80046da:	0788      	lsls	r0, r1, #30
 80046dc:	d400      	bmi.n	80046e0 <__swsetup_r+0xdc>
 80046de:	6962      	ldr	r2, [r4, #20]
 80046e0:	60a2      	str	r2, [r4, #8]
 80046e2:	e7ef      	b.n	80046c4 <__swsetup_r+0xc0>
 80046e4:	200000b4 	.word	0x200000b4
 80046e8:	080058c4 	.word	0x080058c4
 80046ec:	080058e4 	.word	0x080058e4
 80046f0:	080058a4 	.word	0x080058a4

080046f4 <__sflush_r>:
 80046f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80046f6:	898b      	ldrh	r3, [r1, #12]
 80046f8:	0005      	movs	r5, r0
 80046fa:	000c      	movs	r4, r1
 80046fc:	071a      	lsls	r2, r3, #28
 80046fe:	d45f      	bmi.n	80047c0 <__sflush_r+0xcc>
 8004700:	684a      	ldr	r2, [r1, #4]
 8004702:	2a00      	cmp	r2, #0
 8004704:	dc04      	bgt.n	8004710 <__sflush_r+0x1c>
 8004706:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8004708:	2a00      	cmp	r2, #0
 800470a:	dc01      	bgt.n	8004710 <__sflush_r+0x1c>
 800470c:	2000      	movs	r0, #0
 800470e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004710:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8004712:	2f00      	cmp	r7, #0
 8004714:	d0fa      	beq.n	800470c <__sflush_r+0x18>
 8004716:	2200      	movs	r2, #0
 8004718:	2180      	movs	r1, #128	; 0x80
 800471a:	682e      	ldr	r6, [r5, #0]
 800471c:	602a      	str	r2, [r5, #0]
 800471e:	001a      	movs	r2, r3
 8004720:	0149      	lsls	r1, r1, #5
 8004722:	400a      	ands	r2, r1
 8004724:	420b      	tst	r3, r1
 8004726:	d034      	beq.n	8004792 <__sflush_r+0x9e>
 8004728:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800472a:	89a3      	ldrh	r3, [r4, #12]
 800472c:	075b      	lsls	r3, r3, #29
 800472e:	d506      	bpl.n	800473e <__sflush_r+0x4a>
 8004730:	6863      	ldr	r3, [r4, #4]
 8004732:	1ac0      	subs	r0, r0, r3
 8004734:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004736:	2b00      	cmp	r3, #0
 8004738:	d001      	beq.n	800473e <__sflush_r+0x4a>
 800473a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800473c:	1ac0      	subs	r0, r0, r3
 800473e:	0002      	movs	r2, r0
 8004740:	6a21      	ldr	r1, [r4, #32]
 8004742:	2300      	movs	r3, #0
 8004744:	0028      	movs	r0, r5
 8004746:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8004748:	47b8      	blx	r7
 800474a:	89a1      	ldrh	r1, [r4, #12]
 800474c:	1c43      	adds	r3, r0, #1
 800474e:	d106      	bne.n	800475e <__sflush_r+0x6a>
 8004750:	682b      	ldr	r3, [r5, #0]
 8004752:	2b1d      	cmp	r3, #29
 8004754:	d831      	bhi.n	80047ba <__sflush_r+0xc6>
 8004756:	4a2c      	ldr	r2, [pc, #176]	; (8004808 <__sflush_r+0x114>)
 8004758:	40da      	lsrs	r2, r3
 800475a:	07d3      	lsls	r3, r2, #31
 800475c:	d52d      	bpl.n	80047ba <__sflush_r+0xc6>
 800475e:	2300      	movs	r3, #0
 8004760:	6063      	str	r3, [r4, #4]
 8004762:	6923      	ldr	r3, [r4, #16]
 8004764:	6023      	str	r3, [r4, #0]
 8004766:	04cb      	lsls	r3, r1, #19
 8004768:	d505      	bpl.n	8004776 <__sflush_r+0x82>
 800476a:	1c43      	adds	r3, r0, #1
 800476c:	d102      	bne.n	8004774 <__sflush_r+0x80>
 800476e:	682b      	ldr	r3, [r5, #0]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d100      	bne.n	8004776 <__sflush_r+0x82>
 8004774:	6560      	str	r0, [r4, #84]	; 0x54
 8004776:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004778:	602e      	str	r6, [r5, #0]
 800477a:	2900      	cmp	r1, #0
 800477c:	d0c6      	beq.n	800470c <__sflush_r+0x18>
 800477e:	0023      	movs	r3, r4
 8004780:	3344      	adds	r3, #68	; 0x44
 8004782:	4299      	cmp	r1, r3
 8004784:	d002      	beq.n	800478c <__sflush_r+0x98>
 8004786:	0028      	movs	r0, r5
 8004788:	f000 f9f2 	bl	8004b70 <_free_r>
 800478c:	2000      	movs	r0, #0
 800478e:	6360      	str	r0, [r4, #52]	; 0x34
 8004790:	e7bd      	b.n	800470e <__sflush_r+0x1a>
 8004792:	2301      	movs	r3, #1
 8004794:	0028      	movs	r0, r5
 8004796:	6a21      	ldr	r1, [r4, #32]
 8004798:	47b8      	blx	r7
 800479a:	1c43      	adds	r3, r0, #1
 800479c:	d1c5      	bne.n	800472a <__sflush_r+0x36>
 800479e:	682b      	ldr	r3, [r5, #0]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d0c2      	beq.n	800472a <__sflush_r+0x36>
 80047a4:	2b1d      	cmp	r3, #29
 80047a6:	d001      	beq.n	80047ac <__sflush_r+0xb8>
 80047a8:	2b16      	cmp	r3, #22
 80047aa:	d101      	bne.n	80047b0 <__sflush_r+0xbc>
 80047ac:	602e      	str	r6, [r5, #0]
 80047ae:	e7ad      	b.n	800470c <__sflush_r+0x18>
 80047b0:	2340      	movs	r3, #64	; 0x40
 80047b2:	89a2      	ldrh	r2, [r4, #12]
 80047b4:	4313      	orrs	r3, r2
 80047b6:	81a3      	strh	r3, [r4, #12]
 80047b8:	e7a9      	b.n	800470e <__sflush_r+0x1a>
 80047ba:	2340      	movs	r3, #64	; 0x40
 80047bc:	430b      	orrs	r3, r1
 80047be:	e7fa      	b.n	80047b6 <__sflush_r+0xc2>
 80047c0:	690f      	ldr	r7, [r1, #16]
 80047c2:	2f00      	cmp	r7, #0
 80047c4:	d0a2      	beq.n	800470c <__sflush_r+0x18>
 80047c6:	680a      	ldr	r2, [r1, #0]
 80047c8:	600f      	str	r7, [r1, #0]
 80047ca:	1bd2      	subs	r2, r2, r7
 80047cc:	9201      	str	r2, [sp, #4]
 80047ce:	2200      	movs	r2, #0
 80047d0:	079b      	lsls	r3, r3, #30
 80047d2:	d100      	bne.n	80047d6 <__sflush_r+0xe2>
 80047d4:	694a      	ldr	r2, [r1, #20]
 80047d6:	60a2      	str	r2, [r4, #8]
 80047d8:	9b01      	ldr	r3, [sp, #4]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	dc00      	bgt.n	80047e0 <__sflush_r+0xec>
 80047de:	e795      	b.n	800470c <__sflush_r+0x18>
 80047e0:	003a      	movs	r2, r7
 80047e2:	0028      	movs	r0, r5
 80047e4:	9b01      	ldr	r3, [sp, #4]
 80047e6:	6a21      	ldr	r1, [r4, #32]
 80047e8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80047ea:	47b0      	blx	r6
 80047ec:	2800      	cmp	r0, #0
 80047ee:	dc06      	bgt.n	80047fe <__sflush_r+0x10a>
 80047f0:	2340      	movs	r3, #64	; 0x40
 80047f2:	2001      	movs	r0, #1
 80047f4:	89a2      	ldrh	r2, [r4, #12]
 80047f6:	4240      	negs	r0, r0
 80047f8:	4313      	orrs	r3, r2
 80047fa:	81a3      	strh	r3, [r4, #12]
 80047fc:	e787      	b.n	800470e <__sflush_r+0x1a>
 80047fe:	9b01      	ldr	r3, [sp, #4]
 8004800:	183f      	adds	r7, r7, r0
 8004802:	1a1b      	subs	r3, r3, r0
 8004804:	9301      	str	r3, [sp, #4]
 8004806:	e7e7      	b.n	80047d8 <__sflush_r+0xe4>
 8004808:	20400001 	.word	0x20400001

0800480c <_fflush_r>:
 800480c:	690b      	ldr	r3, [r1, #16]
 800480e:	b570      	push	{r4, r5, r6, lr}
 8004810:	0005      	movs	r5, r0
 8004812:	000c      	movs	r4, r1
 8004814:	2b00      	cmp	r3, #0
 8004816:	d102      	bne.n	800481e <_fflush_r+0x12>
 8004818:	2500      	movs	r5, #0
 800481a:	0028      	movs	r0, r5
 800481c:	bd70      	pop	{r4, r5, r6, pc}
 800481e:	2800      	cmp	r0, #0
 8004820:	d004      	beq.n	800482c <_fflush_r+0x20>
 8004822:	6983      	ldr	r3, [r0, #24]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d101      	bne.n	800482c <_fflush_r+0x20>
 8004828:	f000 f892 	bl	8004950 <__sinit>
 800482c:	4b14      	ldr	r3, [pc, #80]	; (8004880 <_fflush_r+0x74>)
 800482e:	429c      	cmp	r4, r3
 8004830:	d11b      	bne.n	800486a <_fflush_r+0x5e>
 8004832:	686c      	ldr	r4, [r5, #4]
 8004834:	220c      	movs	r2, #12
 8004836:	5ea3      	ldrsh	r3, [r4, r2]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d0ed      	beq.n	8004818 <_fflush_r+0xc>
 800483c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800483e:	07d2      	lsls	r2, r2, #31
 8004840:	d404      	bmi.n	800484c <_fflush_r+0x40>
 8004842:	059b      	lsls	r3, r3, #22
 8004844:	d402      	bmi.n	800484c <_fflush_r+0x40>
 8004846:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004848:	f000 f923 	bl	8004a92 <__retarget_lock_acquire_recursive>
 800484c:	0028      	movs	r0, r5
 800484e:	0021      	movs	r1, r4
 8004850:	f7ff ff50 	bl	80046f4 <__sflush_r>
 8004854:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004856:	0005      	movs	r5, r0
 8004858:	07db      	lsls	r3, r3, #31
 800485a:	d4de      	bmi.n	800481a <_fflush_r+0xe>
 800485c:	89a3      	ldrh	r3, [r4, #12]
 800485e:	059b      	lsls	r3, r3, #22
 8004860:	d4db      	bmi.n	800481a <_fflush_r+0xe>
 8004862:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004864:	f000 f916 	bl	8004a94 <__retarget_lock_release_recursive>
 8004868:	e7d7      	b.n	800481a <_fflush_r+0xe>
 800486a:	4b06      	ldr	r3, [pc, #24]	; (8004884 <_fflush_r+0x78>)
 800486c:	429c      	cmp	r4, r3
 800486e:	d101      	bne.n	8004874 <_fflush_r+0x68>
 8004870:	68ac      	ldr	r4, [r5, #8]
 8004872:	e7df      	b.n	8004834 <_fflush_r+0x28>
 8004874:	4b04      	ldr	r3, [pc, #16]	; (8004888 <_fflush_r+0x7c>)
 8004876:	429c      	cmp	r4, r3
 8004878:	d1dc      	bne.n	8004834 <_fflush_r+0x28>
 800487a:	68ec      	ldr	r4, [r5, #12]
 800487c:	e7da      	b.n	8004834 <_fflush_r+0x28>
 800487e:	46c0      	nop			; (mov r8, r8)
 8004880:	080058c4 	.word	0x080058c4
 8004884:	080058e4 	.word	0x080058e4
 8004888:	080058a4 	.word	0x080058a4

0800488c <std>:
 800488c:	2300      	movs	r3, #0
 800488e:	b510      	push	{r4, lr}
 8004890:	0004      	movs	r4, r0
 8004892:	6003      	str	r3, [r0, #0]
 8004894:	6043      	str	r3, [r0, #4]
 8004896:	6083      	str	r3, [r0, #8]
 8004898:	8181      	strh	r1, [r0, #12]
 800489a:	6643      	str	r3, [r0, #100]	; 0x64
 800489c:	0019      	movs	r1, r3
 800489e:	81c2      	strh	r2, [r0, #14]
 80048a0:	6103      	str	r3, [r0, #16]
 80048a2:	6143      	str	r3, [r0, #20]
 80048a4:	6183      	str	r3, [r0, #24]
 80048a6:	2208      	movs	r2, #8
 80048a8:	305c      	adds	r0, #92	; 0x5c
 80048aa:	f7ff fd99 	bl	80043e0 <memset>
 80048ae:	4b05      	ldr	r3, [pc, #20]	; (80048c4 <std+0x38>)
 80048b0:	6224      	str	r4, [r4, #32]
 80048b2:	6263      	str	r3, [r4, #36]	; 0x24
 80048b4:	4b04      	ldr	r3, [pc, #16]	; (80048c8 <std+0x3c>)
 80048b6:	62a3      	str	r3, [r4, #40]	; 0x28
 80048b8:	4b04      	ldr	r3, [pc, #16]	; (80048cc <std+0x40>)
 80048ba:	62e3      	str	r3, [r4, #44]	; 0x2c
 80048bc:	4b04      	ldr	r3, [pc, #16]	; (80048d0 <std+0x44>)
 80048be:	6323      	str	r3, [r4, #48]	; 0x30
 80048c0:	bd10      	pop	{r4, pc}
 80048c2:	46c0      	nop			; (mov r8, r8)
 80048c4:	08005321 	.word	0x08005321
 80048c8:	08005349 	.word	0x08005349
 80048cc:	08005381 	.word	0x08005381
 80048d0:	080053ad 	.word	0x080053ad

080048d4 <_cleanup_r>:
 80048d4:	b510      	push	{r4, lr}
 80048d6:	4902      	ldr	r1, [pc, #8]	; (80048e0 <_cleanup_r+0xc>)
 80048d8:	f000 f8ba 	bl	8004a50 <_fwalk_reent>
 80048dc:	bd10      	pop	{r4, pc}
 80048de:	46c0      	nop			; (mov r8, r8)
 80048e0:	0800480d 	.word	0x0800480d

080048e4 <__sfmoreglue>:
 80048e4:	b570      	push	{r4, r5, r6, lr}
 80048e6:	2568      	movs	r5, #104	; 0x68
 80048e8:	1e4a      	subs	r2, r1, #1
 80048ea:	4355      	muls	r5, r2
 80048ec:	000e      	movs	r6, r1
 80048ee:	0029      	movs	r1, r5
 80048f0:	3174      	adds	r1, #116	; 0x74
 80048f2:	f000 f9a9 	bl	8004c48 <_malloc_r>
 80048f6:	1e04      	subs	r4, r0, #0
 80048f8:	d008      	beq.n	800490c <__sfmoreglue+0x28>
 80048fa:	2100      	movs	r1, #0
 80048fc:	002a      	movs	r2, r5
 80048fe:	6001      	str	r1, [r0, #0]
 8004900:	6046      	str	r6, [r0, #4]
 8004902:	300c      	adds	r0, #12
 8004904:	60a0      	str	r0, [r4, #8]
 8004906:	3268      	adds	r2, #104	; 0x68
 8004908:	f7ff fd6a 	bl	80043e0 <memset>
 800490c:	0020      	movs	r0, r4
 800490e:	bd70      	pop	{r4, r5, r6, pc}

08004910 <__sfp_lock_acquire>:
 8004910:	b510      	push	{r4, lr}
 8004912:	4802      	ldr	r0, [pc, #8]	; (800491c <__sfp_lock_acquire+0xc>)
 8004914:	f000 f8bd 	bl	8004a92 <__retarget_lock_acquire_recursive>
 8004918:	bd10      	pop	{r4, pc}
 800491a:	46c0      	nop			; (mov r8, r8)
 800491c:	20000969 	.word	0x20000969

08004920 <__sfp_lock_release>:
 8004920:	b510      	push	{r4, lr}
 8004922:	4802      	ldr	r0, [pc, #8]	; (800492c <__sfp_lock_release+0xc>)
 8004924:	f000 f8b6 	bl	8004a94 <__retarget_lock_release_recursive>
 8004928:	bd10      	pop	{r4, pc}
 800492a:	46c0      	nop			; (mov r8, r8)
 800492c:	20000969 	.word	0x20000969

08004930 <__sinit_lock_acquire>:
 8004930:	b510      	push	{r4, lr}
 8004932:	4802      	ldr	r0, [pc, #8]	; (800493c <__sinit_lock_acquire+0xc>)
 8004934:	f000 f8ad 	bl	8004a92 <__retarget_lock_acquire_recursive>
 8004938:	bd10      	pop	{r4, pc}
 800493a:	46c0      	nop			; (mov r8, r8)
 800493c:	2000096a 	.word	0x2000096a

08004940 <__sinit_lock_release>:
 8004940:	b510      	push	{r4, lr}
 8004942:	4802      	ldr	r0, [pc, #8]	; (800494c <__sinit_lock_release+0xc>)
 8004944:	f000 f8a6 	bl	8004a94 <__retarget_lock_release_recursive>
 8004948:	bd10      	pop	{r4, pc}
 800494a:	46c0      	nop			; (mov r8, r8)
 800494c:	2000096a 	.word	0x2000096a

08004950 <__sinit>:
 8004950:	b513      	push	{r0, r1, r4, lr}
 8004952:	0004      	movs	r4, r0
 8004954:	f7ff ffec 	bl	8004930 <__sinit_lock_acquire>
 8004958:	69a3      	ldr	r3, [r4, #24]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d002      	beq.n	8004964 <__sinit+0x14>
 800495e:	f7ff ffef 	bl	8004940 <__sinit_lock_release>
 8004962:	bd13      	pop	{r0, r1, r4, pc}
 8004964:	64a3      	str	r3, [r4, #72]	; 0x48
 8004966:	64e3      	str	r3, [r4, #76]	; 0x4c
 8004968:	6523      	str	r3, [r4, #80]	; 0x50
 800496a:	4b13      	ldr	r3, [pc, #76]	; (80049b8 <__sinit+0x68>)
 800496c:	4a13      	ldr	r2, [pc, #76]	; (80049bc <__sinit+0x6c>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	62a2      	str	r2, [r4, #40]	; 0x28
 8004972:	9301      	str	r3, [sp, #4]
 8004974:	42a3      	cmp	r3, r4
 8004976:	d101      	bne.n	800497c <__sinit+0x2c>
 8004978:	2301      	movs	r3, #1
 800497a:	61a3      	str	r3, [r4, #24]
 800497c:	0020      	movs	r0, r4
 800497e:	f000 f81f 	bl	80049c0 <__sfp>
 8004982:	6060      	str	r0, [r4, #4]
 8004984:	0020      	movs	r0, r4
 8004986:	f000 f81b 	bl	80049c0 <__sfp>
 800498a:	60a0      	str	r0, [r4, #8]
 800498c:	0020      	movs	r0, r4
 800498e:	f000 f817 	bl	80049c0 <__sfp>
 8004992:	2200      	movs	r2, #0
 8004994:	2104      	movs	r1, #4
 8004996:	60e0      	str	r0, [r4, #12]
 8004998:	6860      	ldr	r0, [r4, #4]
 800499a:	f7ff ff77 	bl	800488c <std>
 800499e:	2201      	movs	r2, #1
 80049a0:	2109      	movs	r1, #9
 80049a2:	68a0      	ldr	r0, [r4, #8]
 80049a4:	f7ff ff72 	bl	800488c <std>
 80049a8:	2202      	movs	r2, #2
 80049aa:	2112      	movs	r1, #18
 80049ac:	68e0      	ldr	r0, [r4, #12]
 80049ae:	f7ff ff6d 	bl	800488c <std>
 80049b2:	2301      	movs	r3, #1
 80049b4:	61a3      	str	r3, [r4, #24]
 80049b6:	e7d2      	b.n	800495e <__sinit+0xe>
 80049b8:	080058a0 	.word	0x080058a0
 80049bc:	080048d5 	.word	0x080048d5

080049c0 <__sfp>:
 80049c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049c2:	0007      	movs	r7, r0
 80049c4:	f7ff ffa4 	bl	8004910 <__sfp_lock_acquire>
 80049c8:	4b1f      	ldr	r3, [pc, #124]	; (8004a48 <__sfp+0x88>)
 80049ca:	681e      	ldr	r6, [r3, #0]
 80049cc:	69b3      	ldr	r3, [r6, #24]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d102      	bne.n	80049d8 <__sfp+0x18>
 80049d2:	0030      	movs	r0, r6
 80049d4:	f7ff ffbc 	bl	8004950 <__sinit>
 80049d8:	3648      	adds	r6, #72	; 0x48
 80049da:	68b4      	ldr	r4, [r6, #8]
 80049dc:	6873      	ldr	r3, [r6, #4]
 80049de:	3b01      	subs	r3, #1
 80049e0:	d504      	bpl.n	80049ec <__sfp+0x2c>
 80049e2:	6833      	ldr	r3, [r6, #0]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d022      	beq.n	8004a2e <__sfp+0x6e>
 80049e8:	6836      	ldr	r6, [r6, #0]
 80049ea:	e7f6      	b.n	80049da <__sfp+0x1a>
 80049ec:	220c      	movs	r2, #12
 80049ee:	5ea5      	ldrsh	r5, [r4, r2]
 80049f0:	2d00      	cmp	r5, #0
 80049f2:	d11a      	bne.n	8004a2a <__sfp+0x6a>
 80049f4:	0020      	movs	r0, r4
 80049f6:	4b15      	ldr	r3, [pc, #84]	; (8004a4c <__sfp+0x8c>)
 80049f8:	3058      	adds	r0, #88	; 0x58
 80049fa:	60e3      	str	r3, [r4, #12]
 80049fc:	6665      	str	r5, [r4, #100]	; 0x64
 80049fe:	f000 f847 	bl	8004a90 <__retarget_lock_init_recursive>
 8004a02:	f7ff ff8d 	bl	8004920 <__sfp_lock_release>
 8004a06:	0020      	movs	r0, r4
 8004a08:	2208      	movs	r2, #8
 8004a0a:	0029      	movs	r1, r5
 8004a0c:	6025      	str	r5, [r4, #0]
 8004a0e:	60a5      	str	r5, [r4, #8]
 8004a10:	6065      	str	r5, [r4, #4]
 8004a12:	6125      	str	r5, [r4, #16]
 8004a14:	6165      	str	r5, [r4, #20]
 8004a16:	61a5      	str	r5, [r4, #24]
 8004a18:	305c      	adds	r0, #92	; 0x5c
 8004a1a:	f7ff fce1 	bl	80043e0 <memset>
 8004a1e:	6365      	str	r5, [r4, #52]	; 0x34
 8004a20:	63a5      	str	r5, [r4, #56]	; 0x38
 8004a22:	64a5      	str	r5, [r4, #72]	; 0x48
 8004a24:	64e5      	str	r5, [r4, #76]	; 0x4c
 8004a26:	0020      	movs	r0, r4
 8004a28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a2a:	3468      	adds	r4, #104	; 0x68
 8004a2c:	e7d7      	b.n	80049de <__sfp+0x1e>
 8004a2e:	2104      	movs	r1, #4
 8004a30:	0038      	movs	r0, r7
 8004a32:	f7ff ff57 	bl	80048e4 <__sfmoreglue>
 8004a36:	1e04      	subs	r4, r0, #0
 8004a38:	6030      	str	r0, [r6, #0]
 8004a3a:	d1d5      	bne.n	80049e8 <__sfp+0x28>
 8004a3c:	f7ff ff70 	bl	8004920 <__sfp_lock_release>
 8004a40:	230c      	movs	r3, #12
 8004a42:	603b      	str	r3, [r7, #0]
 8004a44:	e7ef      	b.n	8004a26 <__sfp+0x66>
 8004a46:	46c0      	nop			; (mov r8, r8)
 8004a48:	080058a0 	.word	0x080058a0
 8004a4c:	ffff0001 	.word	0xffff0001

08004a50 <_fwalk_reent>:
 8004a50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004a52:	0004      	movs	r4, r0
 8004a54:	0006      	movs	r6, r0
 8004a56:	2700      	movs	r7, #0
 8004a58:	9101      	str	r1, [sp, #4]
 8004a5a:	3448      	adds	r4, #72	; 0x48
 8004a5c:	6863      	ldr	r3, [r4, #4]
 8004a5e:	68a5      	ldr	r5, [r4, #8]
 8004a60:	9300      	str	r3, [sp, #0]
 8004a62:	9b00      	ldr	r3, [sp, #0]
 8004a64:	3b01      	subs	r3, #1
 8004a66:	9300      	str	r3, [sp, #0]
 8004a68:	d504      	bpl.n	8004a74 <_fwalk_reent+0x24>
 8004a6a:	6824      	ldr	r4, [r4, #0]
 8004a6c:	2c00      	cmp	r4, #0
 8004a6e:	d1f5      	bne.n	8004a5c <_fwalk_reent+0xc>
 8004a70:	0038      	movs	r0, r7
 8004a72:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004a74:	89ab      	ldrh	r3, [r5, #12]
 8004a76:	2b01      	cmp	r3, #1
 8004a78:	d908      	bls.n	8004a8c <_fwalk_reent+0x3c>
 8004a7a:	220e      	movs	r2, #14
 8004a7c:	5eab      	ldrsh	r3, [r5, r2]
 8004a7e:	3301      	adds	r3, #1
 8004a80:	d004      	beq.n	8004a8c <_fwalk_reent+0x3c>
 8004a82:	0029      	movs	r1, r5
 8004a84:	0030      	movs	r0, r6
 8004a86:	9b01      	ldr	r3, [sp, #4]
 8004a88:	4798      	blx	r3
 8004a8a:	4307      	orrs	r7, r0
 8004a8c:	3568      	adds	r5, #104	; 0x68
 8004a8e:	e7e8      	b.n	8004a62 <_fwalk_reent+0x12>

08004a90 <__retarget_lock_init_recursive>:
 8004a90:	4770      	bx	lr

08004a92 <__retarget_lock_acquire_recursive>:
 8004a92:	4770      	bx	lr

08004a94 <__retarget_lock_release_recursive>:
 8004a94:	4770      	bx	lr
	...

08004a98 <__swhatbuf_r>:
 8004a98:	b570      	push	{r4, r5, r6, lr}
 8004a9a:	000e      	movs	r6, r1
 8004a9c:	001d      	movs	r5, r3
 8004a9e:	230e      	movs	r3, #14
 8004aa0:	5ec9      	ldrsh	r1, [r1, r3]
 8004aa2:	0014      	movs	r4, r2
 8004aa4:	b096      	sub	sp, #88	; 0x58
 8004aa6:	2900      	cmp	r1, #0
 8004aa8:	da08      	bge.n	8004abc <__swhatbuf_r+0x24>
 8004aaa:	220c      	movs	r2, #12
 8004aac:	5eb3      	ldrsh	r3, [r6, r2]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	602a      	str	r2, [r5, #0]
 8004ab2:	061b      	lsls	r3, r3, #24
 8004ab4:	d411      	bmi.n	8004ada <__swhatbuf_r+0x42>
 8004ab6:	2380      	movs	r3, #128	; 0x80
 8004ab8:	00db      	lsls	r3, r3, #3
 8004aba:	e00f      	b.n	8004adc <__swhatbuf_r+0x44>
 8004abc:	466a      	mov	r2, sp
 8004abe:	f000 fca1 	bl	8005404 <_fstat_r>
 8004ac2:	2800      	cmp	r0, #0
 8004ac4:	dbf1      	blt.n	8004aaa <__swhatbuf_r+0x12>
 8004ac6:	23f0      	movs	r3, #240	; 0xf0
 8004ac8:	9901      	ldr	r1, [sp, #4]
 8004aca:	021b      	lsls	r3, r3, #8
 8004acc:	4019      	ands	r1, r3
 8004ace:	4b05      	ldr	r3, [pc, #20]	; (8004ae4 <__swhatbuf_r+0x4c>)
 8004ad0:	18c9      	adds	r1, r1, r3
 8004ad2:	424b      	negs	r3, r1
 8004ad4:	4159      	adcs	r1, r3
 8004ad6:	6029      	str	r1, [r5, #0]
 8004ad8:	e7ed      	b.n	8004ab6 <__swhatbuf_r+0x1e>
 8004ada:	2340      	movs	r3, #64	; 0x40
 8004adc:	2000      	movs	r0, #0
 8004ade:	6023      	str	r3, [r4, #0]
 8004ae0:	b016      	add	sp, #88	; 0x58
 8004ae2:	bd70      	pop	{r4, r5, r6, pc}
 8004ae4:	ffffe000 	.word	0xffffe000

08004ae8 <__smakebuf_r>:
 8004ae8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004aea:	2602      	movs	r6, #2
 8004aec:	898b      	ldrh	r3, [r1, #12]
 8004aee:	0005      	movs	r5, r0
 8004af0:	000c      	movs	r4, r1
 8004af2:	4233      	tst	r3, r6
 8004af4:	d006      	beq.n	8004b04 <__smakebuf_r+0x1c>
 8004af6:	0023      	movs	r3, r4
 8004af8:	3347      	adds	r3, #71	; 0x47
 8004afa:	6023      	str	r3, [r4, #0]
 8004afc:	6123      	str	r3, [r4, #16]
 8004afe:	2301      	movs	r3, #1
 8004b00:	6163      	str	r3, [r4, #20]
 8004b02:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8004b04:	466a      	mov	r2, sp
 8004b06:	ab01      	add	r3, sp, #4
 8004b08:	f7ff ffc6 	bl	8004a98 <__swhatbuf_r>
 8004b0c:	9900      	ldr	r1, [sp, #0]
 8004b0e:	0007      	movs	r7, r0
 8004b10:	0028      	movs	r0, r5
 8004b12:	f000 f899 	bl	8004c48 <_malloc_r>
 8004b16:	2800      	cmp	r0, #0
 8004b18:	d108      	bne.n	8004b2c <__smakebuf_r+0x44>
 8004b1a:	220c      	movs	r2, #12
 8004b1c:	5ea3      	ldrsh	r3, [r4, r2]
 8004b1e:	059a      	lsls	r2, r3, #22
 8004b20:	d4ef      	bmi.n	8004b02 <__smakebuf_r+0x1a>
 8004b22:	2203      	movs	r2, #3
 8004b24:	4393      	bics	r3, r2
 8004b26:	431e      	orrs	r6, r3
 8004b28:	81a6      	strh	r6, [r4, #12]
 8004b2a:	e7e4      	b.n	8004af6 <__smakebuf_r+0xe>
 8004b2c:	4b0f      	ldr	r3, [pc, #60]	; (8004b6c <__smakebuf_r+0x84>)
 8004b2e:	62ab      	str	r3, [r5, #40]	; 0x28
 8004b30:	2380      	movs	r3, #128	; 0x80
 8004b32:	89a2      	ldrh	r2, [r4, #12]
 8004b34:	6020      	str	r0, [r4, #0]
 8004b36:	4313      	orrs	r3, r2
 8004b38:	81a3      	strh	r3, [r4, #12]
 8004b3a:	9b00      	ldr	r3, [sp, #0]
 8004b3c:	6120      	str	r0, [r4, #16]
 8004b3e:	6163      	str	r3, [r4, #20]
 8004b40:	9b01      	ldr	r3, [sp, #4]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d00d      	beq.n	8004b62 <__smakebuf_r+0x7a>
 8004b46:	0028      	movs	r0, r5
 8004b48:	230e      	movs	r3, #14
 8004b4a:	5ee1      	ldrsh	r1, [r4, r3]
 8004b4c:	f000 fc6c 	bl	8005428 <_isatty_r>
 8004b50:	2800      	cmp	r0, #0
 8004b52:	d006      	beq.n	8004b62 <__smakebuf_r+0x7a>
 8004b54:	2203      	movs	r2, #3
 8004b56:	89a3      	ldrh	r3, [r4, #12]
 8004b58:	4393      	bics	r3, r2
 8004b5a:	001a      	movs	r2, r3
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	81a3      	strh	r3, [r4, #12]
 8004b62:	89a0      	ldrh	r0, [r4, #12]
 8004b64:	4307      	orrs	r7, r0
 8004b66:	81a7      	strh	r7, [r4, #12]
 8004b68:	e7cb      	b.n	8004b02 <__smakebuf_r+0x1a>
 8004b6a:	46c0      	nop			; (mov r8, r8)
 8004b6c:	080048d5 	.word	0x080048d5

08004b70 <_free_r>:
 8004b70:	b570      	push	{r4, r5, r6, lr}
 8004b72:	0005      	movs	r5, r0
 8004b74:	2900      	cmp	r1, #0
 8004b76:	d010      	beq.n	8004b9a <_free_r+0x2a>
 8004b78:	1f0c      	subs	r4, r1, #4
 8004b7a:	6823      	ldr	r3, [r4, #0]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	da00      	bge.n	8004b82 <_free_r+0x12>
 8004b80:	18e4      	adds	r4, r4, r3
 8004b82:	0028      	movs	r0, r5
 8004b84:	f000 fc9e 	bl	80054c4 <__malloc_lock>
 8004b88:	4a1d      	ldr	r2, [pc, #116]	; (8004c00 <_free_r+0x90>)
 8004b8a:	6813      	ldr	r3, [r2, #0]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d105      	bne.n	8004b9c <_free_r+0x2c>
 8004b90:	6063      	str	r3, [r4, #4]
 8004b92:	6014      	str	r4, [r2, #0]
 8004b94:	0028      	movs	r0, r5
 8004b96:	f000 fc9d 	bl	80054d4 <__malloc_unlock>
 8004b9a:	bd70      	pop	{r4, r5, r6, pc}
 8004b9c:	42a3      	cmp	r3, r4
 8004b9e:	d908      	bls.n	8004bb2 <_free_r+0x42>
 8004ba0:	6821      	ldr	r1, [r4, #0]
 8004ba2:	1860      	adds	r0, r4, r1
 8004ba4:	4283      	cmp	r3, r0
 8004ba6:	d1f3      	bne.n	8004b90 <_free_r+0x20>
 8004ba8:	6818      	ldr	r0, [r3, #0]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	1841      	adds	r1, r0, r1
 8004bae:	6021      	str	r1, [r4, #0]
 8004bb0:	e7ee      	b.n	8004b90 <_free_r+0x20>
 8004bb2:	001a      	movs	r2, r3
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d001      	beq.n	8004bbe <_free_r+0x4e>
 8004bba:	42a3      	cmp	r3, r4
 8004bbc:	d9f9      	bls.n	8004bb2 <_free_r+0x42>
 8004bbe:	6811      	ldr	r1, [r2, #0]
 8004bc0:	1850      	adds	r0, r2, r1
 8004bc2:	42a0      	cmp	r0, r4
 8004bc4:	d10b      	bne.n	8004bde <_free_r+0x6e>
 8004bc6:	6820      	ldr	r0, [r4, #0]
 8004bc8:	1809      	adds	r1, r1, r0
 8004bca:	1850      	adds	r0, r2, r1
 8004bcc:	6011      	str	r1, [r2, #0]
 8004bce:	4283      	cmp	r3, r0
 8004bd0:	d1e0      	bne.n	8004b94 <_free_r+0x24>
 8004bd2:	6818      	ldr	r0, [r3, #0]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	1841      	adds	r1, r0, r1
 8004bd8:	6011      	str	r1, [r2, #0]
 8004bda:	6053      	str	r3, [r2, #4]
 8004bdc:	e7da      	b.n	8004b94 <_free_r+0x24>
 8004bde:	42a0      	cmp	r0, r4
 8004be0:	d902      	bls.n	8004be8 <_free_r+0x78>
 8004be2:	230c      	movs	r3, #12
 8004be4:	602b      	str	r3, [r5, #0]
 8004be6:	e7d5      	b.n	8004b94 <_free_r+0x24>
 8004be8:	6821      	ldr	r1, [r4, #0]
 8004bea:	1860      	adds	r0, r4, r1
 8004bec:	4283      	cmp	r3, r0
 8004bee:	d103      	bne.n	8004bf8 <_free_r+0x88>
 8004bf0:	6818      	ldr	r0, [r3, #0]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	1841      	adds	r1, r0, r1
 8004bf6:	6021      	str	r1, [r4, #0]
 8004bf8:	6063      	str	r3, [r4, #4]
 8004bfa:	6054      	str	r4, [r2, #4]
 8004bfc:	e7ca      	b.n	8004b94 <_free_r+0x24>
 8004bfe:	46c0      	nop			; (mov r8, r8)
 8004c00:	2000096c 	.word	0x2000096c

08004c04 <sbrk_aligned>:
 8004c04:	b570      	push	{r4, r5, r6, lr}
 8004c06:	4e0f      	ldr	r6, [pc, #60]	; (8004c44 <sbrk_aligned+0x40>)
 8004c08:	000d      	movs	r5, r1
 8004c0a:	6831      	ldr	r1, [r6, #0]
 8004c0c:	0004      	movs	r4, r0
 8004c0e:	2900      	cmp	r1, #0
 8004c10:	d102      	bne.n	8004c18 <sbrk_aligned+0x14>
 8004c12:	f000 fb73 	bl	80052fc <_sbrk_r>
 8004c16:	6030      	str	r0, [r6, #0]
 8004c18:	0029      	movs	r1, r5
 8004c1a:	0020      	movs	r0, r4
 8004c1c:	f000 fb6e 	bl	80052fc <_sbrk_r>
 8004c20:	1c43      	adds	r3, r0, #1
 8004c22:	d00a      	beq.n	8004c3a <sbrk_aligned+0x36>
 8004c24:	2303      	movs	r3, #3
 8004c26:	1cc5      	adds	r5, r0, #3
 8004c28:	439d      	bics	r5, r3
 8004c2a:	42a8      	cmp	r0, r5
 8004c2c:	d007      	beq.n	8004c3e <sbrk_aligned+0x3a>
 8004c2e:	1a29      	subs	r1, r5, r0
 8004c30:	0020      	movs	r0, r4
 8004c32:	f000 fb63 	bl	80052fc <_sbrk_r>
 8004c36:	1c43      	adds	r3, r0, #1
 8004c38:	d101      	bne.n	8004c3e <sbrk_aligned+0x3a>
 8004c3a:	2501      	movs	r5, #1
 8004c3c:	426d      	negs	r5, r5
 8004c3e:	0028      	movs	r0, r5
 8004c40:	bd70      	pop	{r4, r5, r6, pc}
 8004c42:	46c0      	nop			; (mov r8, r8)
 8004c44:	20000970 	.word	0x20000970

08004c48 <_malloc_r>:
 8004c48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c4a:	2203      	movs	r2, #3
 8004c4c:	1ccb      	adds	r3, r1, #3
 8004c4e:	4393      	bics	r3, r2
 8004c50:	3308      	adds	r3, #8
 8004c52:	0006      	movs	r6, r0
 8004c54:	001f      	movs	r7, r3
 8004c56:	2b0c      	cmp	r3, #12
 8004c58:	d232      	bcs.n	8004cc0 <_malloc_r+0x78>
 8004c5a:	270c      	movs	r7, #12
 8004c5c:	42b9      	cmp	r1, r7
 8004c5e:	d831      	bhi.n	8004cc4 <_malloc_r+0x7c>
 8004c60:	0030      	movs	r0, r6
 8004c62:	f000 fc2f 	bl	80054c4 <__malloc_lock>
 8004c66:	4d32      	ldr	r5, [pc, #200]	; (8004d30 <_malloc_r+0xe8>)
 8004c68:	682b      	ldr	r3, [r5, #0]
 8004c6a:	001c      	movs	r4, r3
 8004c6c:	2c00      	cmp	r4, #0
 8004c6e:	d12e      	bne.n	8004cce <_malloc_r+0x86>
 8004c70:	0039      	movs	r1, r7
 8004c72:	0030      	movs	r0, r6
 8004c74:	f7ff ffc6 	bl	8004c04 <sbrk_aligned>
 8004c78:	0004      	movs	r4, r0
 8004c7a:	1c43      	adds	r3, r0, #1
 8004c7c:	d11e      	bne.n	8004cbc <_malloc_r+0x74>
 8004c7e:	682c      	ldr	r4, [r5, #0]
 8004c80:	0025      	movs	r5, r4
 8004c82:	2d00      	cmp	r5, #0
 8004c84:	d14a      	bne.n	8004d1c <_malloc_r+0xd4>
 8004c86:	6823      	ldr	r3, [r4, #0]
 8004c88:	0029      	movs	r1, r5
 8004c8a:	18e3      	adds	r3, r4, r3
 8004c8c:	0030      	movs	r0, r6
 8004c8e:	9301      	str	r3, [sp, #4]
 8004c90:	f000 fb34 	bl	80052fc <_sbrk_r>
 8004c94:	9b01      	ldr	r3, [sp, #4]
 8004c96:	4283      	cmp	r3, r0
 8004c98:	d143      	bne.n	8004d22 <_malloc_r+0xda>
 8004c9a:	6823      	ldr	r3, [r4, #0]
 8004c9c:	3703      	adds	r7, #3
 8004c9e:	1aff      	subs	r7, r7, r3
 8004ca0:	2303      	movs	r3, #3
 8004ca2:	439f      	bics	r7, r3
 8004ca4:	3708      	adds	r7, #8
 8004ca6:	2f0c      	cmp	r7, #12
 8004ca8:	d200      	bcs.n	8004cac <_malloc_r+0x64>
 8004caa:	270c      	movs	r7, #12
 8004cac:	0039      	movs	r1, r7
 8004cae:	0030      	movs	r0, r6
 8004cb0:	f7ff ffa8 	bl	8004c04 <sbrk_aligned>
 8004cb4:	1c43      	adds	r3, r0, #1
 8004cb6:	d034      	beq.n	8004d22 <_malloc_r+0xda>
 8004cb8:	6823      	ldr	r3, [r4, #0]
 8004cba:	19df      	adds	r7, r3, r7
 8004cbc:	6027      	str	r7, [r4, #0]
 8004cbe:	e013      	b.n	8004ce8 <_malloc_r+0xa0>
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	dacb      	bge.n	8004c5c <_malloc_r+0x14>
 8004cc4:	230c      	movs	r3, #12
 8004cc6:	2500      	movs	r5, #0
 8004cc8:	6033      	str	r3, [r6, #0]
 8004cca:	0028      	movs	r0, r5
 8004ccc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004cce:	6822      	ldr	r2, [r4, #0]
 8004cd0:	1bd1      	subs	r1, r2, r7
 8004cd2:	d420      	bmi.n	8004d16 <_malloc_r+0xce>
 8004cd4:	290b      	cmp	r1, #11
 8004cd6:	d917      	bls.n	8004d08 <_malloc_r+0xc0>
 8004cd8:	19e2      	adds	r2, r4, r7
 8004cda:	6027      	str	r7, [r4, #0]
 8004cdc:	42a3      	cmp	r3, r4
 8004cde:	d111      	bne.n	8004d04 <_malloc_r+0xbc>
 8004ce0:	602a      	str	r2, [r5, #0]
 8004ce2:	6863      	ldr	r3, [r4, #4]
 8004ce4:	6011      	str	r1, [r2, #0]
 8004ce6:	6053      	str	r3, [r2, #4]
 8004ce8:	0030      	movs	r0, r6
 8004cea:	0025      	movs	r5, r4
 8004cec:	f000 fbf2 	bl	80054d4 <__malloc_unlock>
 8004cf0:	2207      	movs	r2, #7
 8004cf2:	350b      	adds	r5, #11
 8004cf4:	1d23      	adds	r3, r4, #4
 8004cf6:	4395      	bics	r5, r2
 8004cf8:	1aea      	subs	r2, r5, r3
 8004cfa:	429d      	cmp	r5, r3
 8004cfc:	d0e5      	beq.n	8004cca <_malloc_r+0x82>
 8004cfe:	1b5b      	subs	r3, r3, r5
 8004d00:	50a3      	str	r3, [r4, r2]
 8004d02:	e7e2      	b.n	8004cca <_malloc_r+0x82>
 8004d04:	605a      	str	r2, [r3, #4]
 8004d06:	e7ec      	b.n	8004ce2 <_malloc_r+0x9a>
 8004d08:	6862      	ldr	r2, [r4, #4]
 8004d0a:	42a3      	cmp	r3, r4
 8004d0c:	d101      	bne.n	8004d12 <_malloc_r+0xca>
 8004d0e:	602a      	str	r2, [r5, #0]
 8004d10:	e7ea      	b.n	8004ce8 <_malloc_r+0xa0>
 8004d12:	605a      	str	r2, [r3, #4]
 8004d14:	e7e8      	b.n	8004ce8 <_malloc_r+0xa0>
 8004d16:	0023      	movs	r3, r4
 8004d18:	6864      	ldr	r4, [r4, #4]
 8004d1a:	e7a7      	b.n	8004c6c <_malloc_r+0x24>
 8004d1c:	002c      	movs	r4, r5
 8004d1e:	686d      	ldr	r5, [r5, #4]
 8004d20:	e7af      	b.n	8004c82 <_malloc_r+0x3a>
 8004d22:	230c      	movs	r3, #12
 8004d24:	0030      	movs	r0, r6
 8004d26:	6033      	str	r3, [r6, #0]
 8004d28:	f000 fbd4 	bl	80054d4 <__malloc_unlock>
 8004d2c:	e7cd      	b.n	8004cca <_malloc_r+0x82>
 8004d2e:	46c0      	nop			; (mov r8, r8)
 8004d30:	2000096c 	.word	0x2000096c

08004d34 <__ssputs_r>:
 8004d34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d36:	688e      	ldr	r6, [r1, #8]
 8004d38:	b085      	sub	sp, #20
 8004d3a:	0007      	movs	r7, r0
 8004d3c:	000c      	movs	r4, r1
 8004d3e:	9203      	str	r2, [sp, #12]
 8004d40:	9301      	str	r3, [sp, #4]
 8004d42:	429e      	cmp	r6, r3
 8004d44:	d83c      	bhi.n	8004dc0 <__ssputs_r+0x8c>
 8004d46:	2390      	movs	r3, #144	; 0x90
 8004d48:	898a      	ldrh	r2, [r1, #12]
 8004d4a:	00db      	lsls	r3, r3, #3
 8004d4c:	421a      	tst	r2, r3
 8004d4e:	d034      	beq.n	8004dba <__ssputs_r+0x86>
 8004d50:	6909      	ldr	r1, [r1, #16]
 8004d52:	6823      	ldr	r3, [r4, #0]
 8004d54:	6960      	ldr	r0, [r4, #20]
 8004d56:	1a5b      	subs	r3, r3, r1
 8004d58:	9302      	str	r3, [sp, #8]
 8004d5a:	2303      	movs	r3, #3
 8004d5c:	4343      	muls	r3, r0
 8004d5e:	0fdd      	lsrs	r5, r3, #31
 8004d60:	18ed      	adds	r5, r5, r3
 8004d62:	9b01      	ldr	r3, [sp, #4]
 8004d64:	9802      	ldr	r0, [sp, #8]
 8004d66:	3301      	adds	r3, #1
 8004d68:	181b      	adds	r3, r3, r0
 8004d6a:	106d      	asrs	r5, r5, #1
 8004d6c:	42ab      	cmp	r3, r5
 8004d6e:	d900      	bls.n	8004d72 <__ssputs_r+0x3e>
 8004d70:	001d      	movs	r5, r3
 8004d72:	0553      	lsls	r3, r2, #21
 8004d74:	d532      	bpl.n	8004ddc <__ssputs_r+0xa8>
 8004d76:	0029      	movs	r1, r5
 8004d78:	0038      	movs	r0, r7
 8004d7a:	f7ff ff65 	bl	8004c48 <_malloc_r>
 8004d7e:	1e06      	subs	r6, r0, #0
 8004d80:	d109      	bne.n	8004d96 <__ssputs_r+0x62>
 8004d82:	230c      	movs	r3, #12
 8004d84:	603b      	str	r3, [r7, #0]
 8004d86:	2340      	movs	r3, #64	; 0x40
 8004d88:	2001      	movs	r0, #1
 8004d8a:	89a2      	ldrh	r2, [r4, #12]
 8004d8c:	4240      	negs	r0, r0
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	81a3      	strh	r3, [r4, #12]
 8004d92:	b005      	add	sp, #20
 8004d94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d96:	9a02      	ldr	r2, [sp, #8]
 8004d98:	6921      	ldr	r1, [r4, #16]
 8004d9a:	f000 fb76 	bl	800548a <memcpy>
 8004d9e:	89a3      	ldrh	r3, [r4, #12]
 8004da0:	4a14      	ldr	r2, [pc, #80]	; (8004df4 <__ssputs_r+0xc0>)
 8004da2:	401a      	ands	r2, r3
 8004da4:	2380      	movs	r3, #128	; 0x80
 8004da6:	4313      	orrs	r3, r2
 8004da8:	81a3      	strh	r3, [r4, #12]
 8004daa:	9b02      	ldr	r3, [sp, #8]
 8004dac:	6126      	str	r6, [r4, #16]
 8004dae:	18f6      	adds	r6, r6, r3
 8004db0:	6026      	str	r6, [r4, #0]
 8004db2:	6165      	str	r5, [r4, #20]
 8004db4:	9e01      	ldr	r6, [sp, #4]
 8004db6:	1aed      	subs	r5, r5, r3
 8004db8:	60a5      	str	r5, [r4, #8]
 8004dba:	9b01      	ldr	r3, [sp, #4]
 8004dbc:	429e      	cmp	r6, r3
 8004dbe:	d900      	bls.n	8004dc2 <__ssputs_r+0x8e>
 8004dc0:	9e01      	ldr	r6, [sp, #4]
 8004dc2:	0032      	movs	r2, r6
 8004dc4:	9903      	ldr	r1, [sp, #12]
 8004dc6:	6820      	ldr	r0, [r4, #0]
 8004dc8:	f000 fb68 	bl	800549c <memmove>
 8004dcc:	68a3      	ldr	r3, [r4, #8]
 8004dce:	2000      	movs	r0, #0
 8004dd0:	1b9b      	subs	r3, r3, r6
 8004dd2:	60a3      	str	r3, [r4, #8]
 8004dd4:	6823      	ldr	r3, [r4, #0]
 8004dd6:	199e      	adds	r6, r3, r6
 8004dd8:	6026      	str	r6, [r4, #0]
 8004dda:	e7da      	b.n	8004d92 <__ssputs_r+0x5e>
 8004ddc:	002a      	movs	r2, r5
 8004dde:	0038      	movs	r0, r7
 8004de0:	f000 fb80 	bl	80054e4 <_realloc_r>
 8004de4:	1e06      	subs	r6, r0, #0
 8004de6:	d1e0      	bne.n	8004daa <__ssputs_r+0x76>
 8004de8:	0038      	movs	r0, r7
 8004dea:	6921      	ldr	r1, [r4, #16]
 8004dec:	f7ff fec0 	bl	8004b70 <_free_r>
 8004df0:	e7c7      	b.n	8004d82 <__ssputs_r+0x4e>
 8004df2:	46c0      	nop			; (mov r8, r8)
 8004df4:	fffffb7f 	.word	0xfffffb7f

08004df8 <_svfiprintf_r>:
 8004df8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004dfa:	b0a1      	sub	sp, #132	; 0x84
 8004dfc:	9003      	str	r0, [sp, #12]
 8004dfe:	001d      	movs	r5, r3
 8004e00:	898b      	ldrh	r3, [r1, #12]
 8004e02:	000f      	movs	r7, r1
 8004e04:	0016      	movs	r6, r2
 8004e06:	061b      	lsls	r3, r3, #24
 8004e08:	d511      	bpl.n	8004e2e <_svfiprintf_r+0x36>
 8004e0a:	690b      	ldr	r3, [r1, #16]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d10e      	bne.n	8004e2e <_svfiprintf_r+0x36>
 8004e10:	2140      	movs	r1, #64	; 0x40
 8004e12:	f7ff ff19 	bl	8004c48 <_malloc_r>
 8004e16:	6038      	str	r0, [r7, #0]
 8004e18:	6138      	str	r0, [r7, #16]
 8004e1a:	2800      	cmp	r0, #0
 8004e1c:	d105      	bne.n	8004e2a <_svfiprintf_r+0x32>
 8004e1e:	230c      	movs	r3, #12
 8004e20:	9a03      	ldr	r2, [sp, #12]
 8004e22:	3801      	subs	r0, #1
 8004e24:	6013      	str	r3, [r2, #0]
 8004e26:	b021      	add	sp, #132	; 0x84
 8004e28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e2a:	2340      	movs	r3, #64	; 0x40
 8004e2c:	617b      	str	r3, [r7, #20]
 8004e2e:	2300      	movs	r3, #0
 8004e30:	ac08      	add	r4, sp, #32
 8004e32:	6163      	str	r3, [r4, #20]
 8004e34:	3320      	adds	r3, #32
 8004e36:	7663      	strb	r3, [r4, #25]
 8004e38:	3310      	adds	r3, #16
 8004e3a:	76a3      	strb	r3, [r4, #26]
 8004e3c:	9507      	str	r5, [sp, #28]
 8004e3e:	0035      	movs	r5, r6
 8004e40:	782b      	ldrb	r3, [r5, #0]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d001      	beq.n	8004e4a <_svfiprintf_r+0x52>
 8004e46:	2b25      	cmp	r3, #37	; 0x25
 8004e48:	d147      	bne.n	8004eda <_svfiprintf_r+0xe2>
 8004e4a:	1bab      	subs	r3, r5, r6
 8004e4c:	9305      	str	r3, [sp, #20]
 8004e4e:	42b5      	cmp	r5, r6
 8004e50:	d00c      	beq.n	8004e6c <_svfiprintf_r+0x74>
 8004e52:	0032      	movs	r2, r6
 8004e54:	0039      	movs	r1, r7
 8004e56:	9803      	ldr	r0, [sp, #12]
 8004e58:	f7ff ff6c 	bl	8004d34 <__ssputs_r>
 8004e5c:	1c43      	adds	r3, r0, #1
 8004e5e:	d100      	bne.n	8004e62 <_svfiprintf_r+0x6a>
 8004e60:	e0ae      	b.n	8004fc0 <_svfiprintf_r+0x1c8>
 8004e62:	6962      	ldr	r2, [r4, #20]
 8004e64:	9b05      	ldr	r3, [sp, #20]
 8004e66:	4694      	mov	ip, r2
 8004e68:	4463      	add	r3, ip
 8004e6a:	6163      	str	r3, [r4, #20]
 8004e6c:	782b      	ldrb	r3, [r5, #0]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d100      	bne.n	8004e74 <_svfiprintf_r+0x7c>
 8004e72:	e0a5      	b.n	8004fc0 <_svfiprintf_r+0x1c8>
 8004e74:	2201      	movs	r2, #1
 8004e76:	2300      	movs	r3, #0
 8004e78:	4252      	negs	r2, r2
 8004e7a:	6062      	str	r2, [r4, #4]
 8004e7c:	a904      	add	r1, sp, #16
 8004e7e:	3254      	adds	r2, #84	; 0x54
 8004e80:	1852      	adds	r2, r2, r1
 8004e82:	1c6e      	adds	r6, r5, #1
 8004e84:	6023      	str	r3, [r4, #0]
 8004e86:	60e3      	str	r3, [r4, #12]
 8004e88:	60a3      	str	r3, [r4, #8]
 8004e8a:	7013      	strb	r3, [r2, #0]
 8004e8c:	65a3      	str	r3, [r4, #88]	; 0x58
 8004e8e:	2205      	movs	r2, #5
 8004e90:	7831      	ldrb	r1, [r6, #0]
 8004e92:	4854      	ldr	r0, [pc, #336]	; (8004fe4 <_svfiprintf_r+0x1ec>)
 8004e94:	f000 faee 	bl	8005474 <memchr>
 8004e98:	1c75      	adds	r5, r6, #1
 8004e9a:	2800      	cmp	r0, #0
 8004e9c:	d11f      	bne.n	8004ede <_svfiprintf_r+0xe6>
 8004e9e:	6822      	ldr	r2, [r4, #0]
 8004ea0:	06d3      	lsls	r3, r2, #27
 8004ea2:	d504      	bpl.n	8004eae <_svfiprintf_r+0xb6>
 8004ea4:	2353      	movs	r3, #83	; 0x53
 8004ea6:	a904      	add	r1, sp, #16
 8004ea8:	185b      	adds	r3, r3, r1
 8004eaa:	2120      	movs	r1, #32
 8004eac:	7019      	strb	r1, [r3, #0]
 8004eae:	0713      	lsls	r3, r2, #28
 8004eb0:	d504      	bpl.n	8004ebc <_svfiprintf_r+0xc4>
 8004eb2:	2353      	movs	r3, #83	; 0x53
 8004eb4:	a904      	add	r1, sp, #16
 8004eb6:	185b      	adds	r3, r3, r1
 8004eb8:	212b      	movs	r1, #43	; 0x2b
 8004eba:	7019      	strb	r1, [r3, #0]
 8004ebc:	7833      	ldrb	r3, [r6, #0]
 8004ebe:	2b2a      	cmp	r3, #42	; 0x2a
 8004ec0:	d016      	beq.n	8004ef0 <_svfiprintf_r+0xf8>
 8004ec2:	0035      	movs	r5, r6
 8004ec4:	2100      	movs	r1, #0
 8004ec6:	200a      	movs	r0, #10
 8004ec8:	68e3      	ldr	r3, [r4, #12]
 8004eca:	782a      	ldrb	r2, [r5, #0]
 8004ecc:	1c6e      	adds	r6, r5, #1
 8004ece:	3a30      	subs	r2, #48	; 0x30
 8004ed0:	2a09      	cmp	r2, #9
 8004ed2:	d94e      	bls.n	8004f72 <_svfiprintf_r+0x17a>
 8004ed4:	2900      	cmp	r1, #0
 8004ed6:	d111      	bne.n	8004efc <_svfiprintf_r+0x104>
 8004ed8:	e017      	b.n	8004f0a <_svfiprintf_r+0x112>
 8004eda:	3501      	adds	r5, #1
 8004edc:	e7b0      	b.n	8004e40 <_svfiprintf_r+0x48>
 8004ede:	4b41      	ldr	r3, [pc, #260]	; (8004fe4 <_svfiprintf_r+0x1ec>)
 8004ee0:	6822      	ldr	r2, [r4, #0]
 8004ee2:	1ac0      	subs	r0, r0, r3
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	4083      	lsls	r3, r0
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	002e      	movs	r6, r5
 8004eec:	6023      	str	r3, [r4, #0]
 8004eee:	e7ce      	b.n	8004e8e <_svfiprintf_r+0x96>
 8004ef0:	9b07      	ldr	r3, [sp, #28]
 8004ef2:	1d19      	adds	r1, r3, #4
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	9107      	str	r1, [sp, #28]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	db01      	blt.n	8004f00 <_svfiprintf_r+0x108>
 8004efc:	930b      	str	r3, [sp, #44]	; 0x2c
 8004efe:	e004      	b.n	8004f0a <_svfiprintf_r+0x112>
 8004f00:	425b      	negs	r3, r3
 8004f02:	60e3      	str	r3, [r4, #12]
 8004f04:	2302      	movs	r3, #2
 8004f06:	4313      	orrs	r3, r2
 8004f08:	6023      	str	r3, [r4, #0]
 8004f0a:	782b      	ldrb	r3, [r5, #0]
 8004f0c:	2b2e      	cmp	r3, #46	; 0x2e
 8004f0e:	d10a      	bne.n	8004f26 <_svfiprintf_r+0x12e>
 8004f10:	786b      	ldrb	r3, [r5, #1]
 8004f12:	2b2a      	cmp	r3, #42	; 0x2a
 8004f14:	d135      	bne.n	8004f82 <_svfiprintf_r+0x18a>
 8004f16:	9b07      	ldr	r3, [sp, #28]
 8004f18:	3502      	adds	r5, #2
 8004f1a:	1d1a      	adds	r2, r3, #4
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	9207      	str	r2, [sp, #28]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	db2b      	blt.n	8004f7c <_svfiprintf_r+0x184>
 8004f24:	9309      	str	r3, [sp, #36]	; 0x24
 8004f26:	4e30      	ldr	r6, [pc, #192]	; (8004fe8 <_svfiprintf_r+0x1f0>)
 8004f28:	2203      	movs	r2, #3
 8004f2a:	0030      	movs	r0, r6
 8004f2c:	7829      	ldrb	r1, [r5, #0]
 8004f2e:	f000 faa1 	bl	8005474 <memchr>
 8004f32:	2800      	cmp	r0, #0
 8004f34:	d006      	beq.n	8004f44 <_svfiprintf_r+0x14c>
 8004f36:	2340      	movs	r3, #64	; 0x40
 8004f38:	1b80      	subs	r0, r0, r6
 8004f3a:	4083      	lsls	r3, r0
 8004f3c:	6822      	ldr	r2, [r4, #0]
 8004f3e:	3501      	adds	r5, #1
 8004f40:	4313      	orrs	r3, r2
 8004f42:	6023      	str	r3, [r4, #0]
 8004f44:	7829      	ldrb	r1, [r5, #0]
 8004f46:	2206      	movs	r2, #6
 8004f48:	4828      	ldr	r0, [pc, #160]	; (8004fec <_svfiprintf_r+0x1f4>)
 8004f4a:	1c6e      	adds	r6, r5, #1
 8004f4c:	7621      	strb	r1, [r4, #24]
 8004f4e:	f000 fa91 	bl	8005474 <memchr>
 8004f52:	2800      	cmp	r0, #0
 8004f54:	d03c      	beq.n	8004fd0 <_svfiprintf_r+0x1d8>
 8004f56:	4b26      	ldr	r3, [pc, #152]	; (8004ff0 <_svfiprintf_r+0x1f8>)
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d125      	bne.n	8004fa8 <_svfiprintf_r+0x1b0>
 8004f5c:	2207      	movs	r2, #7
 8004f5e:	9b07      	ldr	r3, [sp, #28]
 8004f60:	3307      	adds	r3, #7
 8004f62:	4393      	bics	r3, r2
 8004f64:	3308      	adds	r3, #8
 8004f66:	9307      	str	r3, [sp, #28]
 8004f68:	6963      	ldr	r3, [r4, #20]
 8004f6a:	9a04      	ldr	r2, [sp, #16]
 8004f6c:	189b      	adds	r3, r3, r2
 8004f6e:	6163      	str	r3, [r4, #20]
 8004f70:	e765      	b.n	8004e3e <_svfiprintf_r+0x46>
 8004f72:	4343      	muls	r3, r0
 8004f74:	0035      	movs	r5, r6
 8004f76:	2101      	movs	r1, #1
 8004f78:	189b      	adds	r3, r3, r2
 8004f7a:	e7a6      	b.n	8004eca <_svfiprintf_r+0xd2>
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	425b      	negs	r3, r3
 8004f80:	e7d0      	b.n	8004f24 <_svfiprintf_r+0x12c>
 8004f82:	2300      	movs	r3, #0
 8004f84:	200a      	movs	r0, #10
 8004f86:	001a      	movs	r2, r3
 8004f88:	3501      	adds	r5, #1
 8004f8a:	6063      	str	r3, [r4, #4]
 8004f8c:	7829      	ldrb	r1, [r5, #0]
 8004f8e:	1c6e      	adds	r6, r5, #1
 8004f90:	3930      	subs	r1, #48	; 0x30
 8004f92:	2909      	cmp	r1, #9
 8004f94:	d903      	bls.n	8004f9e <_svfiprintf_r+0x1a6>
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d0c5      	beq.n	8004f26 <_svfiprintf_r+0x12e>
 8004f9a:	9209      	str	r2, [sp, #36]	; 0x24
 8004f9c:	e7c3      	b.n	8004f26 <_svfiprintf_r+0x12e>
 8004f9e:	4342      	muls	r2, r0
 8004fa0:	0035      	movs	r5, r6
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	1852      	adds	r2, r2, r1
 8004fa6:	e7f1      	b.n	8004f8c <_svfiprintf_r+0x194>
 8004fa8:	ab07      	add	r3, sp, #28
 8004faa:	9300      	str	r3, [sp, #0]
 8004fac:	003a      	movs	r2, r7
 8004fae:	0021      	movs	r1, r4
 8004fb0:	4b10      	ldr	r3, [pc, #64]	; (8004ff4 <_svfiprintf_r+0x1fc>)
 8004fb2:	9803      	ldr	r0, [sp, #12]
 8004fb4:	e000      	b.n	8004fb8 <_svfiprintf_r+0x1c0>
 8004fb6:	bf00      	nop
 8004fb8:	9004      	str	r0, [sp, #16]
 8004fba:	9b04      	ldr	r3, [sp, #16]
 8004fbc:	3301      	adds	r3, #1
 8004fbe:	d1d3      	bne.n	8004f68 <_svfiprintf_r+0x170>
 8004fc0:	89bb      	ldrh	r3, [r7, #12]
 8004fc2:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004fc4:	065b      	lsls	r3, r3, #25
 8004fc6:	d400      	bmi.n	8004fca <_svfiprintf_r+0x1d2>
 8004fc8:	e72d      	b.n	8004e26 <_svfiprintf_r+0x2e>
 8004fca:	2001      	movs	r0, #1
 8004fcc:	4240      	negs	r0, r0
 8004fce:	e72a      	b.n	8004e26 <_svfiprintf_r+0x2e>
 8004fd0:	ab07      	add	r3, sp, #28
 8004fd2:	9300      	str	r3, [sp, #0]
 8004fd4:	003a      	movs	r2, r7
 8004fd6:	0021      	movs	r1, r4
 8004fd8:	4b06      	ldr	r3, [pc, #24]	; (8004ff4 <_svfiprintf_r+0x1fc>)
 8004fda:	9803      	ldr	r0, [sp, #12]
 8004fdc:	f000 f87c 	bl	80050d8 <_printf_i>
 8004fe0:	e7ea      	b.n	8004fb8 <_svfiprintf_r+0x1c0>
 8004fe2:	46c0      	nop			; (mov r8, r8)
 8004fe4:	08005904 	.word	0x08005904
 8004fe8:	0800590a 	.word	0x0800590a
 8004fec:	0800590e 	.word	0x0800590e
 8004ff0:	00000000 	.word	0x00000000
 8004ff4:	08004d35 	.word	0x08004d35

08004ff8 <_printf_common>:
 8004ff8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004ffa:	0015      	movs	r5, r2
 8004ffc:	9301      	str	r3, [sp, #4]
 8004ffe:	688a      	ldr	r2, [r1, #8]
 8005000:	690b      	ldr	r3, [r1, #16]
 8005002:	000c      	movs	r4, r1
 8005004:	9000      	str	r0, [sp, #0]
 8005006:	4293      	cmp	r3, r2
 8005008:	da00      	bge.n	800500c <_printf_common+0x14>
 800500a:	0013      	movs	r3, r2
 800500c:	0022      	movs	r2, r4
 800500e:	602b      	str	r3, [r5, #0]
 8005010:	3243      	adds	r2, #67	; 0x43
 8005012:	7812      	ldrb	r2, [r2, #0]
 8005014:	2a00      	cmp	r2, #0
 8005016:	d001      	beq.n	800501c <_printf_common+0x24>
 8005018:	3301      	adds	r3, #1
 800501a:	602b      	str	r3, [r5, #0]
 800501c:	6823      	ldr	r3, [r4, #0]
 800501e:	069b      	lsls	r3, r3, #26
 8005020:	d502      	bpl.n	8005028 <_printf_common+0x30>
 8005022:	682b      	ldr	r3, [r5, #0]
 8005024:	3302      	adds	r3, #2
 8005026:	602b      	str	r3, [r5, #0]
 8005028:	6822      	ldr	r2, [r4, #0]
 800502a:	2306      	movs	r3, #6
 800502c:	0017      	movs	r7, r2
 800502e:	401f      	ands	r7, r3
 8005030:	421a      	tst	r2, r3
 8005032:	d027      	beq.n	8005084 <_printf_common+0x8c>
 8005034:	0023      	movs	r3, r4
 8005036:	3343      	adds	r3, #67	; 0x43
 8005038:	781b      	ldrb	r3, [r3, #0]
 800503a:	1e5a      	subs	r2, r3, #1
 800503c:	4193      	sbcs	r3, r2
 800503e:	6822      	ldr	r2, [r4, #0]
 8005040:	0692      	lsls	r2, r2, #26
 8005042:	d430      	bmi.n	80050a6 <_printf_common+0xae>
 8005044:	0022      	movs	r2, r4
 8005046:	9901      	ldr	r1, [sp, #4]
 8005048:	9800      	ldr	r0, [sp, #0]
 800504a:	9e08      	ldr	r6, [sp, #32]
 800504c:	3243      	adds	r2, #67	; 0x43
 800504e:	47b0      	blx	r6
 8005050:	1c43      	adds	r3, r0, #1
 8005052:	d025      	beq.n	80050a0 <_printf_common+0xa8>
 8005054:	2306      	movs	r3, #6
 8005056:	6820      	ldr	r0, [r4, #0]
 8005058:	682a      	ldr	r2, [r5, #0]
 800505a:	68e1      	ldr	r1, [r4, #12]
 800505c:	2500      	movs	r5, #0
 800505e:	4003      	ands	r3, r0
 8005060:	2b04      	cmp	r3, #4
 8005062:	d103      	bne.n	800506c <_printf_common+0x74>
 8005064:	1a8d      	subs	r5, r1, r2
 8005066:	43eb      	mvns	r3, r5
 8005068:	17db      	asrs	r3, r3, #31
 800506a:	401d      	ands	r5, r3
 800506c:	68a3      	ldr	r3, [r4, #8]
 800506e:	6922      	ldr	r2, [r4, #16]
 8005070:	4293      	cmp	r3, r2
 8005072:	dd01      	ble.n	8005078 <_printf_common+0x80>
 8005074:	1a9b      	subs	r3, r3, r2
 8005076:	18ed      	adds	r5, r5, r3
 8005078:	2700      	movs	r7, #0
 800507a:	42bd      	cmp	r5, r7
 800507c:	d120      	bne.n	80050c0 <_printf_common+0xc8>
 800507e:	2000      	movs	r0, #0
 8005080:	e010      	b.n	80050a4 <_printf_common+0xac>
 8005082:	3701      	adds	r7, #1
 8005084:	68e3      	ldr	r3, [r4, #12]
 8005086:	682a      	ldr	r2, [r5, #0]
 8005088:	1a9b      	subs	r3, r3, r2
 800508a:	42bb      	cmp	r3, r7
 800508c:	ddd2      	ble.n	8005034 <_printf_common+0x3c>
 800508e:	0022      	movs	r2, r4
 8005090:	2301      	movs	r3, #1
 8005092:	9901      	ldr	r1, [sp, #4]
 8005094:	9800      	ldr	r0, [sp, #0]
 8005096:	9e08      	ldr	r6, [sp, #32]
 8005098:	3219      	adds	r2, #25
 800509a:	47b0      	blx	r6
 800509c:	1c43      	adds	r3, r0, #1
 800509e:	d1f0      	bne.n	8005082 <_printf_common+0x8a>
 80050a0:	2001      	movs	r0, #1
 80050a2:	4240      	negs	r0, r0
 80050a4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80050a6:	2030      	movs	r0, #48	; 0x30
 80050a8:	18e1      	adds	r1, r4, r3
 80050aa:	3143      	adds	r1, #67	; 0x43
 80050ac:	7008      	strb	r0, [r1, #0]
 80050ae:	0021      	movs	r1, r4
 80050b0:	1c5a      	adds	r2, r3, #1
 80050b2:	3145      	adds	r1, #69	; 0x45
 80050b4:	7809      	ldrb	r1, [r1, #0]
 80050b6:	18a2      	adds	r2, r4, r2
 80050b8:	3243      	adds	r2, #67	; 0x43
 80050ba:	3302      	adds	r3, #2
 80050bc:	7011      	strb	r1, [r2, #0]
 80050be:	e7c1      	b.n	8005044 <_printf_common+0x4c>
 80050c0:	0022      	movs	r2, r4
 80050c2:	2301      	movs	r3, #1
 80050c4:	9901      	ldr	r1, [sp, #4]
 80050c6:	9800      	ldr	r0, [sp, #0]
 80050c8:	9e08      	ldr	r6, [sp, #32]
 80050ca:	321a      	adds	r2, #26
 80050cc:	47b0      	blx	r6
 80050ce:	1c43      	adds	r3, r0, #1
 80050d0:	d0e6      	beq.n	80050a0 <_printf_common+0xa8>
 80050d2:	3701      	adds	r7, #1
 80050d4:	e7d1      	b.n	800507a <_printf_common+0x82>
	...

080050d8 <_printf_i>:
 80050d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050da:	b08b      	sub	sp, #44	; 0x2c
 80050dc:	9206      	str	r2, [sp, #24]
 80050de:	000a      	movs	r2, r1
 80050e0:	3243      	adds	r2, #67	; 0x43
 80050e2:	9307      	str	r3, [sp, #28]
 80050e4:	9005      	str	r0, [sp, #20]
 80050e6:	9204      	str	r2, [sp, #16]
 80050e8:	7e0a      	ldrb	r2, [r1, #24]
 80050ea:	000c      	movs	r4, r1
 80050ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80050ee:	2a78      	cmp	r2, #120	; 0x78
 80050f0:	d807      	bhi.n	8005102 <_printf_i+0x2a>
 80050f2:	2a62      	cmp	r2, #98	; 0x62
 80050f4:	d809      	bhi.n	800510a <_printf_i+0x32>
 80050f6:	2a00      	cmp	r2, #0
 80050f8:	d100      	bne.n	80050fc <_printf_i+0x24>
 80050fa:	e0c1      	b.n	8005280 <_printf_i+0x1a8>
 80050fc:	2a58      	cmp	r2, #88	; 0x58
 80050fe:	d100      	bne.n	8005102 <_printf_i+0x2a>
 8005100:	e08c      	b.n	800521c <_printf_i+0x144>
 8005102:	0026      	movs	r6, r4
 8005104:	3642      	adds	r6, #66	; 0x42
 8005106:	7032      	strb	r2, [r6, #0]
 8005108:	e022      	b.n	8005150 <_printf_i+0x78>
 800510a:	0010      	movs	r0, r2
 800510c:	3863      	subs	r0, #99	; 0x63
 800510e:	2815      	cmp	r0, #21
 8005110:	d8f7      	bhi.n	8005102 <_printf_i+0x2a>
 8005112:	f7fa fff9 	bl	8000108 <__gnu_thumb1_case_shi>
 8005116:	0016      	.short	0x0016
 8005118:	fff6001f 	.word	0xfff6001f
 800511c:	fff6fff6 	.word	0xfff6fff6
 8005120:	001ffff6 	.word	0x001ffff6
 8005124:	fff6fff6 	.word	0xfff6fff6
 8005128:	fff6fff6 	.word	0xfff6fff6
 800512c:	003600a8 	.word	0x003600a8
 8005130:	fff6009a 	.word	0xfff6009a
 8005134:	00b9fff6 	.word	0x00b9fff6
 8005138:	0036fff6 	.word	0x0036fff6
 800513c:	fff6fff6 	.word	0xfff6fff6
 8005140:	009e      	.short	0x009e
 8005142:	0026      	movs	r6, r4
 8005144:	681a      	ldr	r2, [r3, #0]
 8005146:	3642      	adds	r6, #66	; 0x42
 8005148:	1d11      	adds	r1, r2, #4
 800514a:	6019      	str	r1, [r3, #0]
 800514c:	6813      	ldr	r3, [r2, #0]
 800514e:	7033      	strb	r3, [r6, #0]
 8005150:	2301      	movs	r3, #1
 8005152:	e0a7      	b.n	80052a4 <_printf_i+0x1cc>
 8005154:	6808      	ldr	r0, [r1, #0]
 8005156:	6819      	ldr	r1, [r3, #0]
 8005158:	1d0a      	adds	r2, r1, #4
 800515a:	0605      	lsls	r5, r0, #24
 800515c:	d50b      	bpl.n	8005176 <_printf_i+0x9e>
 800515e:	680d      	ldr	r5, [r1, #0]
 8005160:	601a      	str	r2, [r3, #0]
 8005162:	2d00      	cmp	r5, #0
 8005164:	da03      	bge.n	800516e <_printf_i+0x96>
 8005166:	232d      	movs	r3, #45	; 0x2d
 8005168:	9a04      	ldr	r2, [sp, #16]
 800516a:	426d      	negs	r5, r5
 800516c:	7013      	strb	r3, [r2, #0]
 800516e:	4b61      	ldr	r3, [pc, #388]	; (80052f4 <_printf_i+0x21c>)
 8005170:	270a      	movs	r7, #10
 8005172:	9303      	str	r3, [sp, #12]
 8005174:	e01b      	b.n	80051ae <_printf_i+0xd6>
 8005176:	680d      	ldr	r5, [r1, #0]
 8005178:	601a      	str	r2, [r3, #0]
 800517a:	0641      	lsls	r1, r0, #25
 800517c:	d5f1      	bpl.n	8005162 <_printf_i+0x8a>
 800517e:	b22d      	sxth	r5, r5
 8005180:	e7ef      	b.n	8005162 <_printf_i+0x8a>
 8005182:	680d      	ldr	r5, [r1, #0]
 8005184:	6819      	ldr	r1, [r3, #0]
 8005186:	1d08      	adds	r0, r1, #4
 8005188:	6018      	str	r0, [r3, #0]
 800518a:	062e      	lsls	r6, r5, #24
 800518c:	d501      	bpl.n	8005192 <_printf_i+0xba>
 800518e:	680d      	ldr	r5, [r1, #0]
 8005190:	e003      	b.n	800519a <_printf_i+0xc2>
 8005192:	066d      	lsls	r5, r5, #25
 8005194:	d5fb      	bpl.n	800518e <_printf_i+0xb6>
 8005196:	680d      	ldr	r5, [r1, #0]
 8005198:	b2ad      	uxth	r5, r5
 800519a:	4b56      	ldr	r3, [pc, #344]	; (80052f4 <_printf_i+0x21c>)
 800519c:	2708      	movs	r7, #8
 800519e:	9303      	str	r3, [sp, #12]
 80051a0:	2a6f      	cmp	r2, #111	; 0x6f
 80051a2:	d000      	beq.n	80051a6 <_printf_i+0xce>
 80051a4:	3702      	adds	r7, #2
 80051a6:	0023      	movs	r3, r4
 80051a8:	2200      	movs	r2, #0
 80051aa:	3343      	adds	r3, #67	; 0x43
 80051ac:	701a      	strb	r2, [r3, #0]
 80051ae:	6863      	ldr	r3, [r4, #4]
 80051b0:	60a3      	str	r3, [r4, #8]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	db03      	blt.n	80051be <_printf_i+0xe6>
 80051b6:	2204      	movs	r2, #4
 80051b8:	6821      	ldr	r1, [r4, #0]
 80051ba:	4391      	bics	r1, r2
 80051bc:	6021      	str	r1, [r4, #0]
 80051be:	2d00      	cmp	r5, #0
 80051c0:	d102      	bne.n	80051c8 <_printf_i+0xf0>
 80051c2:	9e04      	ldr	r6, [sp, #16]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d00c      	beq.n	80051e2 <_printf_i+0x10a>
 80051c8:	9e04      	ldr	r6, [sp, #16]
 80051ca:	0028      	movs	r0, r5
 80051cc:	0039      	movs	r1, r7
 80051ce:	f7fb f82b 	bl	8000228 <__aeabi_uidivmod>
 80051d2:	9b03      	ldr	r3, [sp, #12]
 80051d4:	3e01      	subs	r6, #1
 80051d6:	5c5b      	ldrb	r3, [r3, r1]
 80051d8:	7033      	strb	r3, [r6, #0]
 80051da:	002b      	movs	r3, r5
 80051dc:	0005      	movs	r5, r0
 80051de:	429f      	cmp	r7, r3
 80051e0:	d9f3      	bls.n	80051ca <_printf_i+0xf2>
 80051e2:	2f08      	cmp	r7, #8
 80051e4:	d109      	bne.n	80051fa <_printf_i+0x122>
 80051e6:	6823      	ldr	r3, [r4, #0]
 80051e8:	07db      	lsls	r3, r3, #31
 80051ea:	d506      	bpl.n	80051fa <_printf_i+0x122>
 80051ec:	6863      	ldr	r3, [r4, #4]
 80051ee:	6922      	ldr	r2, [r4, #16]
 80051f0:	4293      	cmp	r3, r2
 80051f2:	dc02      	bgt.n	80051fa <_printf_i+0x122>
 80051f4:	2330      	movs	r3, #48	; 0x30
 80051f6:	3e01      	subs	r6, #1
 80051f8:	7033      	strb	r3, [r6, #0]
 80051fa:	9b04      	ldr	r3, [sp, #16]
 80051fc:	1b9b      	subs	r3, r3, r6
 80051fe:	6123      	str	r3, [r4, #16]
 8005200:	9b07      	ldr	r3, [sp, #28]
 8005202:	0021      	movs	r1, r4
 8005204:	9300      	str	r3, [sp, #0]
 8005206:	9805      	ldr	r0, [sp, #20]
 8005208:	9b06      	ldr	r3, [sp, #24]
 800520a:	aa09      	add	r2, sp, #36	; 0x24
 800520c:	f7ff fef4 	bl	8004ff8 <_printf_common>
 8005210:	1c43      	adds	r3, r0, #1
 8005212:	d14c      	bne.n	80052ae <_printf_i+0x1d6>
 8005214:	2001      	movs	r0, #1
 8005216:	4240      	negs	r0, r0
 8005218:	b00b      	add	sp, #44	; 0x2c
 800521a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800521c:	3145      	adds	r1, #69	; 0x45
 800521e:	700a      	strb	r2, [r1, #0]
 8005220:	4a34      	ldr	r2, [pc, #208]	; (80052f4 <_printf_i+0x21c>)
 8005222:	9203      	str	r2, [sp, #12]
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	6821      	ldr	r1, [r4, #0]
 8005228:	ca20      	ldmia	r2!, {r5}
 800522a:	601a      	str	r2, [r3, #0]
 800522c:	0608      	lsls	r0, r1, #24
 800522e:	d516      	bpl.n	800525e <_printf_i+0x186>
 8005230:	07cb      	lsls	r3, r1, #31
 8005232:	d502      	bpl.n	800523a <_printf_i+0x162>
 8005234:	2320      	movs	r3, #32
 8005236:	4319      	orrs	r1, r3
 8005238:	6021      	str	r1, [r4, #0]
 800523a:	2710      	movs	r7, #16
 800523c:	2d00      	cmp	r5, #0
 800523e:	d1b2      	bne.n	80051a6 <_printf_i+0xce>
 8005240:	2320      	movs	r3, #32
 8005242:	6822      	ldr	r2, [r4, #0]
 8005244:	439a      	bics	r2, r3
 8005246:	6022      	str	r2, [r4, #0]
 8005248:	e7ad      	b.n	80051a6 <_printf_i+0xce>
 800524a:	2220      	movs	r2, #32
 800524c:	6809      	ldr	r1, [r1, #0]
 800524e:	430a      	orrs	r2, r1
 8005250:	6022      	str	r2, [r4, #0]
 8005252:	0022      	movs	r2, r4
 8005254:	2178      	movs	r1, #120	; 0x78
 8005256:	3245      	adds	r2, #69	; 0x45
 8005258:	7011      	strb	r1, [r2, #0]
 800525a:	4a27      	ldr	r2, [pc, #156]	; (80052f8 <_printf_i+0x220>)
 800525c:	e7e1      	b.n	8005222 <_printf_i+0x14a>
 800525e:	0648      	lsls	r0, r1, #25
 8005260:	d5e6      	bpl.n	8005230 <_printf_i+0x158>
 8005262:	b2ad      	uxth	r5, r5
 8005264:	e7e4      	b.n	8005230 <_printf_i+0x158>
 8005266:	681a      	ldr	r2, [r3, #0]
 8005268:	680d      	ldr	r5, [r1, #0]
 800526a:	1d10      	adds	r0, r2, #4
 800526c:	6949      	ldr	r1, [r1, #20]
 800526e:	6018      	str	r0, [r3, #0]
 8005270:	6813      	ldr	r3, [r2, #0]
 8005272:	062e      	lsls	r6, r5, #24
 8005274:	d501      	bpl.n	800527a <_printf_i+0x1a2>
 8005276:	6019      	str	r1, [r3, #0]
 8005278:	e002      	b.n	8005280 <_printf_i+0x1a8>
 800527a:	066d      	lsls	r5, r5, #25
 800527c:	d5fb      	bpl.n	8005276 <_printf_i+0x19e>
 800527e:	8019      	strh	r1, [r3, #0]
 8005280:	2300      	movs	r3, #0
 8005282:	9e04      	ldr	r6, [sp, #16]
 8005284:	6123      	str	r3, [r4, #16]
 8005286:	e7bb      	b.n	8005200 <_printf_i+0x128>
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	1d11      	adds	r1, r2, #4
 800528c:	6019      	str	r1, [r3, #0]
 800528e:	6816      	ldr	r6, [r2, #0]
 8005290:	2100      	movs	r1, #0
 8005292:	0030      	movs	r0, r6
 8005294:	6862      	ldr	r2, [r4, #4]
 8005296:	f000 f8ed 	bl	8005474 <memchr>
 800529a:	2800      	cmp	r0, #0
 800529c:	d001      	beq.n	80052a2 <_printf_i+0x1ca>
 800529e:	1b80      	subs	r0, r0, r6
 80052a0:	6060      	str	r0, [r4, #4]
 80052a2:	6863      	ldr	r3, [r4, #4]
 80052a4:	6123      	str	r3, [r4, #16]
 80052a6:	2300      	movs	r3, #0
 80052a8:	9a04      	ldr	r2, [sp, #16]
 80052aa:	7013      	strb	r3, [r2, #0]
 80052ac:	e7a8      	b.n	8005200 <_printf_i+0x128>
 80052ae:	6923      	ldr	r3, [r4, #16]
 80052b0:	0032      	movs	r2, r6
 80052b2:	9906      	ldr	r1, [sp, #24]
 80052b4:	9805      	ldr	r0, [sp, #20]
 80052b6:	9d07      	ldr	r5, [sp, #28]
 80052b8:	47a8      	blx	r5
 80052ba:	1c43      	adds	r3, r0, #1
 80052bc:	d0aa      	beq.n	8005214 <_printf_i+0x13c>
 80052be:	6823      	ldr	r3, [r4, #0]
 80052c0:	079b      	lsls	r3, r3, #30
 80052c2:	d415      	bmi.n	80052f0 <_printf_i+0x218>
 80052c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052c6:	68e0      	ldr	r0, [r4, #12]
 80052c8:	4298      	cmp	r0, r3
 80052ca:	daa5      	bge.n	8005218 <_printf_i+0x140>
 80052cc:	0018      	movs	r0, r3
 80052ce:	e7a3      	b.n	8005218 <_printf_i+0x140>
 80052d0:	0022      	movs	r2, r4
 80052d2:	2301      	movs	r3, #1
 80052d4:	9906      	ldr	r1, [sp, #24]
 80052d6:	9805      	ldr	r0, [sp, #20]
 80052d8:	9e07      	ldr	r6, [sp, #28]
 80052da:	3219      	adds	r2, #25
 80052dc:	47b0      	blx	r6
 80052de:	1c43      	adds	r3, r0, #1
 80052e0:	d098      	beq.n	8005214 <_printf_i+0x13c>
 80052e2:	3501      	adds	r5, #1
 80052e4:	68e3      	ldr	r3, [r4, #12]
 80052e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80052e8:	1a9b      	subs	r3, r3, r2
 80052ea:	42ab      	cmp	r3, r5
 80052ec:	dcf0      	bgt.n	80052d0 <_printf_i+0x1f8>
 80052ee:	e7e9      	b.n	80052c4 <_printf_i+0x1ec>
 80052f0:	2500      	movs	r5, #0
 80052f2:	e7f7      	b.n	80052e4 <_printf_i+0x20c>
 80052f4:	08005915 	.word	0x08005915
 80052f8:	08005926 	.word	0x08005926

080052fc <_sbrk_r>:
 80052fc:	2300      	movs	r3, #0
 80052fe:	b570      	push	{r4, r5, r6, lr}
 8005300:	4d06      	ldr	r5, [pc, #24]	; (800531c <_sbrk_r+0x20>)
 8005302:	0004      	movs	r4, r0
 8005304:	0008      	movs	r0, r1
 8005306:	602b      	str	r3, [r5, #0]
 8005308:	f7fb f9fa 	bl	8000700 <_sbrk>
 800530c:	1c43      	adds	r3, r0, #1
 800530e:	d103      	bne.n	8005318 <_sbrk_r+0x1c>
 8005310:	682b      	ldr	r3, [r5, #0]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d000      	beq.n	8005318 <_sbrk_r+0x1c>
 8005316:	6023      	str	r3, [r4, #0]
 8005318:	bd70      	pop	{r4, r5, r6, pc}
 800531a:	46c0      	nop			; (mov r8, r8)
 800531c:	20000974 	.word	0x20000974

08005320 <__sread>:
 8005320:	b570      	push	{r4, r5, r6, lr}
 8005322:	000c      	movs	r4, r1
 8005324:	250e      	movs	r5, #14
 8005326:	5f49      	ldrsh	r1, [r1, r5]
 8005328:	f000 f90c 	bl	8005544 <_read_r>
 800532c:	2800      	cmp	r0, #0
 800532e:	db03      	blt.n	8005338 <__sread+0x18>
 8005330:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005332:	181b      	adds	r3, r3, r0
 8005334:	6563      	str	r3, [r4, #84]	; 0x54
 8005336:	bd70      	pop	{r4, r5, r6, pc}
 8005338:	89a3      	ldrh	r3, [r4, #12]
 800533a:	4a02      	ldr	r2, [pc, #8]	; (8005344 <__sread+0x24>)
 800533c:	4013      	ands	r3, r2
 800533e:	81a3      	strh	r3, [r4, #12]
 8005340:	e7f9      	b.n	8005336 <__sread+0x16>
 8005342:	46c0      	nop			; (mov r8, r8)
 8005344:	ffffefff 	.word	0xffffefff

08005348 <__swrite>:
 8005348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800534a:	001f      	movs	r7, r3
 800534c:	898b      	ldrh	r3, [r1, #12]
 800534e:	0005      	movs	r5, r0
 8005350:	000c      	movs	r4, r1
 8005352:	0016      	movs	r6, r2
 8005354:	05db      	lsls	r3, r3, #23
 8005356:	d505      	bpl.n	8005364 <__swrite+0x1c>
 8005358:	230e      	movs	r3, #14
 800535a:	5ec9      	ldrsh	r1, [r1, r3]
 800535c:	2200      	movs	r2, #0
 800535e:	2302      	movs	r3, #2
 8005360:	f000 f874 	bl	800544c <_lseek_r>
 8005364:	89a3      	ldrh	r3, [r4, #12]
 8005366:	4a05      	ldr	r2, [pc, #20]	; (800537c <__swrite+0x34>)
 8005368:	0028      	movs	r0, r5
 800536a:	4013      	ands	r3, r2
 800536c:	81a3      	strh	r3, [r4, #12]
 800536e:	0032      	movs	r2, r6
 8005370:	230e      	movs	r3, #14
 8005372:	5ee1      	ldrsh	r1, [r4, r3]
 8005374:	003b      	movs	r3, r7
 8005376:	f000 f81f 	bl	80053b8 <_write_r>
 800537a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800537c:	ffffefff 	.word	0xffffefff

08005380 <__sseek>:
 8005380:	b570      	push	{r4, r5, r6, lr}
 8005382:	000c      	movs	r4, r1
 8005384:	250e      	movs	r5, #14
 8005386:	5f49      	ldrsh	r1, [r1, r5]
 8005388:	f000 f860 	bl	800544c <_lseek_r>
 800538c:	89a3      	ldrh	r3, [r4, #12]
 800538e:	1c42      	adds	r2, r0, #1
 8005390:	d103      	bne.n	800539a <__sseek+0x1a>
 8005392:	4a05      	ldr	r2, [pc, #20]	; (80053a8 <__sseek+0x28>)
 8005394:	4013      	ands	r3, r2
 8005396:	81a3      	strh	r3, [r4, #12]
 8005398:	bd70      	pop	{r4, r5, r6, pc}
 800539a:	2280      	movs	r2, #128	; 0x80
 800539c:	0152      	lsls	r2, r2, #5
 800539e:	4313      	orrs	r3, r2
 80053a0:	81a3      	strh	r3, [r4, #12]
 80053a2:	6560      	str	r0, [r4, #84]	; 0x54
 80053a4:	e7f8      	b.n	8005398 <__sseek+0x18>
 80053a6:	46c0      	nop			; (mov r8, r8)
 80053a8:	ffffefff 	.word	0xffffefff

080053ac <__sclose>:
 80053ac:	b510      	push	{r4, lr}
 80053ae:	230e      	movs	r3, #14
 80053b0:	5ec9      	ldrsh	r1, [r1, r3]
 80053b2:	f000 f815 	bl	80053e0 <_close_r>
 80053b6:	bd10      	pop	{r4, pc}

080053b8 <_write_r>:
 80053b8:	b570      	push	{r4, r5, r6, lr}
 80053ba:	0004      	movs	r4, r0
 80053bc:	0008      	movs	r0, r1
 80053be:	0011      	movs	r1, r2
 80053c0:	001a      	movs	r2, r3
 80053c2:	2300      	movs	r3, #0
 80053c4:	4d05      	ldr	r5, [pc, #20]	; (80053dc <_write_r+0x24>)
 80053c6:	602b      	str	r3, [r5, #0]
 80053c8:	f7fb f951 	bl	800066e <_write>
 80053cc:	1c43      	adds	r3, r0, #1
 80053ce:	d103      	bne.n	80053d8 <_write_r+0x20>
 80053d0:	682b      	ldr	r3, [r5, #0]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d000      	beq.n	80053d8 <_write_r+0x20>
 80053d6:	6023      	str	r3, [r4, #0]
 80053d8:	bd70      	pop	{r4, r5, r6, pc}
 80053da:	46c0      	nop			; (mov r8, r8)
 80053dc:	20000974 	.word	0x20000974

080053e0 <_close_r>:
 80053e0:	2300      	movs	r3, #0
 80053e2:	b570      	push	{r4, r5, r6, lr}
 80053e4:	4d06      	ldr	r5, [pc, #24]	; (8005400 <_close_r+0x20>)
 80053e6:	0004      	movs	r4, r0
 80053e8:	0008      	movs	r0, r1
 80053ea:	602b      	str	r3, [r5, #0]
 80053ec:	f7fb f95b 	bl	80006a6 <_close>
 80053f0:	1c43      	adds	r3, r0, #1
 80053f2:	d103      	bne.n	80053fc <_close_r+0x1c>
 80053f4:	682b      	ldr	r3, [r5, #0]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d000      	beq.n	80053fc <_close_r+0x1c>
 80053fa:	6023      	str	r3, [r4, #0]
 80053fc:	bd70      	pop	{r4, r5, r6, pc}
 80053fe:	46c0      	nop			; (mov r8, r8)
 8005400:	20000974 	.word	0x20000974

08005404 <_fstat_r>:
 8005404:	2300      	movs	r3, #0
 8005406:	b570      	push	{r4, r5, r6, lr}
 8005408:	4d06      	ldr	r5, [pc, #24]	; (8005424 <_fstat_r+0x20>)
 800540a:	0004      	movs	r4, r0
 800540c:	0008      	movs	r0, r1
 800540e:	0011      	movs	r1, r2
 8005410:	602b      	str	r3, [r5, #0]
 8005412:	f7fb f952 	bl	80006ba <_fstat>
 8005416:	1c43      	adds	r3, r0, #1
 8005418:	d103      	bne.n	8005422 <_fstat_r+0x1e>
 800541a:	682b      	ldr	r3, [r5, #0]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d000      	beq.n	8005422 <_fstat_r+0x1e>
 8005420:	6023      	str	r3, [r4, #0]
 8005422:	bd70      	pop	{r4, r5, r6, pc}
 8005424:	20000974 	.word	0x20000974

08005428 <_isatty_r>:
 8005428:	2300      	movs	r3, #0
 800542a:	b570      	push	{r4, r5, r6, lr}
 800542c:	4d06      	ldr	r5, [pc, #24]	; (8005448 <_isatty_r+0x20>)
 800542e:	0004      	movs	r4, r0
 8005430:	0008      	movs	r0, r1
 8005432:	602b      	str	r3, [r5, #0]
 8005434:	f7fb f94f 	bl	80006d6 <_isatty>
 8005438:	1c43      	adds	r3, r0, #1
 800543a:	d103      	bne.n	8005444 <_isatty_r+0x1c>
 800543c:	682b      	ldr	r3, [r5, #0]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d000      	beq.n	8005444 <_isatty_r+0x1c>
 8005442:	6023      	str	r3, [r4, #0]
 8005444:	bd70      	pop	{r4, r5, r6, pc}
 8005446:	46c0      	nop			; (mov r8, r8)
 8005448:	20000974 	.word	0x20000974

0800544c <_lseek_r>:
 800544c:	b570      	push	{r4, r5, r6, lr}
 800544e:	0004      	movs	r4, r0
 8005450:	0008      	movs	r0, r1
 8005452:	0011      	movs	r1, r2
 8005454:	001a      	movs	r2, r3
 8005456:	2300      	movs	r3, #0
 8005458:	4d05      	ldr	r5, [pc, #20]	; (8005470 <_lseek_r+0x24>)
 800545a:	602b      	str	r3, [r5, #0]
 800545c:	f7fb f944 	bl	80006e8 <_lseek>
 8005460:	1c43      	adds	r3, r0, #1
 8005462:	d103      	bne.n	800546c <_lseek_r+0x20>
 8005464:	682b      	ldr	r3, [r5, #0]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d000      	beq.n	800546c <_lseek_r+0x20>
 800546a:	6023      	str	r3, [r4, #0]
 800546c:	bd70      	pop	{r4, r5, r6, pc}
 800546e:	46c0      	nop			; (mov r8, r8)
 8005470:	20000974 	.word	0x20000974

08005474 <memchr>:
 8005474:	b2c9      	uxtb	r1, r1
 8005476:	1882      	adds	r2, r0, r2
 8005478:	4290      	cmp	r0, r2
 800547a:	d101      	bne.n	8005480 <memchr+0xc>
 800547c:	2000      	movs	r0, #0
 800547e:	4770      	bx	lr
 8005480:	7803      	ldrb	r3, [r0, #0]
 8005482:	428b      	cmp	r3, r1
 8005484:	d0fb      	beq.n	800547e <memchr+0xa>
 8005486:	3001      	adds	r0, #1
 8005488:	e7f6      	b.n	8005478 <memchr+0x4>

0800548a <memcpy>:
 800548a:	2300      	movs	r3, #0
 800548c:	b510      	push	{r4, lr}
 800548e:	429a      	cmp	r2, r3
 8005490:	d100      	bne.n	8005494 <memcpy+0xa>
 8005492:	bd10      	pop	{r4, pc}
 8005494:	5ccc      	ldrb	r4, [r1, r3]
 8005496:	54c4      	strb	r4, [r0, r3]
 8005498:	3301      	adds	r3, #1
 800549a:	e7f8      	b.n	800548e <memcpy+0x4>

0800549c <memmove>:
 800549c:	b510      	push	{r4, lr}
 800549e:	4288      	cmp	r0, r1
 80054a0:	d902      	bls.n	80054a8 <memmove+0xc>
 80054a2:	188b      	adds	r3, r1, r2
 80054a4:	4298      	cmp	r0, r3
 80054a6:	d303      	bcc.n	80054b0 <memmove+0x14>
 80054a8:	2300      	movs	r3, #0
 80054aa:	e007      	b.n	80054bc <memmove+0x20>
 80054ac:	5c8b      	ldrb	r3, [r1, r2]
 80054ae:	5483      	strb	r3, [r0, r2]
 80054b0:	3a01      	subs	r2, #1
 80054b2:	d2fb      	bcs.n	80054ac <memmove+0x10>
 80054b4:	bd10      	pop	{r4, pc}
 80054b6:	5ccc      	ldrb	r4, [r1, r3]
 80054b8:	54c4      	strb	r4, [r0, r3]
 80054ba:	3301      	adds	r3, #1
 80054bc:	429a      	cmp	r2, r3
 80054be:	d1fa      	bne.n	80054b6 <memmove+0x1a>
 80054c0:	e7f8      	b.n	80054b4 <memmove+0x18>
	...

080054c4 <__malloc_lock>:
 80054c4:	b510      	push	{r4, lr}
 80054c6:	4802      	ldr	r0, [pc, #8]	; (80054d0 <__malloc_lock+0xc>)
 80054c8:	f7ff fae3 	bl	8004a92 <__retarget_lock_acquire_recursive>
 80054cc:	bd10      	pop	{r4, pc}
 80054ce:	46c0      	nop			; (mov r8, r8)
 80054d0:	20000968 	.word	0x20000968

080054d4 <__malloc_unlock>:
 80054d4:	b510      	push	{r4, lr}
 80054d6:	4802      	ldr	r0, [pc, #8]	; (80054e0 <__malloc_unlock+0xc>)
 80054d8:	f7ff fadc 	bl	8004a94 <__retarget_lock_release_recursive>
 80054dc:	bd10      	pop	{r4, pc}
 80054de:	46c0      	nop			; (mov r8, r8)
 80054e0:	20000968 	.word	0x20000968

080054e4 <_realloc_r>:
 80054e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80054e6:	0007      	movs	r7, r0
 80054e8:	000e      	movs	r6, r1
 80054ea:	0014      	movs	r4, r2
 80054ec:	2900      	cmp	r1, #0
 80054ee:	d105      	bne.n	80054fc <_realloc_r+0x18>
 80054f0:	0011      	movs	r1, r2
 80054f2:	f7ff fba9 	bl	8004c48 <_malloc_r>
 80054f6:	0005      	movs	r5, r0
 80054f8:	0028      	movs	r0, r5
 80054fa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80054fc:	2a00      	cmp	r2, #0
 80054fe:	d103      	bne.n	8005508 <_realloc_r+0x24>
 8005500:	f7ff fb36 	bl	8004b70 <_free_r>
 8005504:	0025      	movs	r5, r4
 8005506:	e7f7      	b.n	80054f8 <_realloc_r+0x14>
 8005508:	f000 f830 	bl	800556c <_malloc_usable_size_r>
 800550c:	9001      	str	r0, [sp, #4]
 800550e:	4284      	cmp	r4, r0
 8005510:	d803      	bhi.n	800551a <_realloc_r+0x36>
 8005512:	0035      	movs	r5, r6
 8005514:	0843      	lsrs	r3, r0, #1
 8005516:	42a3      	cmp	r3, r4
 8005518:	d3ee      	bcc.n	80054f8 <_realloc_r+0x14>
 800551a:	0021      	movs	r1, r4
 800551c:	0038      	movs	r0, r7
 800551e:	f7ff fb93 	bl	8004c48 <_malloc_r>
 8005522:	1e05      	subs	r5, r0, #0
 8005524:	d0e8      	beq.n	80054f8 <_realloc_r+0x14>
 8005526:	9b01      	ldr	r3, [sp, #4]
 8005528:	0022      	movs	r2, r4
 800552a:	429c      	cmp	r4, r3
 800552c:	d900      	bls.n	8005530 <_realloc_r+0x4c>
 800552e:	001a      	movs	r2, r3
 8005530:	0031      	movs	r1, r6
 8005532:	0028      	movs	r0, r5
 8005534:	f7ff ffa9 	bl	800548a <memcpy>
 8005538:	0031      	movs	r1, r6
 800553a:	0038      	movs	r0, r7
 800553c:	f7ff fb18 	bl	8004b70 <_free_r>
 8005540:	e7da      	b.n	80054f8 <_realloc_r+0x14>
	...

08005544 <_read_r>:
 8005544:	b570      	push	{r4, r5, r6, lr}
 8005546:	0004      	movs	r4, r0
 8005548:	0008      	movs	r0, r1
 800554a:	0011      	movs	r1, r2
 800554c:	001a      	movs	r2, r3
 800554e:	2300      	movs	r3, #0
 8005550:	4d05      	ldr	r5, [pc, #20]	; (8005568 <_read_r+0x24>)
 8005552:	602b      	str	r3, [r5, #0]
 8005554:	f7fb f86e 	bl	8000634 <_read>
 8005558:	1c43      	adds	r3, r0, #1
 800555a:	d103      	bne.n	8005564 <_read_r+0x20>
 800555c:	682b      	ldr	r3, [r5, #0]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d000      	beq.n	8005564 <_read_r+0x20>
 8005562:	6023      	str	r3, [r4, #0]
 8005564:	bd70      	pop	{r4, r5, r6, pc}
 8005566:	46c0      	nop			; (mov r8, r8)
 8005568:	20000974 	.word	0x20000974

0800556c <_malloc_usable_size_r>:
 800556c:	1f0b      	subs	r3, r1, #4
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	1f18      	subs	r0, r3, #4
 8005572:	2b00      	cmp	r3, #0
 8005574:	da01      	bge.n	800557a <_malloc_usable_size_r+0xe>
 8005576:	580b      	ldr	r3, [r1, r0]
 8005578:	18c0      	adds	r0, r0, r3
 800557a:	4770      	bx	lr

0800557c <_init>:
 800557c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800557e:	46c0      	nop			; (mov r8, r8)
 8005580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005582:	bc08      	pop	{r3}
 8005584:	469e      	mov	lr, r3
 8005586:	4770      	bx	lr

08005588 <_fini>:
 8005588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800558a:	46c0      	nop			; (mov r8, r8)
 800558c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800558e:	bc08      	pop	{r3}
 8005590:	469e      	mov	lr, r3
 8005592:	4770      	bx	lr
